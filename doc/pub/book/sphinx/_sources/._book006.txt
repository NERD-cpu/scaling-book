.. !split

Basic PDE models
%%%%%%%%%%%%%%%%

This chapter extends the scaling technique to well-known partial differential
equation (PDE) models for waves, diffusion, and transport.
We start out with the simplest 1D models of the PDEs and then progress
with additional terms, different types of boundary and initial conditions,
and generalizations to 2D and 3D.

.. _sec:scale:wave:

The wave equation
=================

A standard, linear, one-dimensional wave equation problem
in a homogeneous medium may be written as

.. _Eq:scale:wave:pde1:

.. math::
   :label: scale:wave:pde1
        
        \frac{\partial^2 u}{\partial t^2} =
        c^2 {\partial^2 u\over\partial x^2}, \quad  x\in (0,L),\ t\in (0,T],
        
        

where :math:`c` is the constant wave velocity of the medium.
With a briefer notation, where subscripts indicate derivatives,
the PDE :eq:`scale:wave:pde1` can be written
:math:`u_{tt}=c^2u_{xx}`. This subscript notation will occasionally be
used later.

In multi dimensions in heterogeneous media we have the generalization

.. _Eq:scale:wave:pde1:3D:

.. math::
   :label: scale:wave:pde1:3D
        
        \frac{\partial^2 u}{\partial t^2} =
        \nabla\cdot\left(c^2 \nabla u\right) + f, \quad  x,y,z\in \Omega,\ t\in (0,T]{\thinspace .}
        
        

How to scale time depends on the PDE, the spatial scale depends on
the domain, and the scale of :math:`u` usually depends on :math:`f` or the
boundary or initial condition.

Simple homogeneous Dirichlet conditions
---------------------------------------

Let us first start with homogeneous Dirichlet conditions in space and
no initial velocity :math:`u_t`:

.. _Eq:scale:wave:pde1:ic:u:

.. math::
   :label: scale:wave:pde1:ic:u
        
        u(x,0) = I(x), \quad x\in [0,L],
        
        

.. _Eq:scale:wave:pde1:ic:ut:

.. math::
   :label: scale:wave:pde1:ic:ut
          
        {\partial\over\partial t}u(x,0) = 0, \quad  x\in [0,L],
        
        

.. _Eq:scale:wave:pde1:bc:0:

.. math::
   :label: scale:wave:pde1:bc:0
          
        u(0,t)  = 0, \quad   t\in (0,T],
        
        

.. _Eq:scale:wave:pde1:bc:L:

.. math::
   :label: scale:wave:pde1:bc:L
          
        u(L,t)  = 0, \quad   t\in (0,T].
        
        

The independent variables are :math:`x` and :math:`t`, while :math:`u` is the dependent
variable.
The rest of the parameters, :math:`c`, :math:`L`, :math:`T`, and :math:`I(x)`, are given data.

We start with introducing dimensionless versions of the independent and
dependent variables:

.. math::
        
        \bar x = \frac{x}{x_c},\quad \bar t=\frac{t}{t_c},\quad\bar u=\frac{u}{u_c}
        {\thinspace .}
        

Inserting the :math:`x=x_c\bar x`, etc., in :eq:`scale:wave:pde1` and
:eq:`scale:wave:pde1:ic:u`-:eq:`scale:wave:pde1:bc:L` gives

.. math::
        
        \frac{\partial^2 \bar u}{\partial \bar t^2} &=
        \frac{t_c^2c^2}{x_c^2}{\partial^2 \bar u\over\partial x^2}, \quad & \bar x\in (0,L/x_c),\ \bar t\in (0,T/t_c],
        \\ 
        \bar u(\bar x,0) &= \frac{I(x_c\bar x)}{u_c},
        \quad &\bar x\in [0,L/x_c],
        \\ 
        \frac{\partial}{\partial \bar t}\bar u(\bar x,0) &= 0,
        \quad & \bar x\in [0,L/x_c],
        \\ 
        \bar u(0,\bar t) & = 0,
        \quad  & \bar t\in (0,T/t_c],
        \\ 
        \bar u(L/x_c,\bar t) & = 0,
        \quad &\bar t\in (0,T/t_c].
        

The key question is how to define the scales.
A natural choice is :math:`x_c=L` since this makes :math:`\bar x\in [0,1]`.
For the spatial scale and the problem governed by
:eq:`scale:wave:pde1` we
have some analytical insight that can help.
The solution behaves like

.. _Eq:scale:wave:pde:sol:general:

.. math::
   :label: scale:wave:pde:sol:general
        
        u(x,t) = f_R(x-ct) + f_R(x+ct),
        
        

i.e., a right- and left-going wave with velocity :math:`c`. The initial
conditions constrain the choices of :math:`f_R` and :math:`f_L` to :math:`f_L + f_R=I`
and :math:`-cf_L' + cf_R' = 0`. The solution is :math:`f_R = f_L = \frac{1}{2}`,
and consequently

.. math::
        
        u(x,t) = \frac{1}{2}I(x-ct) + \frac{1}{2}I(x+ct),
        

which tells that the initial condition splits in two, half of it moves
to the left and half to the right.
This means in particular that we can choose :math:`u_c=\max_x |I(x)|`
and get :math:`|\bar u|\leq 1`, which is a goal. It must be added that
boundary conditions may result in reflected waves and a more
complicated solution that indicated above with the two left- and
right-going parts of the initial condition.

Regarding the time scale, we may look at the two terms in the scaled
PDE and argue that if :math:`|u|` and its derivatives are to be of order unity,
then the size of the second-order derivatives should be the same, and
:math:`t_c` can be chosen to make the coefficient :math:`t_c^2 c^2 /x_c^2` unity,
i.e., :math:`t_c=L/c`.
Another reasoning may set :math:`t_c` as the time it takes the wave
to travel through the domain :math:`[0,L]`. Since the wave has constant
speed :math:`c`, :math:`t_c = L/c`.

With the described choices of scales,
we end up with the dimensionless initial-boundary value problem

.. _Eq:scale:wave:pde1:d:

.. math::
   :label: scale:wave:pde1:d
        
        \frac{\partial^2 \bar u}{\partial \bar t^2} =
        {\partial^2 \bar u\over\partial x^2}, \quad  \bar x\in (0,1),\ \bar t\in (0,\bar T],
        
        

.. _Eq:scale:wave:pde1:ic:u:d:

.. math::
   :label: scale:wave:pde1:ic:u:d
          
        \bar u(\bar x,0) = \frac{I(\bar x L)}{\max_{x\in(0,L)} |I(x)|},
        \quad \bar x\in [0,1],
        
        

.. _Eq:scale:wave:pde1:ic:ut:d:

.. math::
   :label: scale:wave:pde1:ic:ut:d
          
        {\partial\over\partial \bar t}\bar u(\bar x,0) = 0,
        \quad  \bar x\in [0,1],
        
        

.. _Eq:scale:wave:pde1:bc:0:d:

.. math::
   :label: scale:wave:pde1:bc:0:d
          
        \bar u(0,\bar t)  = 0,
        \quad  \bar t\in (0,\bar T],
        
        

.. _Eq:scale:wave:pde1:bc:L:d:

.. math::
   :label: scale:wave:pde1:bc:L:d
          
        \bar u(1,\bar t)  = 0,
        \quad  \bar t\in (0,\bar T].
        
        

Here, :math:`\bar T = Tc/L`.

The striking feature of
:eq:`scale:wave:pde1:d`-:eq:`scale:wave:pde1:bc:L:d`
is that there are *no physical parameters* involved! Everything we need
to specify is the shape of the initial condition and then scale it
such that it is less than or equal to 1.

The physical solution with dimension is recovered from :math:`\bar u(\bar x,\bar t)`
through

.. _Eq:_auto28:

.. math::
   :label: _auto28
        
        u(x,t) = \max_{x\in(0,L)}I(x)\,\bar u(\bar x L, \bar t L/c)
        
        

Implementation of the scaled wave equation
------------------------------------------

[**hpl 6**: This must be rewritten and placed in an appendix - or dropped. The basic code from ``wave1D_u0.py`` must be shown, otherwise the discussion of avoiding recomputation does not make much sense.]

[**hpl 7**: I make a big issue of retrieving data from file, but in more complicated cases, this has little practical value as the number of dimensionless numbers gets large (approaching the number of parameters anyway). In the present simple cases, the computations are so fast that there is little to gain by avoiding them. The text is therefore biased with respect to the practical benefit of reusing old solutions. Does it hurt to document the idea? Need views on this.]

How do we implement :eq:`scale:wave:pde1:d`-:eq:`scale:wave:pde1:bc:L:d`?
As for the simpler mathematical models, I suggest to implement the model
with dimensions and observe how to set parameters to obtain the scaled
model. In the present case, one must choose :math:`L=1`, :math:`c=1`, and scale :math:`I` by its
maximum value. That's all!

Several implementations of 1D wave equation models with different
degree of mathematical and software complexity appear in
the directory `wave/wave1D <http://tinyurl.com/nm5587k/wave/wave1D>`__. The simplest
version is `wave1D_u0.py <http://tinyurl.com/nm5587k/wave/wave1D/wave1D_u0.py>`__
that implements :eq:`scale:wave:pde1` and
(:ref:`scale:wave:pde1:ic:u`-:eq:`scale:wave:pde1:bc:L`.
This is the code to be used in the following. It is described
in in
the document `Finite difference methods for wave motion <http://tinyurl.com/k3sdbuv/pub/wave>`__
[Ref6]_.

Waves on a string
~~~~~~~~~~~~~~~~~

As example, we may let the original initial-boundary value problem
:eq:`scale:wave:pde1`-:eq:`scale:wave:pde1:bc:L` model
vibrations of a string on a string instrument. With :math:`u` as the
displacement of the string, the boundary conditions :math:`u=0` at the ends
are relevant, as well as the zero velocity condition :math:`\partial u/\partial t=0`
at :math:`t=0`.
The initial condition :math:`I(x)` has typically a triangular shape for a picked
guitar string.
The physical problem needs parameters for the amplitude of :math:`I(x)`,
the length :math:`L` of the string, and the value of :math:`c` for the string. Only
the latter is challenging as it involves relating :math:`c` to the
pitch (i.e., time frequency) of the string. In the scaled problem, we
can forget about all this. We simply set :math:`L=1`, :math:`c=1`, and let
:math:`I(x)` have a peak of unity at :math:`x=x_0\in(0,1)`:

.. math::
        
        \frac{I(x)}{\max_x I(x)} = \left\lbrace
        \begin{array}{ll}
        x/x_0, & x < x_0,\\ 
        (1-x)/(1-x_0), & \hbox{otherwise}
        \end{array}\right.
        

The dimensionless coordinate of the peak, :math:`x_0`, is the only
dimensionless parameter in the problem. For fixed :math:`x_0`,
one single simulation will capture all possible solutions with such
a triangular shape.

Detecting an already computed case
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In the section :ref:`sec:scale:decay:prog` we demonstrated the use of ``joblib``
for making a function that detects if a case has already been run and
in that case the previous solution can be returned from a database.
It turns out that ``joblib`` cannot handle functions with function arguments,
which we have a lot of in the ``solver`` functions for 1D wave equations.

A manual strategy taken from `wave1D_dn_vc.py <http://tinyurl.com/nm5587k/wave/wave1D/wave1D_dn_vc.py>`__ and explained in
the document
`Scientific software engineering; wave equation model <http://tinyurl.com/k3sdbuv/pub/softeng2>`__ [Ref7]_
is to convert
all input data to the ``solver`` function to a string,
which is thereafter converted to an SHA1 hash string
(via ``hashlib.sha1``) and used to recognize the input.
A SHA1 string is also suitable as part of a file or directory name
where computed solutions can be stored.

We can, in the wave equation solver
retrieve the solution, rather than computing it, if
the hash string is the same (because then the computations have already been
done). This can save a lot of computations if a scaled solution can be
reused in a number of cases with dimensions. We will sketch the
code that implements the idea.

A solver for the scaled problem is first developed. We limit the
focus to the simple constant-coefficient wave equation with :math:`u_t(x,0)=0`.
The solver for the unscaled problem is taken from the previously
mentioned ``wave1D_u0.py`` file.

.. code-block:: python

        from wave1D_u0 import solver as solver_unscaled
        from Storage import Storage
        
        def solver_scaled(I, dt, C, T):
            """
            Solve 1D wave equation in dimensionless form.
            """
            # Make a hash of the arguments
            import inspect, hashlib
            data = inspect.getsource(I) + '_' + str(dt) + '_' + \ 
                   str(C) + '_' + str(T)
            # Not fool proof: if x0 changes value, the source code of I
            # is still the same, and no recomputation takes place...
            hashed_input = hashlib.sha1(data).hexdigest()
        
            # Use joblib-based tool (class Storage) to store already
            # computed solutions in files
            cachedir = 'tmp_%s' % hashed_input
            is_computed = os.path.isdir(cachedir)
            print 'cachedir:', cachedir, is_computed
            storage = Storage(cachedir, verbose=0)
        
            def action(u, x, t, n):
                if n == 0:
                    storage.save('x', x)
                    storage.save('t', t)
                storage.save('u%d' % n, u)
        
            if is_computed:
                print 'No need to compute the numerical solution'
                return storage
            else:
                print 'Computing the numerical solution'
                solver_unscaled(
                    I=I, V=0, f=0, c=1, L=1, dt=dt, C=C, T=T,
                    user_action=action)
                return storage

This function employs ideas described in
the document
`Scientific software engineering; wave equation model <http://tinyurl.com/k3sdbuv/pub/softeng2>`__ [Ref7]_ for storing
arrays on disk with use of ``joblib`` (class ``Storage``) and recognizing
previous input through a hash string. If the input is the same, the
hash is the same and we can test on the existence of a
directory whose name contains the hash. If that directory exists, the
solution for this set of input data is already computed, and we can just
return the ``storage`` object from which one can retrieve the space and time
mesh as well as all the solutions ``u0``, ``u1``, and so on.

Although the partial differential equation model has no physical
parameters (assuming :math:`x_0` fixed), the corresponding numerical model
depends on the Courant number :math:`C=c\Delta t/\Delta x` and the length
:math:`T` of the simulations.

A specific application of this simple solver is the vibrations of a guitar
string. The scaled version depends only on :math:`C` (if we say :math:`T` is fixed
and :math:`N_x` is fixed through :math:`\Delta t`). The string vibrations can be
simulated by the following function:

.. code-block:: python

        def guitar_scaled(C, animate=True):
            """Triangular wave (pulled guitar string)."""
            L = 1.0
            x0 = 0.8*L
            T = 2
            Nx = 50; dx = L/float(Nx)
            dt = dx/1  # Choose dt at the stability limit
        
            def I(x):
                return x/x0 if x < x0 else (L-x)/(L-x0)
        
            storage = solver_scaled(I, dt, C, T)
            if not animate:
                return storage
        
            from scitools.std import plot
            x = storage.retrieve('x')
            t = storage.retrieve('t')
            for n in range(len(t)):
                u = storage.retrieve('u%d' %n)
                plot(x, u, 'r-', label='t=%.2f' % t[n],
                     axis=[x[0], x[-1], -1.2, 1.2])
            return storage

To solve an unscaled problem, we need some unscale functions:

.. code-block:: python

        def unscale_u(u, I_max, c, L):
            return I_max*u
        
        def unscale_x(x, I_max, c, L):
            return x*L
        
        def unscale_t(t, I_max, c, L):
            return t*L**2/float(c)

We can now easily solve a range of unscaled cases by

.. code-block:: python

        def guitar(C, I_max, c, L):
            """Triangular wave (pulled guitar string). Unscaled version."""
            storage = guitar_scaled(C, animate=False)
            x = storage.retrieve('x')
            t = storage.retrieve('t')
            x = unscale_x(x, I_max, c, L)
            t = unscale_t(t, I_max, c, L)
        
            from scitools.std import plot
            for n in range(len(t)):
                u = storage.retrieve('u%d' %n)
                u = unscale_u(u, I_max, c, L)
                plot(x, u, 'r-', label='t=%.2f' % t[n],
                     axis=[x[0], x[-1], -I_max*1.2, 1.2*I_max])

If ``guitar_scaled`` figures out that the scaled problem is already solved,
it just returns the ``storage`` object, otherwise it performs calculations.
Anyway, we retrieve the space and time mesh as well as all the solutions.
The ``plot`` function from `SciTools <https://github.com/hplgit/scitools>`__
is used for compact code for
animation, but Matplotlib can equally well be used (with a bit more coding).

Suppose we run three calls to ``guitar`` with three different values of
``I_max``. The output will be

.. code-block:: text

        Computing the numerical solution
        No need to compute the numerical solution
        No need to compute the numerical solution

This indicates that we rely on the scaled solution for the two
other cases with different ``I_max`` parameter. Running such a program again
will avoid all computations and show movies solely based on
precomputed file data.

.. _scale:wave:pde2:

Time-dependent Dirichlet condition
----------------------------------

A generalization of :eq:`scale:wave:pde1`-:eq:`scale:wave:pde1:bc:L` is to
allow for a time-dependent Dirichlet condition at one end, say
:math:`u(0,t)=U_L(t)`. At the other end we may still have :math:`u=0`.
This new condition at :math:`x=0` may model a specified wave that
enters the domain. For example, if we feed in a monochromatic wave
:math:`A\sin(k(x-ct))` from the left end, :math:`U_L(t)=A\sin (kct)`.
This forcing of the wave motion has its own amplitude and time scale that
could affect the choice of :math:`u_c` and :math:`t_c`.

The main difference from the previous initial-boundary value problem
is the condition at :math:`x=0`, which now reads

.. math::
         \bar u(0,\bar t) = \frac{U_L(\bar t t_c)}{u_c}

in scaled form.

Scaling          (5)
~~~~~~~~~~~~~~~~~~~~

Regarding the characteristic time scale, it is natural to base this scale on
the wave propagation velocity and not on the time scale of :math:`U_L(t)`, because
the time scale of :math:`U_L` basically determines whether
short or long waves are fed in at the boundary. All waves, long or short,
propagate with the same velocity :math:`c`. We therefore continue
to use :math:`t_c=L/c`.

The solution :math:`u` will have
one wave contribution from the initial condition :math:`I` and one from the
feeding of waves at :math:`x=0`. This gives us three choices of :math:`u_c`:
:math:`\max_x |I| + \max_t |U_L|`, :math:`\max_x |I|`, or :math:`\max_t |U_L|`. The first seems
relevant if the size of :math:`I` and :math:`U_L` are about the same, but then
we can choose either :math:`\max_x |I|` or :math:`\max_t |U_L|` as characteristic size
of :math:`u` since a factor of 2 is not important. If :math:`I` is much less than
:math:`U_L`, :math:`u_c=\max_t |u_L|` is relevant, while :math:`u_c=\max_x|I|` is the choice
when :math:`I` has much bigger impact than :math:`U_L` on :math:`u`.

With :math:`u_c=\max_t |U_L(t)|`, we get the scaled problem

.. _Eq:scale:wave:pde2:d:

.. math::
   :label: scale:wave:pde2:d
        
        \frac{\partial^2 \bar u}{\partial \bar t^2} =
        {\partial^2 \bar u\over\partial \bar x^2},
        \quad  \bar x\in (0,1),\ \bar t\in (0,\bar T],
        
        

.. _Eq:scale:wave:pde2:ic:u:d:

.. math::
   :label: scale:wave:pde2:ic:u:d
          
        \bar u(\bar x,0) = \frac{I(x_c\bar x)}{\max_t |U_L(t)|},
        \quad \bar x\in [0,1],
        
        

.. _Eq:scale:wave:pde2:ic:ut:d:

.. math::
   :label: scale:wave:pde2:ic:ut:d
          
        {\partial\over\partial \bar t}\bar u(\bar x,0) = 0,
        \quad  \bar x\in [0,1],
        
        

.. _Eq:scale:wave:pde2:bc:0:d:

.. math::
   :label: scale:wave:pde2:bc:0:d
          
        \bar u(0,\bar t)  = \frac{U_L(\bar tt_c)}{\max_t |U_L(t)|},
        \quad  \bar t\in (0,\bar T],
        
        

.. _Eq:scale:wave:pde2:bc:L:d:

.. math::
   :label: scale:wave:pde2:bc:L:d
          
        \bar u(1,\bar t)  = 0,
        \quad \bar t\in (0,\bar T].
        
        

Also this problem is free of physical parameters like :math:`c` and :math:`L`.
The input is completely specified by the shape of :math:`I(x)` and :math:`U_L(t)`.

Software          (6)
~~~~~~~~~~~~~~~~~~~~~

Software for the original problem with dimensions can be reused for
:eq:`scale:wave:pde2:d`-:eq:`scale:wave:pde2:bc:L:d` by
setting :math:`L=1`, :math:`c=1`, and scaling :math:`U_L(t)` and :math:`I(x)` by
:math:`\max_t |U_L(t)|`.

Specific case
~~~~~~~~~~~~~

As an example, consider

.. math::
        
        U_L(t) &= a\sin(\omega t)\hbox{ for } 0\leq t\leq 2\frac{\omega}{2\pi},
        \hbox{ else } 0,\\ 
        I(x)   & = Ae^{-(x-L/2)^2/\sigma^2}{\thinspace .}
        

That is, we start with a Gaussian peak-shaped wave in the center of the
domain and feed in a sinusoidal wave at the left end for two periods.
The solution will be the sum of three waves: two parts from the initial
condition, plus the wave fed in from the left.

Since :math:`\max_t |U_L|=a` we get

.. math::
        
        \bar u(\bar x,0) &= \frac{A}{a}e^{-(L/\sigma)^2(\bar x -\frac{1}{2})^2},\\ 
        \bar u(0,\bar t) &= \sin(\bar t\omega L/c){\thinspace .}
        

Here, :math:`U_L` models an incoming wave :math:`a\sin(k(x-ct)`, with :math:`k` specified.
The result is incoming
waves of length :math:`\lambda = 2\pi/k`. Since :math:`\omega =kc`,
:math:`\bar u(0,\bar t)=\sin(kL\bar t) = \sin(2\pi\bar t L/\lambda)`.
(This formula demonstrates the previous assertion that the time scale
of :math:`U_L`, i.e., :math:`1/\omega`, determines the wave length :math:`1/\omega = \lambda/(2\pi)` in space.)
We realize from the formulas for :math:`\bar u(\bar x, 0)` and
:math:`\bar u(0,\bar t)` that there are three key dimensionless parameters related
to these specific choices of initial and boundary conditions:

.. math::
         \alpha = \frac{A}{a},\quad\beta = \frac{L}{\sigma},\quad\gamma = kL
        =2\pi\frac{L}{\lambda}{\thinspace .}

With :math:`\alpha`, :math:`\beta`, and :math:`\gamma` we can write the dimensionless
initial and boundary conditions as

.. math::
        
        \bar u(\bar x,0) &= \alpha e^{-\beta^2(\bar x -\frac{1}{2})^2},\\ 
        \bar u(0,\bar t) &= \sin(\gamma\bar t){\thinspace .}
        

The dimensionless parameters have the following interpretations:

 * :math:`\alpha`: ratio of initial condition amplitude and amplitude of incoming wave
   at :math:`x=0`

 * :math:`\beta`: ratio of length of domain and width of initial condition

 * :math:`\gamma`: ratio of length of domain and wave length of incoming wave

Again, these dimensionless parameters tell a lot about the interplay of
the physical effects in the problem. And only some ratios count!

We can simulate two special cases: :math:`\alpha=10` (large) where the
incoming wave is small and the solution is dominated by the two waves
arising from :math:`I(x)`, and :math:`\alpha=0.1` (small) where the incoming waves
dominate and the has the initial condition as a small perturbation of
the wave shape. We may choose a peak-shaped initial condition: :math:`\beta = 10`,
and also a relatively short incoming wave compared to the domain size:
:math:`\gamma = 6\pi` (i.e., wave length of incoming wave is :math:`L/6`).
A function ``simulate_Gaussian_and_incoming_wave`` in
the file `session.py <http://tinyurl.com/o8pb3yy/session.py>`__
applies the general unscaled
solver in `wave1D_dn.py <http://tinyurl.com/o8pb3yy/wave1D_dn.py>`__
for solving the wave equation with constant :math:`c`
and any time-dependent function or :math:`\partial u/\partial x=0` at the
end points. This solver is trivially adapted to the present case.

.. @@@CODE src-scaling/session.py fromto: def simulate_Gaussian_and@import odespy

.. raw:: html
        
        <div>
        <video  loop controls width='640' height='365' preload='none'>
            <source src='mov-scaling/gaussian_plus_incoming/alpha10.mp4'  type='video/mp4;  codecs="avc1.42E01E, mp4a.40.2"'>
            <source src='mov-scaling/gaussian_plus_incoming/alpha10.webm' type='video/webm; codecs="vp8, vorbis"'>
            <source src='mov-scaling/gaussian_plus_incoming/alpha10.ogg'  type='video/ogg;  codecs="theora, vorbis"'>
        </video>
        </div>
        <p><em>:math:`\alpha=10`</em></p>

.. raw:: html
        
        <div>
        <video  loop controls width='640' height='365' preload='none'>
            <source src='mov-scaling/gaussian_plus_incoming/alpha01.mp4'  type='video/mp4;  codecs="avc1.42E01E, mp4a.40.2"'>
            <source src='mov-scaling/gaussian_plus_incoming/alpha01.webm' type='video/webm; codecs="vp8, vorbis"'>
            <source src='mov-scaling/gaussian_plus_incoming/alpha01.ogg'  type='video/ogg;  codecs="theora, vorbis"'>
        </video>
        </div>
        <p><em>:math:`\alpha=0.1`</em></p>

[**hpl 8**: The HTML version features movies here. Link to them in the LaTeX PDF version as well?]

.. _scale:wave:pde2:Vcond:

Velocity initial condition
--------------------------

Now we change the initial condition from :math:`u=I` and :math:`\partial u/\partial t = 0` to

.. _Eq:_auto29:

.. math::
   :label: _auto29
        
        u(x,0) = 0,
        
        

.. _Eq:_auto30:

.. math::
   :label: _auto30
          
        \frac{\partial}{\partial t} u(x,0) = V(x){\thinspace .}
        
        

Impact problems are often of this kind.
The scaled version of :math:`u_t(x,0)=V(x)` becomes

.. math::
         \frac{\partial}{\partial \bar t} \bar u(\bar x,0) =
        \frac{t_c}{u_c}V(\bar x x_c){\thinspace .}
        

Analytical insight
~~~~~~~~~~~~~~~~~~

From :eq:`scale:wave:pde:sol:general` we now get :math:`f_L + f_R =0` and
:math:`cf_L' - cf_R' = V`. Introducing :math:`W(x)` such that :math:`W'(x)=V(x)`, a solution
is :math:`-f_L=\frac{1}{2}W` and :math:`f_R=\frac{1}{2}W`. Hence,

.. math::
         u(x,t) = \frac{1}{2c}\int_{x-ct}^{x+ct} v(\xi) d\xi{\thinspace .}

Scaling          (6)
~~~~~~~~~~~~~~~~~~~~

Since :math:`V` is the time-derivative of :math:`u`, the characteristic size of
:math:`V` is typically :math:`u_c/t_c`, meaning that

.. math::
         \max_{x\in(0,L)}|V(x)| = \frac{u_c}{t_c},

which gives $ u_c = \max_{x\in(0,L)}|V(x)| L/c$. As usual, we base :math:`t_c`
on the wave speed: :math:`t_c = L/c`. We end up with

.. math::
         \frac{\partial}{\partial \bar t} \bar u(\bar x,0) =
        \frac{V(\bar x x_c)}{\max_x |V(x)|},
        

which by itself looks like a natural scaling of a function :math:`V`.

Nonzero initial shape
~~~~~~~~~~~~~~~~~~~~~

Suppose we change the initial condition :math:`u(x,0)=0` to :math:`u(x,0)=I(x)`.
The scaled version of this condition with the above :math:`u_c`
based on :math:`V` becomes

.. _Eq:scale:wave:pde2:Vcond:eq:

.. math::
   :label: scale:wave:pde2:Vcond:eq
        
        \bar u(\bar x, 0) = \frac{cI(\bar x x_c)}{L\max_x |V(x)|}{\thinspace .}
        
        


.. admonition:: Check that dimensionless numbers are dimensionless

   Is a dimensionless number really dimensionless?
   It is easy to make errors when scaling equations, so checking that
   such fractions are dimensionless is wise.
   The dimension of :math:`I` is the same as :math:`u`, here taken to be displacement:
   [L].
   Since :math:`V` is :math:`\partial u/\partial t`, its dimension is
   :math:`[\hbox{LT}^{-1}]`. The dimensions of :math:`c` and :math:`L` are
   :math:`[\hbox{LT}^{-1}]` and :math:`[\hbox{L}]`. The dimension of the right-hand side
   of :eq:`scale:wave:pde2:Vcond:eq` is then
   
   .. math::
            \frac{[\hbox{LT}^{-1}][L]}{[L][L\hbox{T}^{-1}]}
           = 1,
   
   demonstrating that the fraction is indeed dimensionless.




One may introduce a dimensionless initial
shape, :math:`\bar I (\bar x)= I(\bar xL)/\max_x |I|`. Then

.. math::
         \bar u(\bar x, 0) = \alpha\bar I(\bar x),

where :math:`\alpha` the dimensionless number

.. math::
         \alpha = \frac{c}{L}\frac{\max_x |I(x)|}{\max_x |V(x)|}{\thinspace .}

.. index:: dimensionless number

If :math:`V` is much larger than :math:`I`, one expects that the influence of :math:`I`
is small. However, it takes time for the initial velocity :math:`V` to
influence the wave motion, so if :math:`c` is much bigger than :math:`L`, the
initial wave shape :math:`I`
travels quickly through the domain before the effect of :math:`V` becomes
visible. The impact of :math:`I` may therefore be significant for small :math:`t`.
This is reflected in an
:math:`\alpha` value that is not small since :math:`c/L` is large and :math:`\max |I|/\max |V|`
is small, resulting in a scaled initial condition :math:`\bar u(\bar x,0)`
that is not small.
With :math:`c/L` about unity, :math:`\alpha` becomes small, and :math:`\bar u(\bar x,0)
\approx 0` such that not much happens before the effect of :math:`V` becomes
visible. Recall that the dimensionless initial velocity is about unity
regardless of other parameters.
Again, the scaling and the resulting dimensionless parameter(s)
teach us much about the interaction of the various physical effects.

[**hpl 9**: Do experiments. Make exercise or insert here.]

[**hpl 10**: Could make paradox: small :math:`I`, big :math:`V`, but still significant impact of :math:`I` in a simulation. Why? Bug? The answer is above. Best as exercise.]

.. _scale:wave:pde2:cvar:

Variable wave velocity and forcing
----------------------------------

The next problem generalization regards wave propagation in
a non-homogeneous medium where the wave velocity :math:`c` depends on the
spatial position: :math:`c=c(x)`. To simplify the notation we introduce
:math:`\lambda (x) = c^2(x)`. We introduce homogeneous Neumann conditions
at :math:`x=0` and :math:`x=L`. In addition, we add a force term :math:`f(x,t)`
to the PDE, modeling wave generation in the interior of
the domain. For example, a moving slide at the bottom of a fjord
will generate surface waves and is modeled by such an :math:`f(x,t)` term
(provided the length of the waves is much larger than the depth so
that a simple wave equation like :eq:`scale:wave:pde3` applies).
The initial-boundary value problem
can be then expressed as

.. _Eq:scale:wave:pde3:

.. math::
   :label: scale:wave:pde3
        
        \frac{\partial^2 u}{\partial t^2} =
        \frac{\partial}{\partial x}\left(
        \lambda(x) {\partial u\over\partial x}\right) + f(x,t),
        \quad  x\in (0,L),\ t\in (0,T],
        
        

.. _Eq:scale:wave:pde3:ic:u:

.. math::
   :label: scale:wave:pde3:ic:u
          
        u(x,0) = I(x),
        \quad x\in [0,L],
        
        

.. _Eq:scale:wave:pde3:ic:ut:

.. math::
   :label: scale:wave:pde3:ic:ut
          
        {\partial\over\partial t}u(x,0) = 0,
        \quad  x\in [0,L],
        
        

.. _Eq:scale:wave:pde3:bc:0:

.. math::
   :label: scale:wave:pde3:bc:0
          
        \frac{\partial}{\partial x}u(0,t)  = 0,
        \quad  t\in (0,T],
        
        

.. _Eq:scale:wave:pde3:bc:L:

.. math::
   :label: scale:wave:pde3:bc:L
          
        \frac{\partial}{\partial x}u(L,t)  = 0,
        \quad  t\in (0,T].
        
        

Non-dimensionalization
~~~~~~~~~~~~~~~~~~~~~~

We make the coefficient :math:`\lambda` non-dimensional by

.. _Eq:_auto31:

.. math::
   :label: _auto31
        
        \bar\lambda(\bar x) = \frac{\lambda(\bar xx_c)}{\lambda_c},
        
        

where one normally chooses the characteristic size of :math:`\lambda`, :math:`\lambda_c`,
to be the maximum value such that :math:`|\lambda|\leq 1`:

.. math::
         \lambda_c = \max_{x\in(0,L)}\lambda(x){\thinspace .}

Similarly, :math:`f` has a scaled version

.. math::
         \bar f(\bar x,\bar t) = \frac{f(\bar x x_c, \bar t t_c)}{f_c},

where normally we choose

.. math::
         f_c=\max_{x,t}|f(x,t)|{\thinspace .}

Inserting dependent and independent variables expressed by their
non-dimensional counterparts yields

.. _Eq:scale:wave:pde3:d:

.. math::
   :label: scale:wave:pde3:d
        
        \frac{\partial^2 \bar u}{\partial \bar t^2} =
        \frac{t_c^2\lambda_c}{L^2}\frac{\partial}{\partial \bar x}\left(
        \bar\lambda(\bar x) {\partial\bar u\over\partial\bar x}\right)
        + \frac{t_c^2f_c}{u_c}\bar f(\bar x,\bar t),
        \quad  \bar x\in (0,1),\ \bar t\in (0,\bar T],
        
        

.. _Eq:scale:wave:pde3:ic:u:d:

.. math::
   :label: scale:wave:pde3:ic:u:d
          
        \bar u(\bar x,0) = \frac{I(x)}{u_c},
        \quad \bar x\in [0,1],
        
        

.. _Eq:scale:wave:pde3:ic:ut:d:

.. math::
   :label: scale:wave:pde3:ic:ut:d
          
        {\partial\over\partial \bar t}\bar u(\bar x,0) = 0,
        \quad  \bar x\in [0,1],
        
        

.. _Eq:scale:wave:pde3:bc:0:d:

.. math::
   :label: scale:wave:pde3:bc:0:d
          
        \frac{\partial}{\partial \bar \bar x}\bar u(0,\bar t)  = 0,
        \quad  \bar t\in (0,\bar T],
        
        

.. _Eq:scale:wave:pde3:bc:L:d:

.. math::
   :label: scale:wave:pde3:bc:L:d
          
        \frac{\partial}{\partial \bar x}\bar u(1,\bar t)  = 0,
        \quad  \bar t\in (0,\bar T],
        
        

with :math:`\bar T = Tc/L`.

Choosing the time scale
~~~~~~~~~~~~~~~~~~~~~~~

The time scale is, as before, chosen as :math:`t_c
=L/\sqrt{\lambda_c}`. Note that the previous (constant) wave velocity
:math:`c` now corresponds to :math:`\sqrt{\lambda (x)}`.  Therefore,
:math:`\sqrt{\lambda_c}` is a characteristic wave velocity.

One could wonder if the time scale of the force term, :math:`f(x,t)`,
should influence :math:`t_c`, but as we reasoned for the boundary condition
:math:`u(0,t)=U_L(t)`, we let the characteristic time be governed by the
signal speed in the medium, i.e., by :math:`\sqrt{\lambda_c}` here and not
by the time scale of the excitation :math:`f` which dictates the
length of the generated waves and not their propagation speed.

Choosing the spatial scale
~~~~~~~~~~~~~~~~~~~~~~~~~~

We may choose :math:`u_c` as :math:`\max_x |I(x)|`, as before,
or we may fit :math:`u_c` such that the coefficient in the source term
is unity, i.e., all terms balance each other.
This latter idea leads to

.. math::
         u_c = \frac{L^2 f_c}{\lambda_c} 

and a PDE without parameters,

.. math::
        
        \frac{\partial^2 \bar u}{\partial \bar t^2} =
        \frac{\partial}{\partial \bar x}\left(
        \bar\lambda(\bar x) {\partial\bar u\over\partial\bar x}\right)
        + \bar f(\bar x,\bar t){\thinspace .}
        

The initial condition :math:`u(x,0)=I(x)` becomes in dimensionless form

.. math::
         \bar u(\bar x, 0) = u_c^{-1} \max_x |I(x)|\bar I(\bar x) =
        \beta^{-1}\bar I(\bar x),

where

.. math::
         \beta = \frac{L^2}{\lambda_c}\frac{\max_{x,t} |f(x,t)|}{\max_x|I(x)|}{\thinspace .}

In the case :math:`u_c=\max_x|I(x)|`, :math:`\bar u(\bar x,0)=\bar I(\bar x)` and
the :math:`\beta` parameter appears in the PDE instead:

.. math::
        
        \frac{\partial^2 \bar u}{\partial \bar t^2} =
        \frac{\partial}{\partial \bar x}\left(
        \bar\lambda(\bar x) {\partial\bar u\over\partial\bar x}\right)
        + \beta \bar f(\bar x,\bar t){\thinspace .}
        

With :math:`V=0`, and :math:`u=0` or :math:`u_x=0` on the boundaries :math:`x=0,L`, this scaling gives
:math:`|\bar u|\leq 1`, since initially :math:`|I|\leq 1`, and no boundary condition
can increase the amplitude.

Scaling the velocity initial condition
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The initial condition :math:`u_t(x,0)=V(x)` has its dimensionless variant as

.. math::
         \bar V(\bar x) = \frac{t_c}{u_c}\frac{V(L\bar x)}{\max_x|V(x)|},

which becomes

.. math::
         \frac{\partial\bar u}{\partial\bar t}(\bar x, 0) =
        \frac{L}{\sqrt{\lambda_c}}\frac{\max_{x}|V(x)|}{\max_{x}|I(x)|}\bar V(\bar x),
        \hbox{ if } u_c=\max_x|I(x)|,

or

.. math::
         \frac{\partial\bar u}{\partial\bar t}(\bar x, 0) =
        \frac{\sqrt{\lambda_c}}{L}\frac{\max_{x}|V(x)|}{\max_{x,t}|f(x,t)|}
        \bar V(\bar x),
        \hbox{ if } u_c=t_c^2f_c=\frac{L^2}{\lambda_c}\max_{x,t}|f(x,t)|{\thinspace .}

Introducing the dimensionless number :math:`\alpha` (cf. The section :ref:`scale:wave:pde2:Vcond`),

.. math::
         \alpha^{-1} = \frac{\sqrt{\lambda_c}}{L}\frac{\max_{x}|V(x)|}{\max_{x,t}|f(x,t)|},
        

we can write

.. math::
        
        \frac{\partial\bar u}{\partial\bar t}(\bar x, 0) =
        \left\lbrace \begin{array}{ll}
        \alpha^{-1}\bar V(\bar x),& u_c=\max_x|I|,\\ 
        \alpha^{-1}\beta^{-1}\bar V(\bar x), & u_c=t_c^2f_c
        \end{array}\right.
        

.. _scale:wave:pde2:damped:

Damped wave equation
--------------------

A linear damping term :math:`b\,\partial u/\partial t` is often added to
the wave equation to model energy dissipation and amplitude reduction.
Our PDE now reads

.. _Eq:_auto32:

.. math::
   :label: _auto32
        
        \frac{\partial^2 u}{\partial t^2}
        + b\frac{\partial u}{\partial t} =
        \frac{\partial}{\partial x}\left(
        \lambda(x) {\partial u\over\partial x}\right) + f(x,t){\thinspace .}
        
        

The scaled equation becomes

.. math::
        
        \frac{\partial^2 \bar u}{\partial \bar t^2}
        + \frac{t_c} b\frac{\partial \bar u}{\partial \bar t} =
        \frac{t_c^2\lambda_c}{L^2}\frac{\partial}{\partial \bar x}\left(
        \bar \lambda(\bar x) {\partial \bar u\over\partial \bar x}\right) +
        \frac{t_c^2f_c}{u_c}\bar f(\bar x,\bar t){\thinspace .}
        

The damping term is usually much smaller than the two other terms involving
:math:`\bar u`. The time scale is therefore chosen as in the undamped case,
:math:`t_c=L/\sqrt{\lambda_c}`. As in the section :ref:`scale:wave:pde2:cvar`,
we have two choices of :math:`u_c`: :math:`u_c=\max_x|I|` or :math:`u_c=t_c^2f_c`.
The former choice of :math:`u_c` gives a PDE with two dimensionless numbers,

.. _Eq:_auto33:

.. math::
   :label: _auto33
        
        \frac{\partial^2 \bar u}{\partial \bar t^2}
        + \gamma\frac{\partial \bar u}{\partial \bar t} =
        \frac{\partial}{\partial \bar x}\left(
        \bar \lambda(\bar x) {\partial\bar u\over\partial\bar x}\right) +
        \beta\bar f(\bar x,\bar t),
        
        

where

.. math::
         \gamma = \frac{bL}{\sqrt{\lambda_c}}, 

measures the size of the damping, and :math:`\beta` is as given
in the section :ref:`scale:wave:pde2:cvar`.
With :math:`u_c=t_c^2f_c` we get a PDE where only :math:`\gamma` enters,

.. _Eq:_auto34:

.. math::
   :label: _auto34
        
        \frac{\partial^2 \bar u}{\partial \bar t^2}
        + \gamma\frac{\partial \bar u}{\partial \bar t} =
        \frac{\partial}{\partial \bar x}\left(
        \bar \lambda(\bar x) {\partial\bar u\over\partial\bar x}\right) +
        \bar f(\bar x,\bar t){\thinspace .}
        
        

The scaled initial conditions are as in
the section :ref:`scale:wave:pde2:cvar`, so in this latter case
:math:`\beta` appears in the initial condition for :math:`u`.

To summarize, the effects of :math:`V`, :math:`f`, and damping are reflected in
the dimensionless numbers :math:`\alpha`, :math:`\beta`, and :math:`\gamma`,
respectively.

A three-dimensional wave equation problem
-----------------------------------------

To demonstrate how the scaling extends to and looks like in
three-dimensions, we consider

.. _Eq:_auto35:

.. math::
   :label: _auto35
        
        \frac{\partial^2 \bar u}{\partial \bar t^2} =
        \frac{\partial}{\partial x}\left(\lambda\frac{\partial u}{\partial x}\right)+
        \frac{\partial}{\partial y}\left(\lambda\frac{\partial u}{\partial y}\right)+
        \frac{\partial}{\partial z}\left(\lambda\frac{\partial u}{\partial z}\right){\thinspace .}
        
        

We introduce

.. math::
         \bar x = \frac{x}{x_c},\quad \bar y = \frac{y}{y_c},
           \quad \bar z = \frac{z}{z_c},
           \quad \bar t = \frac{t}{t_c}, \quad \bar u =\frac{u}{u_c}{\thinspace .}

With :math:`\bar\lambda = \lambda(\bar xx_c, \bar y y_c, \bar z z_c)/\lambda_c`,
we get

.. math::
        
        \frac{\partial^2 \bar u}{\partial \bar t^2} =
        \frac{t_c^2\lambda_c}{x_c^2}\frac{\partial}{\partial \bar x}\left(\bar\lambda\frac{\partial \bar u}{\partial \bar x}\right)+
        \frac{t_c^2\lambda_c}{y_c^2}\frac{\partial}{\partial \bar y}\left(\bar\lambda\frac{\partial \bar u}{\partial \bar y}\right)+
        \frac{t_c^2\lambda_c}{z_c^2}\frac{\partial}{\partial \bar z}\left(\bar\lambda\frac{\partial \bar u}{\partial \bar z}\right){\thinspace .}
        

Often, we will set :math:`x_c=y_c=z_c=L` where :math:`L` is some characteristic
size of the domain.
As before, :math:`t_c = L/\sqrt{\lambda_c}`, and these choices lead to a
dimensionless wave equation without physical parameters:

.. _Eq:_auto36:

.. math::
   :label: _auto36
        
        \frac{\partial^2 \bar u}{\partial \bar t^2} =
        \frac{\partial}{\partial \bar x}\left(\bar\lambda\frac{\partial \bar u}{\partial \bar x}\right)+
        \frac{\partial}{\partial \bar y}\left(\bar\lambda\frac{\partial \bar u}{\partial \bar y}\right)+
        \frac{\partial}{\partial \bar z}\left(\bar\lambda\frac{\partial \bar u}{\partial \bar z}\right){\thinspace .}
        
        

The initial conditions remain the same as in the previous one-dimensional
examples.

