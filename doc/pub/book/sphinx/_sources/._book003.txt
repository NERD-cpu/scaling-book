.. !split

.. _scale:dimunit:

Dimensions and units
%%%%%%%%%%%%%%%%%%%%

.. index:: units

A mechanical system undergoing one-dimensional damped vibrations can be
modeled by the equation

.. _Eq:scale:dimunit:eq:u:

.. math::

    \tag{1}
    mu'' + bu' + ku = 0,
        
        

where :math:`m` is the mass of the system, :math:`b` is some damping coefficient,
:math:`k` is a spring constant, and :math:`u(t)` is the displacement of the system.
This is an equation expressing
the balance of three physical effects: :math:`mu''` (mass times
acceleration), :math:`bu'` (damping force), and :math:`ku` (spring force).
The different physical quantities, such as :math:`m`, :math:`u(t)`, :math:`b`, and :math:`k`,
have all different *dimensions*, measured in different *units*,
but :math:`mu''`, :math:`bu'`, and :math:`ku` must all have the same dimension, otherwise
it would not make sense to add them (you will get the same problem
as when trying to add one banana, one apple, and one orange).

Fundamental concepts
====================

Base units and dimensions
-------------------------

.. index:: base unit

.. index:: length

.. index:: mass

.. index:: time

There are seven fundamental *base units*: length, mass, time, electric
current, thermodynamic temperature, amount of substance, and luminous
intensity.  The base units for length, mass, and time, which we are
mostly occupied with in this book, are the SI units
meter (m), kilogram (kg), and seconds (s), respectively.

[**hpl 4**: Geir, current measured in ampere is a base unit (charge is a derived unit). See `<http://physics.nist.gov/cuu/Units/units.html>`_ or `wikipedia <https://en.wikipedia.org/wiki/SI_base_unit>`__.]

The dimension of length is written as [L], the dimension of mass is
[M], the dimension of time is [T], and the dimension of temperature is
:math:`[\Theta]` (the dimensions of the other base units are omitted in
this introduction). The dimension of a *derived unit* like velocity, which is
distance (length) divided by time, then becomes :math:`[\hbox{LT}^{-1}]`.
The dimension of force, another derived unit, is the same as the
dimension of mass times acceleration, and hence the dimension of force is
:math:`[\hbox{MLT}^{-2}]`.

Let us find the dimensions of the terms in :ref:`(1) <Eq:scale:dimunit:eq:u>`.
A displacement :math:`u(t)` has dimension [L]. The derivative :math:`u'(t)` is
change of displacement, which has dimension [L], divided by a time
interval, which has dimension [T], implying that the dimension of :math:`u'`
is :math:`\hbox{LT}^{-1}`. This results coincides with the interpretation of
:math:`u'` as velocity and the fact that velocity is defined as distance
([L]) per time ([T]).

Looking at :ref:`(1) <Eq:scale:dimunit:eq:u>`, and interpreting :math:`u(t)`
as displacement, we realize that the term :math:`mu''`
(mass times acceleration) has dimension :math:`[\hbox{MLT}^{-2}]`.  The term
:math:`bu'` must have the same dimension, and since :math:`u'` has dimension
:math:`[\hbox{LT}^{-1}]`, :math:`b` must have dimension :math:`[\hbox{MT}^{-1}]`.
Finally, :math:`ku` must also have dimension :math:`[\hbox{MLT}^{-1}]`, implying that :math:`k`
is a parameter with dimension :math:`[\hbox{MT}^{-2}]`.

The unit of a physical quantity follows from the dimension expression.
For example, since velocity has dimension :math:`\hbox{LT}^{-1}` and length
is measured in m while time is measured in s, the unit for velocity
becomes m/s. Similarly, force has dimension :math:`[\hbox{MLT}^{-2}]` and
unit :math:`\hbox{kg\, m/s}^2`. The :math:`k` parameter in :ref:`(1) <Eq:scale:dimunit:eq:u>`
is measured in :math:`\hbox{kg\,s}^{-2}`.


.. admonition:: Dimension of derivatives

   The easiest way to realize the dimension of a derivative, is to express
   the derivative as a finite difference. For a function :math:`u(t)` we have
   
   .. math::
            \frac{du}{dt} \approx \frac{u(t+\Delta t)- u(t)}{\Delta t},
   
   where :math:`\Delta t` is a small time interval.
   If :math:`u` denotes a velocity, its dimension is :math:`\hbox{[LT]}^{-1}`,
   and :math:`u(t+\Delta t) - u(t)` gets the same dimension. The time
   interval has dimension :math:`\hbox{[T]}`, and consequently, the
   finite difference gets the dimension :math:`\hbox{[LT]}^{-2}`.
   In general, the dimension of the derivative :math:`du/dt` is the dimension
   of :math:`u` divided by the dimension of :math:`t`.




.. _scale:dimunit:tables:

Dimensions of common physical quantities
----------------------------------------

.. index:: dimension of physical quantities

Many derived quantities are measured in derived units. Force is one
example: Newton (N) is a derived unit for force, equal to :math:`\hbox{kg\,
m/s}^2`. Another derived unit is Pascal (Pa) for pressure and stress,
i.e., force per area. The unit of Pa then equals :math:`\hbox{N/m}^2` or
:math:`\hbox{kg/ms}^2`. Below are more derived quantities and their units.

======  ======  ==================  =========================  
 Name   Symbol  Physical quantity              unit            
======  ======  ==================  =========================  
radian  rad     angle               1                          
hertz   Hz      frequency           :math:`\hbox{s}^{-1}`      
newton  N       force, weight       :math:`\hbox{kg\, m/s}^2`  
pascal  Pa      pressure, stress    :math:`\hbox{N/m}^2`       
joule   J       energy, work, heat  Nm                         
watt    W       power               J/s                        
======  ======  ==================  =========================  

Some common physical quantities and their dimensions are listed next.

[**hpl 5**: TODO: Check the tables.]

================================================  ====================================================  ====================================  =============================================  
                    Quantity                                            relation                                        unit                                    dimension                    
================================================  ====================================================  ====================================  =============================================  
stress                                            force/area                                            :math:`\hbox{N/m}^2 = \hbox{Pa}`      :math:`[\hbox{M}\hbox{T}^{-2}\hbox{L}^{-1}]`   
pressure                                          force/area                                            :math:`\hbox{N/m}^2 = \hbox{Pa}`      :math:`\hbox{M}\hbox{T}^{-2}\hbox{L}^{-1}]`    
density                                           mass/volume                                           :math:`\hbox{kg/m}^3`                 :math:`[\hbox{ML}^{-3}]`                       
strain                                            displacement/length                                   1                                     :math:`[1]`                                    
Young's modulus                                   stress/strain                                         :math:`\hbox{N/m}^2 = \hbox{Pa}`      :math:`\hbox{M}\hbox{T}^{-2}\hbox{L}^{-1}]`    
Poisson's ratio                                   transverse strain/axial strain                        1                                     :math:`[1]`                                    
Lame' parameters :math:`\lambda` and :math:`\mu`  stress/strain                                         :math:`\hbox{N/m}^2 = \hbox{Pa}`      :math:`\hbox{M}\hbox{T}^{-2}\hbox{L}^{-1}]`    
moment (of a force)                               distance :math:`\times` force                         Nm                                    :math:`[\hbox{ML}^2\hbox{T}^{-2}]`             
impulse                                           force :math:`\times` time                             :math:`\hbox{Ns}`                     :math:`[\hbox{MLT}^{-1}]`                      
linear momentum                                   mass :math:`\times` velocity                          :math:`\hbox{kg m/s}`                 :math:`[\hbox{ML}\hbox{T}^{-1}]`               
angular momentum                                  distance :math:`\times` mass :math:`\times` velocity  :math:`\hbox{kg m}^2/\hbox{s}`        :math:`[\hbox{ML}^2\hbox{T}^{-1}]`             
work                                              force :math:`\times` distance                         :math:`\hbox{Nm} = \hbox{J}`          :math:`[\hbox{ML}^2\hbox{T}^{-2}]`             
energy                                            work                                                  :math:`\hbox{Nm} = \hbox{J}`          :math:`[\hbox{ML}^2\hbox{T}^{-2}]`             
power                                             work/time                                             :math:`\hbox{Nm/s} = \hbox{W}`        :math:`[\hbox{ML}^2\hbox{T}^{-3}]`             
heat                                              work                                                  J                                     :math:`[\hbox{ML}^2\hbox{T}^{-2}]`             
heat flux                                         heat rate/area                                        :math:`\hbox{Wm}^{-2}`                :math:`[\hbox{MT}^{-3}]`                       
temperature                                       base unit                                             K                                     :math:`[\Theta]`                               
heat capacity                                     heat change/temperature change                        J/K                                   :math:`[\hbox{ML}^2\hbox{T}^{-2}\Theta^{-1}]`  
specific heat capacity                            heat capacity/unit mass                               :math:`\hbox{JK}^{-1}\hbox{kg}^{-1}`  :math:`[\hbox{L}^2\hbox{T}^{-2}\Theta^{-1}]`   
thermal conductivity                              heat flux/temperature gradient                        :math:`\hbox{Wm}^{-1}\hbox{K}^{-1}`   :math:`[\hbox{MLT}^{-3}\Theta^{-1}]`           
dynamic viscosity                                 shear stress/velocity gradient                        :math:`\hbox{kgm}^{-1}\hbox{s}^{-1}`  :math:`[\hbox{ML}^{-1}T^{-1}]`                 
kinematic viscosity                               dynamic viscosity/density                             :math:`[\hbox{m}^2/\hbox{s}`          :math:`\hbox{L}^2\hbox{T}^{-1}]`               
surface tension                                   energy/area                                           :math:`[\hbox{J/m}^2`                 :math:`\hbox{MT}^{-2}]`                        
================================================  ====================================================  ====================================  =============================================  

Prefixes for units
~~~~~~~~~~~~~~~~~~

Units often have `prefixes <https://en.wikipedia.org/wiki/Metric_prefix>`__.
For example, kilo is a prefix for 1000,
so kg is 1000 g. Similarly, GPa means giga pascal or :math:`10^9` Pa.

Absolute errors, relative errors, and units
-------------------------------------------

Mathematically, it does not matter what units we use for a physical
quantity. However, when we deal with approximations and errors,
units are important. Suppose we work with a geophysical problem where
the length scale is typically measured in km and we have an approximation
12.5 km to the exact value 12.52 km. The error is then 0.02 km.
Switching units to mm leads to an error of 20,000 mm. A program working
in mm would report :math:`2\cdot 10^5` as the error, while a program working
in km would print 0.02. The absolute error is therefore sensitive to
the choice of units. This fact motivates for the use of the *relative
error*: (exact - approximate)/exact since then the unit cancels.
In the present example, one gets a relative error of :math:`1.6\cdot 10^{-3}`
regardless of the whether the length is measured in km or mm.

Nevertheless, rather than relying solely on relative errors, it is in general
better to scale the problem such that the quantities entering the
computations are of unit size (or at least moderate) instead of being very
large or very small. The techniques of this appendix show how this
can be done.

Units and computers
-------------------

Traditional numerical computing involves numbers only and therefore
require dimensionless mathematical expressions. Usually, an implicit
trivial scaling is used. One can, for example, just scale all length
quantities by 1 m, all time quantities by 1 s, and all mass quantities
by 1 kg, to obtain the dimensionless numbers needed for calculations.
This is the most common approach, although it is very seldom explicitly
stated.

Symbolic computing packages, such as Mathematica and Maple, allow
computations with quantities that have dimension. This is also possible
in popular computer languages used for numerical computing (the section :ref:`scale:PQ` provides a specific example in Python).

Unit systems
------------

.. index::
   single: units; US

.. index::
   single: units; British

Confusion arises quickly when some physical quantities are expressed
in SI units while others are in US or British units.  Density could,
for instance, be given in unit of ounce per teaspoon (see :ref:`sec:scale:exer:US2SI1` for how to safely convert to a standard
unit like :math:`\hbox{kg\,m}^{-3}`).  Although unit conversion tables
are frequently met in school, errors in unit conversions
between units probably rank highest among all errors committed by
scientists and engineers (and when a unit conversion error make an
`airplane's fuel run out <http://www.nytimes.com/1983/07/30/us/jet-s-fuel-ran-out-after-metric-conversion-errors.html>`__,
it is serious!).  Having good software tools to assist in unit
conversion is therefore paramount, and this topic is treated next.
Readers who are primarily interested in the mathematical scaling
technique may safely jump over the sections :ref:`scale:PQ` and
:ref:`scale:parampool` and continue with the section :ref:`sec:scale:decay`.

[**hpl 6**: Geir, here goes an example on difficulties with data in and out of various components in a tsunami model.]

.. _scale:PQ:

PhysicalQuantity: object for computing with units
-------------------------------------------------

.. index:: PhysicalQuantity

.. index::
   single: units; conversion

.. index::
   single: units; software

This book contains quite some computer code to illustrate how the theory
maps in detail to running software. Python is the programming language
used, primarily because it is an easy-to-read, powerful,
full-fledged language that can be made very close to popular MATLAB-like code
as well as class-based code typically used in Java, C#, and C++.
The Python ecosystem for scientific computing has in recent years grown
fast in popularity and acts as a replacement for more specialized tools
like MATLAB, R, and IDL.
The coding examples in this book requires only familiarity with basic
procedural programming in Python.

Readers without knowledge of Python variables, functions, if tests,
and module import should consult, e.g., a `brief tutorial on scientific
Python <http://hplgit.github.io/bumpy/doc/web/index.html>`__,
the `Python Scientific Lecture Notes <http://scipy-lectures.github.com/>`__,
or a full textbook [Ref01]_ in parallel with reading about
Python code in the present book.

[**hpl 7**: Geir, is this sufficient intro about Python? Should we be more specific about the expected competence?]

Computations with units in Python are well supported by the
``PhysicalQuantity`` object from the `ScientificPython package <https://bitbucket.org/khinsen/scientificpython>`__ by Konrad
Hinsen. Unfortunately, ScientificPython does not, at the time of this
writing, work with NumPy version 1.9 or later, so we have isolated the
``PhysicalQuantity`` object in a module `PhysicalQuantities <https://github.com/hplgit/physical-quantities>`__ and made it publicly
available on GitHub. There is also an alternative package `Unum <https://bitbucket.org/kiv/unum/>`__ for computing with numbers with
units, but we shall stick to the former module here.

Let us demonstrate the usage of the ``PhysicalQuantity`` object by
computing :math:`s=vt`, where :math:`v` is a velocity given in the unit *yards per
minute* and :math:`t` is time measured in hours.  First we need to know what
the units are called in ``PhysicalQuantities``.  To this end, run ``pydoc
PhysicalQuantities``, or

.. code-block:: text

        Terminal> pydoc Scientific.Physics.PhysicalQuantities

if you have entire ScientificPython package installed. The
resulting documentation shows the names of
the units. In particular,
yards are specified by ``yd``, minutes by ``min``, and hours
by ``h``. We can now compute :math:`s=vt` as follows:

.. code-block:: python

        >>> # With ScientificPython:
        >>> from Scientific.Physics.PhysicalQuantities import \ 
        ... PhysicalQuantity as PQ
        >>> # With PhysicalQuantities as separate/stand-alone module:
        >>> from PhysicalQuantities import PhysicalQuantity as PQ
        >>>
        >>> v = PQ('120 yd/min')   # velocity
        >>> t = PQ('1 h')          # time
        >>> s = v*t                # distance
        >>> print s                # s is string
        120.0 h*yd/min

The odd unit ``h*yd/min`` is better converted to a standard SI unit such
as meter:

.. code-block:: python

        >>> s.convertToUnit('m')
        >>> print s
        6583.68 m

Note that ``s`` is a ``PhysicalQuantity`` object with a value and a
unit. For mathematical computations we need to extract the
value as a ``float`` object. We can also extract the unit as a string:

.. code-block:: python

        >>> print s.getValue()     # float
        6583.68
        >>> print s.getUnitName()  # string
        m

Here is an example on how to convert the odd velocity unit yards per
minute to something more standard:

.. code-block:: python

        >>> v.convertToUnit('km/h')
        >>> print v
        6.58368 km/h
        >>> v.convertToUnit('m/s')
        >>> print v
        1.8288 m/s

.. Sometimes you find physical quantities in the literature or on the web

.. with units that you do not want to use. The ``convertToUnit`` method is

.. then handy.

As another example on unit conversion,
say you look up the specific heat capacity of water to
be 1 :math:`\hbox{cal}\, \hbox{g}^{-1}\hbox{K}^{-1}`. What is the
corresponding value in the standard unit :math:`\hbox{Jg}^{-1}\hbox{K}^{-1}`
where joule replaces calorie?

.. code-block:: python

        >>> c = PQ('1 cal/(g*K)')
        >>> c.convertToUnit('J/(g*K)')
        >>> print c
        4.184 J/K/g

.. _scale:parampool:

Parampool: user interfaces with automatic unit conversion
=========================================================

.. index:: parampool

The `Parampool <https://github.com/hplgit/parampool>`__ package allows
creation of user interfaces with support for units and unit
conversion. Values of parameters can be set as a number with a
unit. The parameters can be registered beforehand with a preferred
unit, and whatever the user prescribes, the value and unit are
converted so the unit becomes the registered unit. Parampool supports
various type of user interfaces: command-line arguments (option-value
pairs), text files, and interactive web pages. All of these
are described next.

Example application
~~~~~~~~~~~~~~~~~~~

As case, we want to make software for computing with the simple
formula :math:`s=v_0t + \frac{1}{2}at^2`. We want :math:`v_0` to be a velocity
with unit m/s, :math:`a` to acceleration with unit :math:`\hbox{m/s}^2`, :math:`t` to be
time measured in s, and consequently :math:`s` is a distance measured in m.

Pool of parameters
------------------

First, Parampool requires us to define a *pool* of all input
parameters, which is here simply represented by list of dictionaries, where each
dictionary holds information about one parameter. It is possible to
organize input parameters in a tree structure with subpools having
subpools,
but for our simple application we just need a flat structure with
three input parameters:
:math:`v_0`, :math:`a`, and :math:`t`. These parameters are put in a subpool called
"Main". The pool is created by the code

.. code-block:: python

        def define_input():
            pool = [
                'Main', [
                    dict(name='initial velocity', default=1.0, unit='m/s'),
                    dict(name='acceleration', default=1.0, unit='m/s**2'),
                    dict(name='time', default=10.0, unit='s')
                    ]
                ]
        
            from parampool.pool.UI import listtree2Pool
            pool = listtree2Pool(pool)  # convert list to Pool object
            return pool

For each parameter we can define a logical name, such as ``initial velocity``,
a default value, and a unit. Additional properties
are also allowed, see the `Parampool documentation <http://hplgit.github.io/parampool/doc/web/index.html>`__.


.. admonition:: Tip: specify default values of numbers as float objects

   Note that we write 1.0 as default value and not just 1.
   In the latter case, Parampool will interpret that our parameter is
   an integer and actually convert input like ``2.5 m/s`` to ``2 m/s``.
   To ensure that a real-valued parameter becomes a ``float`` object inside
   the pool, specify the default value as a real number: ``1.`` or ``1.0``.
   (The type of an input parameter can alternatively be explicitly set by
   the ``str2type`` property, e.g., ``str2type=float``.)




Fetching pool data for computing
--------------------------------

We can make a little function for fetching values from the pool
and computing :math:`s`:

.. code-block:: python

        def distance(pool):
            v_0 = pool.get_value('initial velocity')
            a = pool.get_value('acceleration')
            t = pool.get_value('time')
            s = v_0*t + 0.5*a*t**2
            return s

The ``pool.get_value`` function returns the numerical value of
the named parameter, after the unit has been converted from what the
user has specified to what was registered in the pool.
For example, if the user provides the command-line argument
``--time '2 h'``, Parampool will convert this quantity to seconds and
``pool.get_value('time')`` will return 7200.

Reading command-line options
----------------------------

To run the computations, we define the pool, load values from the
command line, and call ``distance``:

.. code-block:: python

        pool = define_input()
        from parampool.menu.UI import set_values_from_command_line
        pool = set_values_from_command_line(pool)
        
        s = distance(pool)
        print 's=%g' % s

Parameter names with whitespace must use an underscore for whitespace
in the command-line option, such as in ``--Initial_velocity``.
We can now run

.. code-block:: text

        Terminal> python distance.py --initial_velocity '10 km/h' \ 
                  --acceleration 0 --time '1 h
        s=10000

Notice from the answer (``s``) that 10 km/h gets converted to m/s and 1 h to s.

It is also possible to fetch parameter values as ``PhysicalQuantity``
objects from the pool through calling

.. code-block:: python

        v_0 = pool.get_value_unit('Initial velocity')

The following variant of the ``distance`` function computes with
values and units:

.. code-block:: python

        def distance_unit(pool):
            """Compute distance $s = v_0t + \frac{1}{2}at^2$. (DocOnce)"""
            # Compute with units
            from parampool.PhysicalQuantities import PhysicalQuantity as PQ
            v_0 = pool.get_value_unit('initial velocity')
            a = pool.get_value_unit('acceleration')
            t = pool.get_value_unit('time')
            s = v_0*t + 0.5*a*t**2
            return s.getValue(), s.getUnitName()

We can then do

.. code-block:: python

        s, s_unit = distance_unit(pool)
        print 's=%g' % s, s_unit

and get output with the right unit as well.

Setting default values in a file
--------------------------------

In large applications with lots of input parameters one will often like
to define a (huge) set of default values specific for a case and then
override a few of them on the command-line. Such sets of default values
can be set in a file using syntax like

.. code-block:: python

        subpool Main
        initial velocity = 100 ! yd/min
        acceleration = 0 ! m/s**2         # drop acceleration
        end

The unit can be given after the ``!`` symbol (and before the comment symbol ``#``).

To read such files we have to add the lines

.. code-block:: python

        from parampool.pool.UI import set_defaults_from_file
        pool = set_defaults_from_file(pool)

before the call to ``set_defaults_from_command_line``.

If the above commands are stored in a file ``distance.dat``, we give
this file information to the program through the
option ``--poolfile distance.dat``. Running just

.. code-block:: text

        Terminal> python distance.py --poolfile distance.dat
        s=15.25 m

first loads the velocity
100 yd/min converted to 1.524 m/s and zero acceleration
into the pool system and, and then we call ``distance_unit``, which
loads these values from the pool along with the default value for
time, set as 10 s. The calculation is then :math:`s=1.524\cdot 10 + 0=15.24`
with unit m. We can override the time and/or the other two
parameters on the command line:

.. code-block:: text

        Terminal> python distance.py --poolfile distance.dat --time '2 h'
        s=10972.8 m

The resulting calculations are :math:`s=1.524\cdot 7200 + 0 =10972.8`.
You are encouraged to play around with the `distance.py <http://tinyurl.com/o8pb3yy/distance.py>`__ program.

.. index:: multiple software runs

Specifying multiple values of input parameters
----------------------------------------------

Parampool has an interesting feature: multiple values can be assigned
to an input parameter, thereby making it easy for an application to
run through all combinations of all parameters.
We can demonstrate this feature by making a table of :math:`v_0`, :math:`a`, :math:`t`, and
:math:`s` values. In the compute function, we need to call ``pool.get_values``
instead of ``pool.get_value`` to get a list of all the values that
were specified for the parameter in question. By nesting loops over
all parameters, we visit all combinations of all parameters as
specified by the user:

.. code-block:: python

        def distance_table(pool):
            """Grab multiple values of parameters from the pool."""
            table = []
            for v_0 in pool.get_values('initial velocity'):
                for a in pool.get_values('acceleration'):
                    for t in pool.get_values('time'):
                        s = v_0*t + 0.5*a*t**2
                        table.append((v_0, a, t, s))
            return table

In case just a single value was specified for a parameter, ``pool.get_values``
returns this value only and there will be only one pass in the associated
loop.

After loading command-line arguments into our ``pool`` object, we can call
``distance_table`` instead of ``distance`` or ``distance_unit`` and
write out a nicely formatted table of results:

.. code-block:: python

        table = distance_table(pool)
        print '|-----------------------------------------------------|'
        print '|      v_0   |      a     |      t     |      s       |'
        print '|-----------------------------------------------------|'
        for v_0, a, t, s in table:
            print '|%11.3f | %10.3f | %10.3f | %12.3f |' % (v_0, a, t, s)
        print '|-----------------------------------------------------|'

Here is a sample run,

.. code-block:: text

        Terminal> python distance.py --time '1 h & 2 h & 3 h' \ 
                  --acceleration '0 m/s**2 & 1 m/s**2 & 1 yd/s**2' \ 
        	  --initial_velocity '1 & 5'
        |-----------------------------------------------------|
        |      v_0   |      a     |      t     |      s       |
        |-----------------------------------------------------|
        |      1.000 |      0.000 |   3600.000 |     3600.000 |
        |      1.000 |      0.000 |   7200.000 |     7200.000 |
        |      1.000 |      0.000 |  10800.000 |    10800.000 |
        |      1.000 |      1.000 |   3600.000 |  6483600.000 |
        |      1.000 |      1.000 |   7200.000 | 25927200.000 |
        |      1.000 |      1.000 |  10800.000 | 58330800.000 |
        |      1.000 |      0.914 |   3600.000 |  5928912.000 |
        |      1.000 |      0.914 |   7200.000 | 23708448.000 |
        |      1.000 |      0.914 |  10800.000 | 53338608.000 |
        |      5.000 |      0.000 |   3600.000 |    18000.000 |
        |      5.000 |      0.000 |   7200.000 |    36000.000 |
        |      5.000 |      0.000 |  10800.000 |    54000.000 |
        |      5.000 |      1.000 |   3600.000 |  6498000.000 |
        |      5.000 |      1.000 |   7200.000 | 25956000.000 |
        |      5.000 |      1.000 |  10800.000 | 58374000.000 |
        |      5.000 |      0.914 |   3600.000 |  5943312.000 |
        |      5.000 |      0.914 |   7200.000 | 23737248.000 |
        |      5.000 |      0.914 |  10800.000 | 53381808.000 |
        |-----------------------------------------------------|
        

Notice that some of the multiple values have dimensions different
from the registered dimension for that parameter, and the table
shows that conversion to the right dimension has taken place.

.. index:: web interface (Parampool)

.. index:: graphical web interface

Generating a graphical user interface
-------------------------------------

For the fun of it, we can easily generate a graphical user interface
via Parampool. We wrap the ``distance_unit`` function in a function that
returns the result is some nice-looking HTML code:

.. code-block:: python

        def distance_unit2(pool):
            # Wrap result from distance_unit in HTML
            s, s_unit = distance_unit(pool)
            return '<b>Distance:</b> %.2f %s' % (s, s_unit)

In addition, we must make a file ``generate_distance_GUI.py`` with the
simple content

.. code-block:: python

        from parampool.generator.flask import generate
        from distance import distance_unit2, define_input
        
        generate(distance_unit2, pool_function=define_input, MathJax=True)

Running ``generate_distance_GUI.py`` creates a Flask-based web
interface [#Flask]_
to our ``distance_unit`` function, see Figure :ref:`scale:dimunit:fig:GUI`.
The text fields in this GUI allow specification of parameters with
numbers and units, e.g., acceleration with unit yards per minute squared,
as shown in the figure. Hovering the mouse slightly to the left of
the text field causes a little black window to pop up with the registered unit
of that parameter.

.. [#Flask] You need to have Flask and additional packages installed.
   This is easy to do with a few ``pip install`` commands,
   see [Ref02]_ or [Ref03]_.

.. _scale:dimunit:fig:GUI:

.. figure:: distance_GUI.png
   :width: 400

   *Web GUI where parameters can be specified with units*

With examples shown above, you should be able to utilize the
``PhysicalQuantity`` object and the Parampool package in your programs
to work safely with units. For the coming text, where we discuss the
craft of scaling in detail, we shall just work in standard SI units
and avoid unit conversion so there will be no more use of
``PhysicalQuantity`` and Parampool.

