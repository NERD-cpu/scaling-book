

.. |nbsp| unicode:: 0xA0
   :trim:

.. !split

Advanced PDE models
%%%%%%%%%%%%%%%%%%%

This final chapter addresses more complicated PDE models, including
linear elasticity, viscous flow, heat transfer, porous media flow,
gas dynamics, and electrophysiology. A range of
classical dimensionless numbers are discussed in terms of the scaling.

.. _scale:elasticity:

The equations of linear elasticity
==================================

[**hpl 16**: It seems that the equations of elasticity and thermo-elasticity are never (?) non-dimensionalized in the literature.]

The general time-dependent elasticity problem
---------------------------------------------

The following vector PDE governs deformation and stress in purely elastic
materials, under the assumption of small displacement gradients:

.. _Eq:scale:elasticity:PDE1:

.. math::
   :label: scale:elasticity:PDE1
        
        \varrho\frac{\partial^2\boldsymbol{u}}{\partial t^2} =
        \nabla ((\lambda + \mu)\nabla\cdot\boldsymbol{u}) + \nabla\cdot(\mu\nabla\boldsymbol{u}) +
        \varrho\boldsymbol{f}{\thinspace .}
        
        

Here, :math:`\boldsymbol{u}` is the displacement vector,
:math:`\varrho` is the density of the material, :math:`\lambda` and :math:`\mu` are
the Lame elasticity parameters, and :math:`\boldsymbol{f}` is a body force (gravity,
centrifugal force, or similar).

We introduce dimensionless variables:

.. math::
         \bar\boldsymbol{u} = u_c^{-1}\boldsymbol{u},\quad \bar x = \frac{x}{L},\quad \bar t = \frac{f}{t_c},

where :math:`L` is some length scale we used to scale :math:`y` and :math:`z` as well.
Also the elasticity parameters and the density can be scaled, if they
are not constants,

.. math::
         \bar\lambda = \frac{\lambda}{\lambda_c},\quad
        \bar\mu = \frac{\mu}{\mu_c},\quad
        \bar\varrho = \frac{\varrho}{\varrho_c},

where the characteristic quantities are typically spatial maximum values of
the functions:

.. math::
         \lambda_c = \max_{x,y,z}\lambda,\quad
        \mu_c = \max_{x,y,z}\mu,\quad
        \varrho_c = \max_{x,y,z}\varrho{\thinspace .}

Finally, we scale :math:`\boldsymbol{f}` too (if not constant):

.. math::
         \bar\boldsymbol{f} = f_c^{-1}\boldsymbol{f},\quad f_c = \max_{x,y,z,t}||\boldsymbol{f}||{\thinspace .}

Inserting the dimensionless quantities in the governing vector PDE results in

.. math::
        
        \frac{\varrho_c u_c}{t_c^2}
        \frac{\partial^2\bar \boldsymbol{u}}{\partial \bar t^2} =
        L^{-2}u_c\bar \nabla ((\lambda_c\bar\lambda +
        \mu_c\bar\mu)\bar \nabla\cdot\bar \boldsymbol{u}) +
        L^{-2}u_c\mu_c\bar \nabla\cdot(\bar \mu\bar \nabla\bar \boldsymbol{u}) +
        \varrho_cf_c\bar\varrho\bar\boldsymbol{f}{\thinspace .}
        

Making the terms non-dimensional gives the equation

.. _Eq:_auto40:

.. math::
   :label: _auto40
        
        \bar\varrho\frac{\partial^2\bar \boldsymbol{u}}{\partial \bar t^2} =
        \frac{t_c^2\lambda_c}{L^2\varrho_c}
        \bar \nabla (\bar\lambda\bar\nabla\cdot\bar u) +
        \frac{t_c^2\mu_c}{L^2\varrho_c}
        \bar\nabla(\bar\mu \bar\nabla\cdot\bar \boldsymbol{u}) +
        \frac{t_c^2\mu_c}{L^2\varrho_c}\bar \nabla\cdot(\bar \mu\bar \nabla\bar \boldsymbol{u}) +
        \frac{t_c^2f_c}{u_c}\bar\varrho\bar\boldsymbol{f}{\thinspace .}
        
        

We may choose :math:`t_c` to make the coefficient in front of any of the spatial
derivative terms equal unity. Here we choose the :math:`\mu` term, which implies

.. math::
         t_c = L\sqrt{\frac{\varrho_c}{\mu_c}}{\thinspace .}

The scale for :math:`\boldsymbol{u}` can be chosen from an initial displacement or by
making the coefficient in front of the :math:`\bar\boldsymbol{f}` term unity. The latter
means

.. math::
         u_c = \mu_c^{-1}f_cL^2\varrho_c{\thinspace .}

The resulting dimensionless PDE becomes

.. _Eq:_auto41:

.. math::
   :label: _auto41
        
        \bar\varrho\frac{\partial^2\bar \boldsymbol{u}}{\partial \bar t^2} =
        \bar \nabla ((\beta\bar\lambda + \bar\mu)\bar\nabla\cdot\bar u) +
        \bar \nabla\cdot(\bar \mu\bar \nabla\bar \boldsymbol{u}) +
        \bar\varrho\bar\boldsymbol{f}{\thinspace .}
        
        

The only dimensionless parameter is

.. math::
         \beta = \frac{\lambda_c}{\mu_c}{\thinspace .}

If the source term is absent, we must use the initial condition or
a known boundary displacement to
determine :math:`u_c`.

Software          (7)
~~~~~~~~~~~~~~~~~~~~~

Given software for :eq:`scale:elasticity:PDE1`,
we can simulate the dimensionless problem by setting :math:`\varrho =\bar\varrho`,
:math:`\lambda =\beta\bar\lambda`, and :math:`\mu = \bar\mu`.

[**hpl 17**: What about setting boundary conditions?]

Dimensionless stress tensor
---------------------------

The stress tensor :math:`\boldsymbol{\sigma}` is a key quantity in elasticity and is given by

.. math::
         \boldsymbol{\sigma} = \lambda\nabla\cdot\boldsymbol{u}\boldsymbol{I} + \mu(\nabla\boldsymbol{u} + (\nabla\boldsymbol{u})^T){\thinspace .}

Inserting dimensionless variables on the right-hand side gives

.. math::
        
        \boldsymbol{\sigma} &= \lambda_cu_cL^{-2}\bar\lambda\bar\nabla\cdot\bar\boldsymbol{u}
        + \mu_cu_cL^{-1}\bar\mu(\bar\nabla\bar\boldsymbol{u} + (\bar\nabla\bar\boldsymbol{u})^T)\\ 
        &= \mu_c u_cL^{-1}\left(\beta\bar\lambda\bar\nabla\cdot\bar\boldsymbol{u} +
        \bar\mu(\bar\nabla\bar\boldsymbol{u} + (\bar\nabla\bar\boldsymbol{u})^T)\right){\thinspace .}
        

The coefficient on the right-hand side, :math:`\mu_c u_cL^{-1}`, has dimension
of stress, since (according to the second table in
the section :ref:`scale:dimunit:tables`) :math:`[\hbox{M}\hbox{T}^{-2}\hbox{L}^{-1})(\hbox{L})(\hbox{L}^{-1})]
=[\hbox{M}\hbox{T}^{-2}\hbox{L}^{-1}]`, which is the dimension of stress.
The quantity :math:`\mu_c u_cL^{-1}` is therefore the natural scale of the
stress tensor:

.. math::
         \bar\boldsymbol{\sigma} = \frac{\boldsymbol{\sigma}}{\sigma_c},\quad \sigma_c = \mu_c u_c L^{-1},

and we have the dimensionless stress-displacement relation

.. _Eq:_auto42:

.. math::
   :label: _auto42
        
        \bar\boldsymbol{\sigma} =
        \beta\bar\lambda\bar\nabla\cdot\bar\boldsymbol{u} +
        \bar\mu(\bar\nabla\bar\boldsymbol{u} + (\bar\nabla\bar\boldsymbol{u})^T){\thinspace .}
        
        

.. _scale:elasticity:waves:

When can the acceleration term be neglected?
--------------------------------------------

A lot of applications of the elasticity equation involves static or
quasi-static deformations where the acceleration term
:math:`\varrho\boldsymbol{u}_{tt}` is neglected. Now we shall see under which conditions
the quasi-static approximation holds.

The further discussion will need to look into the time scales
of elastic waves, because it turns out that
the chosen :math:`t_c` above is closely linked to properties of
elastic waves in a homogeneous body without body forces.
That is, we have constant :math:`\varrho`, :math:`\lambda`, and :math:`\mu`,
and no force term:

.. _Eq:scale:elasticity:waves:eq:

.. math::
   :label: scale:elasticity:waves:eq
        
        \varrho\frac{\partial^2\boldsymbol{u}}{\partial t^2} =
        (\lambda + \mu)\nabla \nabla\cdot\boldsymbol{u} + \mu\nabla^2\boldsymbol{u}{\thinspace .}
        
        

S waves
~~~~~~~

Let us take the curl of this PDE and notice
that the curl of a  gradient vanishes. The result is

.. math::
        \frac{\partial^2}{\partial t^2}\nabla\times\boldsymbol{u} = c_S^2\nabla^2\nabla\times\boldsymbol{u},

i.e., a wave equation for :math:`\nabla\times\boldsymbol{u}`. The wave velocity is

.. math::
         c_S = \sqrt{\frac{\mu}{\varrho}}{\thinspace .}

The corresponding waves are called
`S waves <https://en.wikipedia.org/wiki/S-wave>`__. The curl of a
displacement field is closely related to rotation of continuum elements.

The divergence of a displacement field can be interpreted as the
volume change of continuum elements. Suppose this volume change vanishes,
:math:`\nabla\cdot\boldsymbol{u} = 0`, which means that the material is incompressible.
The elasticity equation then simplifies to

.. math::
        \frac{\partial^2 \boldsymbol{u}}{\partial t^2} = c_S^2\nabla^2\boldsymbol{u},

so each components of
the displacement field in this case also propagates as a wave
with speed :math:`c_S^2`.
The time it takes for such a wave to travel one characteristic length
:math:`L` is :math:`L/c_S`, i.e., :math:`L\sqrt{\varrho/\mu}`, which is nothing but
our characteristic time :math:`t_c`.

P waves
~~~~~~~

We may take the divergence of the PDE instead and notice that :math:`\nabla\cdot\nabla
=\nabla^2` so

.. math::
        \frac{\partial^2}{\partial t^2}\nabla\dot\boldsymbol{u} = c_P^2\nabla^2\nabla\dot\boldsymbol{u},

with wave velocity

.. math::
         c_P = \sqrt{\frac{\lambda +2\mu}{\varrho}}{\thinspace .}

That is, the volume change propagates as a wave with speed :math:`c_P`.
These type of waves are called `P waves <https://en.wikipedia.org/wiki/P-wave>`__.

Suppose now that :math:`\nabla\times\boldsymbol{u} =0`, i.e., there is no rotation ("shear") of
continuum elements. Mathematically this condition implies that
:math:`\nabla^2\boldsymbol{u} = \nabla(\nabla\cdot\boldsymbol{u})` (see any book on vector calculus
or `Wikipedia <https://en.wikipedia.org/wiki/Vector_calculus_identities>`__).
Our model equation :eq:`scale:elasticity:waves:eq` then reduces to

.. math::
         \frac{\partial^2\boldsymbol{u}}{\partial t^2} = c_P^2\nabla^2\boldsymbol{u},

which is nothing but a wave equation for each component of the
displacement field.

[**hpl 18**: Think about the suitability of "no shear" as characteristic for curl-free :math:`\boldsymbol{u}`.]

Time-varying load
~~~~~~~~~~~~~~~~~

Suppose we have some time-varying boundary condition on :math:`\boldsymbol{u}` or the
stress vector (traction) that has time scale :math:`\omega` (some
oscillating movement that goes like :math:`\sin\omega t` is an example). We
choose :math:`t_c=1/\omega`.  The scaling now leads to

.. math::
        
        \gamma
        \frac{\partial^2\bar \boldsymbol{u}}{\partial \bar t^2} =
        \bar \nabla ((\beta\bar\lambda +
        \bar\mu)\bar \nabla\cdot\bar \boldsymbol{u}) +
        \bar \nabla\cdot(\bar \mu\bar \nabla\bar \boldsymbol{u}) +
        \frac{\varrho_cL^2 f_c}{u_c\mu_c}\bar\varrho\bar\boldsymbol{f}{\thinspace .}
        

where

.. math::
         u_c = \mu_c^{-1}f_cL^2\varrho_c,

as before, and :math:`\gamma` is a new dimensionless number,

.. math::
         \gamma = \frac{\varrho_cL^2 \omega^2}{\mu_c} =
        \left(\frac{L\sqrt{\varrho_c/\mu_c}}{1/\omega}\right)^2{\thinspace .}

The last rewrite shows that :math:`\sqrt{\gamma}` is the ratio of
the time scale for S waves and the time scale for the forced
movement on the boundary. The acceleration term can therefore
be neglected when :math:`\gamma\ll 1`, i.e., when the time scale
for movement on the boundary is much larger than the time it
takes for the S waves to travel through the domain.
Since the velocity of S waves in solids is very large and
the time scale correspondingly small, :math:`\gamma\ll 1`
is very often the case in applications.

The stationary elasticity problem
---------------------------------

We now look at the stationary version of
:eq:`scale:elasticity:PDE1` where the :math:`\varrho\boldsymbol{u}_{tt}` term is
removed. The first step in the scaling is

.. math::
        
        0 =
        L^{-2}u_c\bar \nabla ((\lambda_c\bar\lambda +
        \mu_c\bar\mu)\bar \nabla\cdot\bar \boldsymbol{u}) +
        L^{-2}u_c\mu_c\bar \nabla\cdot(\bar \mu\bar \nabla\bar \boldsymbol{u}) +
        \varrho_cf_c\bar\varrho\bar\boldsymbol{f}{\thinspace .}
        

Dividing by :math:`L^2u_c\mu_c` gives

.. math::
        
        0 =
        \bar \nabla ((\beta\bar\lambda +
        \bar\mu)\bar \nabla\cdot\bar \boldsymbol{u}) +
        \bar \nabla\cdot(\bar \mu\bar \nabla\bar \boldsymbol{u}) +
        \frac{L^2\varrho_cf_c}{u_c\mu_c}\bar\varrho\bar\boldsymbol{f}{\thinspace .}
        

Choosing :math:`u_c = \varrho L^2f_c/\mu_c` as before leads to

.. _Eq:_auto43:

.. math::
   :label: _auto43
        
        \bar \nabla ((\beta\bar\lambda +
        \bar\mu)\bar \nabla\cdot\bar \boldsymbol{u}) +
        \bar \nabla\cdot(\bar \mu\bar \nabla\bar \boldsymbol{u}) +
        \bar\varrho\bar\boldsymbol{f} = 0{\thinspace .}
        
        

A homogeneous material with constant :math:`\lambda` and :math:`\mu`
is an interesting case (this corresponds to :math:`\mu_c=\mu`, :math:`\lambda_c=\lambda`,
:math:`\bar\lambda=\bar\mu=1`):

.. _Eq:_auto44:

.. math::
   :label: _auto44
        
        (1+\beta)\bar \nabla(\bar \nabla\cdot\bar \boldsymbol{u}) +
        \bar \nabla\cdot(\bar \mu\bar \nabla\bar \boldsymbol{u}) +
        \bar\varrho\bar\boldsymbol{f} = 0{\thinspace .}
        
        

.. math::
         \alpha = \frac{\lambda_c}{\mu_c}{\thinspace .}

[**hpl 19**: The homogeneous case without body force is common. Scale displacement from boundary condition. Maybe scale traction first and determine characteristic displacement from it?]

Quasi-static thermo-elasticity
------------------------------

.. index:: thermo-elasticity

Heating solids give rise to expansion, i.e., strains, which may cause
stress if displacements are constrained. The time scale of temperature
changes are usually much larger than the time scales of elastic waves,
so the stationary equations of elasticity can be used, but a term
depends on the temperature, so the equations must be coupled to
a PDE for heat transfer in solids. The resulting system of PDE is
known as the equations of *thermo-elasticity* and reads

.. _Eq:_auto45:

.. math::
   :label: _auto45
        
        \nabla((\lambda + \mu)\nabla\cdot\boldsymbol{u}) + \nabla\cdot(\mu\nabla\boldsymbol{u}) = \alpha\nabla T -\varrho\boldsymbol{f},
        
        

.. _Eq:_auto46:

.. math::
   :label: _auto46
          
        \varrho c \frac{\partial T}{\partial t} = \nabla\cdot(\kappa\nabla T) + \varrho \boldsymbol{f}_T,
        
        

where :math:`T` is the temperature, :math:`\alpha` is a coefficient of thermal expansion,
:math:`c` is a heat capacity, :math:`\kappa` is the heat conduction coefficient,
and :math:`\boldsymbol{f}_T` is some heat source.

.. _sec:scale:ns:

The Navier-Stokes equations
===========================

.. index:: Navier-Stokes equations

The momentum equation without body forces
-----------------------------------------

.. index:: dimensionless number

.. index:: Reynolds number

The Navier-Stokes equations for incompressible viscous fluid flow
take the form

.. _Eq:scale:fluid:NS:eq:momentum:

.. math::
   :label: scale:fluid:NS:eq:momentum
        
        \varrho\left(\frac{\partial \boldsymbol{u}}{\partial t} + \boldsymbol{u}\cdot\nabla\boldsymbol{u}\right)
        = -\nabla p + \mu\nabla^2\boldsymbol{u},
        
        

.. _Eq:scale:fluid:NS:eq:cont:

.. math::
   :label: scale:fluid:NS:eq:cont
          
        \nabla\cdot\boldsymbol{u}  = 0{\thinspace .}
        
        

The primary unknowns are the
velocity :math:`\boldsymbol{u}` and the pressure :math:`p`. Moreover,
:math:`\varrho` is the fluid density, and :math:`\mu` is the dynamic viscosity.

We introduce as usual dimensionless independent and dependent variables:

.. math::
         \bar x = \frac{x}{L},\quad \bar y = \frac{y}{L},\quad
        \bar z= \frac{z}{L},\quad \bar t = \frac{t}{t_c},\quad
        \bar\boldsymbol{u} = \frac{\boldsymbol{u}}{u_c},\quad \bar p = \frac{p}{p_c},

where :math:`L` is some characteristic distance,
:math:`t_c` is some characteristic time, :math:`u_c` is a characteristic
velocity, and :math:`p_c` is a characteristic pressure.
Inserted in the equations,

.. _Eq:scale:fluid:NS:eq:momentum_d0:

.. math::
   :label: scale:fluid:NS:eq:momentum_d0
        
        \varrho\left(\frac{u_c}{t_c}\frac{\partial \bar\boldsymbol{u}}{\partial \bar t} + \frac{u_c^2}{L}\bar\boldsymbol{u}\cdot\bar\nabla\bar\boldsymbol{u}\right)
        = -\frac{p_c}{L}\bar\nabla\bar p + \frac{u_c}{L^2}\mu\bar \nabla^2\bar\boldsymbol{u},
        
        

.. _Eq:scale:fluid:NS:eq:cont_d0:

.. math::
   :label: scale:fluid:NS:eq:cont_d0
          
        \frac{u_c}{L}\bar\nabla\cdot\bar\boldsymbol{u}  = 0{\thinspace .}
        
        

For the velocity it is common to just introduce some :math:`U` for
:math:`u_c`. This :math:`U` is normally implied by the problem description.
[**hpl 20**: Show examples of confined and unconfined flow and what :math:`U` is.]
For example, :math:`U` is often chosen as a characteristic inlet velocity
in the flow problem.
Having a characteristic distance :math:`L` and velocity :math:`U`, an obvious
time measure is :math:`L/U` so we set :math:`t_c=L/U`. Dividing by the
coefficient in front of the time derivative term, creates a pressure
term

.. math::
         \frac{p_c}{\varrho U^2}\bar\nabla\bar p{\thinspace .}

The coefficient suggest a choice :math:`p_c=\varrho U^2` if the pressure
gradient term is to have the same size as the acceleration terms.
This :math:`p_c` is also a very common pressure scale in fluid mechanics.

.. index:: Reynolds number

The most common dimensionless form of the Navier-Stokes equations
-----------------------------------------------------------------

The discussions so far results in the following dimensionless form of
:eq:`scale:fluid:NS:eq:momentum` and :eq:`scale:fluid:NS:eq:cont`:

.. _Eq:scale:fluid:NS:eq:momentum_d1:

.. math::
   :label: scale:fluid:NS:eq:momentum_d1
        
        \frac{\partial \bar\boldsymbol{u}}{\partial \bar t} +
        \bar\boldsymbol{u}\cdot\bar\nabla\bar\boldsymbol{u}
        = -\bar\nabla\bar p + \hbox{Re}^{-1}\nabla^2\boldsymbol{u},
        
        

.. _Eq:_auto47:

.. math::
   :label: _auto47
          
        \bar\nabla\cdot \bar\boldsymbol{u} = 0,
        
        

where Re is the famous *Reynolds number*,

.. math::
         \hbox{Re}= \frac{\varrho UL}{\mu} = \frac{UL}{\nu}{\thinspace .}

The latter expression makes use of the kinematic viscosity :math:`\nu = \mu/\varrho`.
For viscous fluid flows without body forces there is hence only one
dimensionless number, Re.

The Reynolds number can be interpreted as the ratio of convection and
viscosity:

.. math::
         \hbox{Re} = \frac{\hbox{convection}}{\hbox{viscosity}} =
        \frac{\varrho U^2/L}{\mu U/L^2} = \frac{UL}{\nu}{\thinspace .}

(We have here used that :math:`\nabla\boldsymbol{u}` goes like :math:`U/L` and :math:`\nabla^2\boldsymbol{u}`
goes like :math:`U/L^2`.)

.. index:: low Reynolds number flow

.. index:: Stokes problem

Scaling of time for low Reynolds numbers
----------------------------------------

As we discussed in the section :ref:`scale:convdiff` for the convection-diffusion
equation, there is not just one scaling that fits all problems.
Above, we used :math:`t_c=L/U`, which is appropriate if convection is
a dominating physical effect. In case the convection term
:math:`\varrho\boldsymbol{u}\cdot\nabla\boldsymbol{u}`
is much smaller
than the viscosity term :math:`\mu\nabla^2\boldsymbol{u}`, i.e., the Reynolds number
is small, the viscosity term is dominating. However,
if the scaling is suitable, the other terms are of order unity, and
:math:`\hbox{Re}^{-1}\nabla^2\bar\boldsymbol{u}` must then also be of unit size,
implying that :math:`\nabla^2\bar\boldsymbol{u}` is very small, but then the scaling is
not suitable. In the low-Reynolds number regime, the diffusion effect
of :math:`\nabla^2\bar\boldsymbol{u}` is dominating, and we should use a time scale
based on diffusion rather than convection. Such a time scale is
:math:`t_c = L^2/(\mu/\varrho) = L^2/\nu`.
With this time scale, the Navier-Stokes equation looks like

.. _Eq:scale:fluid:NS:eq:momentum_d2:

.. math::
   :label: scale:fluid:NS:eq:momentum_d2
        
        \frac{\partial \bar\boldsymbol{u}}{\partial \bar t} +
        \hbox{Re}\,\bar\boldsymbol{u}\cdot\bar\nabla\bar\boldsymbol{u}
        = -\bar\nabla p + \nabla^2\boldsymbol{u},
        
        

.. _Eq:_auto48:

.. math::
   :label: _auto48
          
        \bar\nabla\cdot\bar\boldsymbol{u} = 0{\thinspace .}
        
        

As stated in the box in the section :ref:`scale:convdiff`, :eq:`scale:fluid:NS:eq:momentum_d2` is the appropriate PDE for very low Reynolds number flow and
suggests neglecting the convection term.
If the flow is also steady, the time derivative term can be neglected,
and we end up with the so-called *Stokes problem* for steady, slow, viscous
flow:

.. _Eq:scale:fluid:NS:eq:momentum_d3:

.. math::
   :label: scale:fluid:NS:eq:momentum_d3
        
        -\bar\nabla p + \nabla^2\boldsymbol{u} = 0,
        
        

.. _Eq:_auto49:

.. math::
   :label: _auto49
          
        \bar\nabla\cdot\bar\boldsymbol{u} = 0{\thinspace .}
        
        

This flow regime is also known as *Stokes' flow* or *creeping flow*.

.. index:: Stokes' flow

.. index:: Froude number

.. index:: creeping flow

Shear stress as pressure scale
------------------------------

Instead of using the kinetic energy :math:`\varrho U^2` as pressure scale,
one can use the shear stress :math:`\mu U/L` (:math:`U/L` reflects the spatial
derivative of the velocity, which enters the shear stress expression
:math:`\mu\partial u/\partial y`). Using :math:`U` as velocity scale, :math:`L/U` as
time scale, and :math:`\mu U/L` as pressure scale, results in

.. _Eq:_auto50:

.. math::
   :label: _auto50
        
        \hbox{Re}\left(\frac{\partial \bar\boldsymbol{u}}{\partial \bar t} +
        \bar\boldsymbol{u}\cdot\bar\nabla\bar\boldsymbol{u}\right)
        = -\bar\nabla\bar p + \nabla^2\bar\boldsymbol{u}{\thinspace .}
        
        

Including the gravity force
---------------------------

We now add a gravity force to the momentum equation
:eq:`scale:fluid:NS:eq:momentum`:

.. _Eq:scale:fluid:NS:eq:momentum_g:

.. math::
   :label: scale:fluid:NS:eq:momentum_g
        
        \varrho\left(\frac{\partial \boldsymbol{u}}{\partial t} + \boldsymbol{u}\cdot\nabla\boldsymbol{u}\right)
        = -\nabla p + \mu\nabla^2\boldsymbol{u} - \varrho g\boldsymbol{k},
        
        

where :math:`g` is the acceleration of gravity, and :math:`\boldsymbol{k}` is a unit
vector in the opposite direction of gravity. The new term
takes the following form after non-dimensionalization:

.. math::
         \frac{t_c}{\varrho  u_c}\varrho g \boldsymbol{k} =  \frac{Lg}{U^2}\boldsymbol{k}
        = \hbox{Fr}^{-2}\boldsymbol{k},

where Fr is the dimensionless Froude number,

.. math::
         \hbox{Fr} = \frac{U}{\sqrt{Lg}}{\thinspace .}

.. index:: Strouhal number

Oscillating boundary conditions
-------------------------------

Many flows have an oscillating nature, often arising from some
oscillating boundary condition. Suppose such a condition at some
boundary :math:`x=\hbox{const}` takes the specific form

.. math::
         \boldsymbol{u} = U\sin(\omega t)\boldsymbol{i}{\thinspace .}

The dimensionless form becomes

.. math::
         U\bar\boldsymbol{u} = U\sin(\omega \frac{L}{U}\bar t)\boldsymbol{i},

if :math:`t_c=L/U` is the appropriate time scale. This condition can be
written

.. _Eq:_auto51:

.. math::
   :label: _auto51
        
        \bar\boldsymbol{u} = \sin(\hbox{St}\,\bar t),
        
        

where St is the *Strouhal number*,

.. _Eq:_auto52:

.. math::
   :label: _auto52
        
        \hbox{St} = \frac{\omega L}{U}{\thinspace .}
        
        

The two important dimensionless parameters in oscillating flows are
then the Reynolds and Strouhal numbers.

.. index:: vortex shedding

Even if the boundary conditions
are of steady type, as for flow around a sphere or cylinder,
the flow may at certain Reynolds numbers get unsteady and oscillating.
For :math:`10^2 < \hbox{Re} < 10^7`, steady inflow towards a cylinder will
cause vortex shedding: an array of vortices are periodically shedded
from the cylinder, producing an oscillating flow pattern and force
on the cylinder. The Strouhal number is used to characterize the
frequency of oscillations. The phenomenon, known as *von Karman
vortex street*, is particularly important if the frequency
of the force on the cylinder hits the free vibration frequency
of the cylinder such that resonance occurs. The result can be large
displacements of the cylinder and structural failure. A famous
case in engineering is the failure of the `Tacoma Narrows suspension
bridge <https://en.wikipedia.org/wiki/Tacoma_Narrows_Bridge_(1940)>`__
in 1940, when wind-induced vortex shedding caused resonance
with the free torsional vibrations of the bridge.

.. index:: Euler number

The Euler number
----------------

The dimensionless pressure in :eq:`scale:fluid:NS:eq:momentum_d1`
made use of the pressure scale :math:`p_c=\varrho U^2`. This is an
appropriate scale if the pressure level is not of importance, which
is very often the case since only the pressure *gradient* enters
the flow equation and drives the flow. However, there are circumstances
where the pressure level is of importance. For example, in some flows
the pressure may become so low that the vapor pressure of the liquid
is reached and that vapor cavities form (a phenomenon known as
*cavitation*). A more appropriate pressure scale is then
:math:`p_c = p_{\infty} - p_v`, where :math:`p_\infty` is a characteristic
pressure level far from vapor cavities and :math:`p_v` is the vapor pressure.
The coefficient in front of the dimensionless pressure gradient is then

.. math::
         \frac{p_{\infty} - p_v}{\varrho U^2}{\thinspace .} 

Inspired by Bernoulli's equation :math:`p + \frac{1}{2}\varrho U^2 = \hbox{const}`
in fluid mechanics, a factor :math:`\frac{1}{2}` is often inserted in the
denominator, and the corresponding dimensionless number,

.. _Eq:_auto53:

.. math::
   :label: _auto53
        
        \hbox{Eu} = \frac{p_{\infty} - p_v}{\frac{1}{2}\varrho U^2},
        
        

is called the *Euler number*. The pressure gradient term now reads
:math:`\frac{1}{2}\hbox{Eu}\,\bar\nabla\bar p`. The Euler number
expresses the ratio of pressure differences and the kinetic
energy of the flow.

Free surface conditions
-----------------------

At a free surface, :math:`z=\eta(x,y,t)`, the boundary conditions are

.. _Eq:_auto54:

.. math::
   :label: _auto54
        
        w = \frac{\partial\eta}{\partial t} + \boldsymbol{u}\cdot\nabla\eta,
        
        

.. _Eq:scale:fluid:NS:surface_tension:

.. math::
   :label: scale:fluid:NS:surface_tension
          
        p - p_0 =  - \sigma\left(R_x^{-1} + R_y^{-1}\right)\approx
        -\sigma\left(\frac{\partial^2\eta}{\partial x^2} +
        \frac{\partial^2\eta}{\partial y^2}\right),
        
        

where :math:`w` is the velocity component in the :math:`z` direction,
:math:`p_0` is the atmospheric air pressure at the surface,
:math:`\sigma` represents the surface tension,
while :math:`R_x` and :math:`R_y` are radii of curvature of the surface :math:`z=\eta`,
which for small surface deformations can be approximated by second-order
derivatives of :math:`\eta` as indicated.

.. index:: Weber number

The dimensionless form of these conditions starts with inserting the
dimensionless quantities in the equations:

.. math::
        
        u_c\bar w &= \frac{L}{t_c}
        \frac{\partial\bar\eta}{\partial\bar t} +
        u_c\bar\boldsymbol{u}\cdot\bar\nabla\bar\eta,\\ 
        p_c \bar p &\approx
        -\frac{1}{L}\sigma\left(\frac{\partial^2\bar\eta}{\partial \bar x^2} +
        \frac{\partial^2\bar\eta}{\partial \bar y^2}\right){\thinspace .}
        

The characteristic length :math:`L` is usually taken as the depth of the fluid
when the surface is flat. We have used
:math:`\bar p = (p - p_0)/p_c` for making the pressure dimensionless.
Using :math:`u_c=U`, :math:`t_c=L/U`, and :math:`p_c = \varrho U^2`, results in

.. _Eq:_auto55:

.. math::
   :label: _auto55
        
        \bar w = \frac{\partial\bar\eta}{\partial\bar t} +
        \bar\boldsymbol{u}\cdot\bar\nabla\bar\eta,
        
        

.. _Eq:scale:fluid:NS:surface_tension2:

.. math::
   :label: scale:fluid:NS:surface_tension2
          
        \bar p \approx
        - \hbox{We}^{-1}\left(\frac{\partial^2\bar\eta}{\partial \bar x^2} +
        \frac{\partial^2\bar\eta}{\partial \bar y^2}\right),
        
        

where We is the *Weber number*,

.. math::
        
        \hbox{We} = \frac{\varrho U^2L}{\sigma}{\thinspace .}
        label{}
        

The Weber number measures the importance of surface tension effects and
is the ratio of the pressure scale :math:`\varrho U^2` and the surface
tension force per area, typically :math:`\sigma/R_x` in a 2D problem, which
has size :math:`\sigma/L`.

Thermal convection
==================

Temperature differences in fluid flow cause density differences, and since
cold fluid is heavier than hot fluid, the gravity force will induce
flow due to density differences. This effect is called free thermal
convection. Forced convection refers to the case where there is no
feedback from the temperature field to the motion, i.e., temperature
differences do not create motion, and the temperature distribution
is only dependent on a given velocity field.

Forced convection
-----------------

.. index:: forced convection

.. index:: Peclet number

.. index:: Reynolds number

The model governing forced convection consists of the Navier-Stokes
equation and the energy equation for the temperature:

.. _Eq:scale:fluid:forced_convection:eq:momentum_T_forced:

.. math::
   :label: scale:fluid:forced_convection:eq:momentum_T_forced
        
        \varrho\left(\frac{\partial \boldsymbol{u}}{\partial t} + \boldsymbol{u}\cdot\nabla\boldsymbol{u}\right)
        = -\nabla p + \mu\nabla^2\boldsymbol{u} - \varrho g\boldsymbol{k},
        
        

.. _Eq:scale:fluid:forced_convection:eq:cont_T_forced:

.. math::
   :label: scale:fluid:forced_convection:eq:cont_T_forced
          
        \nabla\cdot\boldsymbol{u}  = 0,
        
        

.. _Eq:scale:fluid:forced_convection:eq:energy_T_forced:

.. math::
   :label: scale:fluid:forced_convection:eq:energy_T_forced
          
        \varrho c\left(\frac{\partial T}{\partial t} + \boldsymbol{u}\cdot\nabla T\right)
        = \kappa\nabla^2 T{\thinspace .}
        
        

.. _Eq:_auto56:

.. math::
   :label: _auto56
          
        
        

The symbol :math:`T` is the temperature, :math:`c` is a heat capacity, and :math:`\kappa`
is the heat conduction coefficient for the fluid.

Despite the fact that :math:`\varrho` depends on :math:`T`, we treat :math:`\varrho`
as a constant. The major effect of this dependence is through the
buoyancy effect caused by the gravity term :math:`-g\boldsymbol{k}`. We drop this
term, and assume the momentum and continuity equations to be
independent of the temperature. The flow is driven by boundary
conditions, from which we can find a characteristic velocity :math:`U`.

We introduce dimensionless parameters according to

.. math::
         \bar x = \frac{x}{L},
        \ t_c = \frac{L}{U},\ 
        \bar\boldsymbol{u} = \frac{\boldsymbol{u}}{U},\ \bar p = \frac{p}{\varrho U^2},\ 
        \bar T = \frac{T-T_0}{T_c}{\thinspace .}

Other coordinates are also scaled by :math:`L`.
The characteristic temperature :math:`T_c` is chosen as some range :math:`\Delta T`,
which depends on the problem and is often given by the
thermal initial and/or
boundary conditions. The reference temperature :math:`T_0` is also
implied by prescribed conditions.
Inserted in the equations, we get

.. math::
        
        \varrho\frac{U^2}{L}\frac{\partial \bar\boldsymbol{u}}{\partial \bar t} +
        \varrho\frac{U^2}{L}\bar \boldsymbol{u}\cdot\bar \nabla\bar\boldsymbol{u}
        &= -{1}{L}\bar\nabla \bar p + \frac{\mu U}{L^2}
        \bar \nabla^2\bar \boldsymbol{u},
        \\ 
        \frac{U}{L}\bar\nabla\cdot\bar\boldsymbol{u} & = 0,
        \\ 
        \varrho_0 c\left(\frac{T_c U}{L}
        \frac{\partial \bar T}{\partial \bar t} +
        \frac{UT_c}{L}\bar\boldsymbol{u}\cdot\bar\nabla \bar T\right)
        &= \frac{\kappa T_c}{L^2}
        \bar \nabla^2 \bar T {\thinspace .}
        

Making each term in each equation dimensionless reduces the system to

.. _Eq:scale:fluid:forced_convection:eq:momentum_TB0:

.. math::
   :label: scale:fluid:forced_convection:eq:momentum_TB0
        
        \frac{\partial \bar\boldsymbol{u}}{\partial \bar t} +
        \bar \boldsymbol{u}\cdot\bar \nabla\bar\boldsymbol{u}
        = -\bar\nabla \bar p + \hbox{Re}^{-1}\bar \nabla^2\bar \boldsymbol{u},
        
        

.. _Eq:scale:fluid:forced_convection:eq:cont_TB0:

.. math::
   :label: scale:fluid:forced_convection:eq:cont_TB0
          
        \bar\nabla\cdot\bar\boldsymbol{u}  = 0,
        
        

.. _Eq:scale:fluid:forced_convection:eq:energy_TB0:

.. math::
   :label: scale:fluid:forced_convection:eq:energy_TB0
          
        \frac{\partial \bar T}{\partial \bar t} +
        \bar\boldsymbol{u}\cdot\bar\nabla \bar T
        = \hbox{Pe}^{-1}
        \bar \nabla^2 \bar T{\thinspace .}
        
        

The two dimensionless numbers in this system are given by

.. math::
        
        \hbox{Pe} = \frac{\varrho_0 c UL}{\kappa },\quad
        \hbox{Re} = \frac{UL}{\nu}{\thinspace .}
        

The Peclet number is here defined as the ratio of the
convection term for heat :math:`\varrho_0 c U\Delta T/L` and the
heat conduction term :math:`\kappa U/L^2`. The fraction
:math:`\kappa/(\varrho_0 c)` is known as the thermal diffusivity,
and if this quantity is given a symbol :math:`{\alpha}`, we realize the
relation to the Peclet number defined in the section :ref:`scale:convdiff`.

.. _scale:fluid:forced_convection:

Free convection
---------------

[**hpl 21**: Do the general model *and* simplified models, e.g., free convection near a wall.]

.. index:: free convection

Governing equations
~~~~~~~~~~~~~~~~~~~

The mathematical model for free thermal convection
consists of the Navier-Stokes equations
coupled to an energy equation governing the temperature:

.. _Eq:scale:fluid:free_convection:eq:momentum_T:

.. math::
   :label: scale:fluid:free_convection:eq:momentum_T
        
        \varrho\left(\frac{\partial \boldsymbol{u}}{\partial t} + \boldsymbol{u}\cdot\nabla\boldsymbol{u}\right)
        = -\nabla p + \mu\nabla^2\boldsymbol{u} - \varrho g\boldsymbol{k},
        
        

.. _Eq:scale:fluid:free_convection:eq:cont_T:

.. math::
   :label: scale:fluid:free_convection:eq:cont_T
          
        \nabla\cdot\boldsymbol{u}  = 0,
        
        

.. _Eq:scale:fluid:free_convection:eq:energy_T:

.. math::
   :label: scale:fluid:free_convection:eq:energy_T
          
        \varrho c\left(\frac{\partial T}{\partial t} + \boldsymbol{u}\cdot\nabla T\right)
        = \kappa\nabla^2 T + 2\mu\varepsilon_{ij}\varepsilon_{ij}{\thinspace .}
        
        

.. _Eq:_auto57:

.. math::
   :label: _auto57
          
        
        

The symbol :math:`T` is the temperature, :math:`c` is a heat capacity, :math:`\kappa`
is the heat conduction coefficient for the fluid. In free convection,
the gravity term :math:`-g\boldsymbol{k}` is essential since the flow is driven
by temperature differences and the fact that hot fluid rises while
cold fluid falls.

Heating by viscous effects
~~~~~~~~~~~~~~~~~~~~~~~~~~

We have also included heating of the fluid due to viscous forces
through the term :math:`2\mu\varepsilon_{ij}\varepsilon_{ij}`, where
:math:`\varepsilon_{ij}` is the strain-rate tensor in the flow, defined by

.. math::
         \varepsilon_{ij} = \frac{1}{2}\left(\frac{\partial u_i}{\partial x_j}
        + \frac{\partial u_j}{\partial x_i}\right) = \frac{1}{2}(\nabla\boldsymbol{u} + (\nabla\boldsymbol{u})^T),

where :math:`u_i` is the velocity in direction of :math:`x_i` (:math:`i=1,2,3` measures the
space directions). The term :math:`2\mu\varepsilon_{ij}\varepsilon_{ij}`
is written with Einstein's summation convention in mind such that
there is an implicit sum over :math:`i` and :math:`j`.
This term is also relevant
for forced convection, but was left out in the section :ref:`scale:fluid:forced_convection` for mathematical simplicity.
However, heating by the work of is often a very
small effect and can be neglected, although it plays a major role in
forging and extrusion of metals. By making the temperature equation
dimensionless, we will get a precise measure when the term can be
neglected.

Relation between density and temperature
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The equations :eq:`scale:fluid:free_convection:eq:momentum_T` and
:eq:`scale:fluid:free_convection:eq:cont_T` has already been made dimensionless
in the previous section. The major difference is now that :math:`\varrho`
is no longer a constant, but a function of :math:`T`.
The relationship between :math:`\varrho` and :math:`T` is often taken as
linear,

.. math::
         \varrho = \varrho_0 -\varrho_0 \beta (T-T_0),

where

.. math::
         \beta = -\frac{1}{\varrho}\left(\frac{\partial\varrho}{\partial t}
        \right)_p,

is known as the thermal expansion coefficient of the fluid,
and :math:`\varrho_0` is a reference density when the temperature is at :math:`T_0`.

Comment on the form of the equation of continuity
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

It might look strange that the equation of continuity (from the mass
conservation principle) is :math:`\nabla\cdot\boldsymbol{u} =0`
when there are density variations in the flow. The rationale for using
this version of the continuity equation is the assumption that
the density of each fluid particle remains constant. Consequently,
from the general equation of continuity,

.. math::
         \frac{\partial\varrho}{\partial t} + \nabla\cdot (\varrho \boldsymbol{u}) =
        \frac{D\varrho}{dt} + \varrho \nabla\cdot\boldsymbol{u} = 0,

it follows that if :math:`\varrho` is constant for a particle,
the material derivative :math:`D\varrho/dt = \varrho_{t} + \boldsymbol{v}\cdot\nabla\varrho = 0`,
and the equation reduces to :math:`\nabla\cdot\boldsymbol{u} = 0`.

The Boussinesq approximation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A very common approximation, called the *Boussinesq approximation*, is
to neglect the density variations in all terms except the gravity term.
This is a good approximation unless the change is :math:`\varrho` is large.
With the linear :math:`\varrho(T)` formula and the Boussinesq approximation,
:eq:`scale:fluid:free_convection:eq:momentum_T`-:eq:`scale:fluid:free_convection:eq:energy_T`
take the form

.. _Eq:scale:fluid:free_convection:eq:momentum_TB:

.. math::
   :label: scale:fluid:free_convection:eq:momentum_TB
        
        \varrho_0\left(\frac{\partial \boldsymbol{u}}{\partial t} + \boldsymbol{u}\cdot\nabla\boldsymbol{u}\right)
        = -\nabla p + \mu\nabla^2\boldsymbol{u} - (\varrho_0 - \varrho_0\beta(T-T_0))g\boldsymbol{k},
        
        

.. _Eq:scale:fluid:free_convection:eq:cont_TB:

.. math::
   :label: scale:fluid:free_convection:eq:cont_TB
          
        \nabla\cdot\boldsymbol{u}  = 0,
        
        

.. _Eq:scale:fluid:free_convection:eq:energy_TB:

.. math::
   :label: scale:fluid:free_convection:eq:energy_TB
          
        \varrho_0 c\left(\frac{\partial T}{\partial t} + \boldsymbol{u}\cdot\nabla T\right)
        = \kappa\nabla^2 T + 2\mu\varepsilon_{ij}\varepsilon_{ij}{\thinspace .}
        
        

.. _Eq:_auto58:

.. math::
   :label: _auto58
          
        
        

A good justification of the Boussinesq approximation is provided
by Tritton [Ref8]_ (Ch. 13).

Scaling          (8)
~~~~~~~~~~~~~~~~~~~~

Dimensionless variables are introduced as

.. math::
         \bar x = \frac{x}{L},\ \ t_c = \frac{L}{U},\ 
        \bar\boldsymbol{u} = \frac{\boldsymbol{u}}{U},\ \bar p = \frac{p}{\varrho U^2},\ 
        \bar T = \frac{T-T_0}{\Delta T}{\thinspace .}

The dimensionless :math:`y` and :math:`z` coordinates also make use of :math:`L` as scale.
As in forced convection, we assume the characteristic temperature
level :math:`T_0` and the scale :math:`\Delta T` is given by thermal boundary and/or
initial conditions.
Contrary to the sections :ref:`sec:scale:ns` and :ref:`scale:fluid:forced_convection`,
:math:`U` is now not given by the problem description, but implied by
:math:`\Delta T`.

Replacing quantities with dimensions by their dimensionless counterparts
results in

.. math::
        
        \varrho_0\frac{U^2}{L}\frac{\partial \bar\boldsymbol{u}}{\partial \bar t} +
        \varrho_0\frac{U^2}{L}\bar \boldsymbol{u}\cdot\bar \nabla\bar\boldsymbol{u}
        &= -\frac{p_c}{L}\bar\nabla \bar p + \frac{\mu U}{L^2}
        \bar \nabla^2\bar \boldsymbol{u} - \varrho_0g\boldsymbol{k} + \varrho_0\beta T_c\bar T g\boldsymbol{k},
        \\ 
        \frac{U}{L}\bar\nabla\cdot\bar\boldsymbol{u} & = 0,
        \\ 
        \varrho_0 c\left(\frac{T_c U}{L}
        \frac{\partial \bar T}{\partial \bar t} +
        \frac{UT_c}{L}\bar\boldsymbol{u}\cdot\bar\nabla \bar T\right)
        &= \frac{\kappa T_c}{L^2}
        \bar \nabla^2 \bar T + 2\frac{\mu U}{L}
        \bar\varepsilon_{ij}\bar\varepsilon_{ij}{\thinspace .}
        

These equations reduce to

.. _Eq:scale:fluid:free_convection:eq:momentum_TB0:

.. math::
   :label: scale:fluid:free_convection:eq:momentum_TB0
        
        \frac{\partial \bar\boldsymbol{u}}{\partial \bar t} +
        \bar \boldsymbol{u}\cdot\bar \nabla\bar\boldsymbol{u}
        = -\bar\nabla \bar p + \hbox{Re}^{-1}\bar \nabla^2\bar \boldsymbol{u}
        - \hbox{Fr}^{-2}\boldsymbol{k}  + \gamma \bar T\boldsymbol{k},
        
        

.. _Eq:scale:fluid:free_convection:eq:cont_TB0:

.. math::
   :label: scale:fluid:free_convection:eq:cont_TB0
          
        \bar\nabla\cdot\bar\boldsymbol{u}  = 0,
        
        

.. _Eq:scale:fluid:free_convection:eq:energy_TB0:

.. math::
   :label: scale:fluid:free_convection:eq:energy_TB0
          
        \frac{\partial \bar T}{\partial \bar t} +
        \bar\boldsymbol{u}\cdot\bar\nabla \bar T
        = \hbox{Pe}^{-1}\bar \nabla^2 \bar T + 2\delta
        \bar\varepsilon_{ij}\bar\varepsilon_{ij}{\thinspace .}
        
        

The dimensionless numbers are given by

.. math::
        
        \gamma = \frac{g\beta L\Delta T }{U^2},\quad
        \hbox{Pe}^{-1} = \frac{\kappa }{\varrho_0 c UL},\quad
        \delta = \frac{\mu U}{L\varrho_0 c \Delta T}{\thinspace .}
        

The Peclet number is here defined as the ratio of the
convection term for heat :math:`\varrho_0 c U\Delta T/L` and the
heat conduction term :math:`\kappa U/L^2`.
The :math:`\gamma` number measures the ratio of thermal buoyancy and
the convection term:

.. math::
         \gamma = \frac{\varrho_0 g\beta \Delta T }{\varrho_0 U^2/L}
        = \frac{g\beta L\Delta T }{U^2}{\thinspace .}

The Pe parameter is the fraction of the convection term
and the thermal diffusion term:

.. math::
         \frac{\varrho_0 c U \Delta T L^{-1}}{\kappa L^{-2}\Delta T}
        = \frac{\varrho c UL}{\kappa } = \hbox{Pe}{\thinspace .}

The :math:`\delta` parameter is the ratio of the viscous dissipation term
and the convection term:

.. math::
         \delta = \frac{\mu U^2/L^2}{\varrho_0 c U \Delta T/L} =
        = \frac{\mu U}{L\varrho_0 c \Delta T}{\thinspace .}
        

The Grashof, Prandtl, and Eckert numbers
----------------------------------------

.. index:: Grashof number

.. index:: Reynolds number

The problem with the above dimensionless numbers is that they involve
:math:`U`, but :math:`U` is implied by :math:`\Delta T`. Assuming that the convection
term is much bigger than the viscous diffusion term, the momentum
equation features a balance between the buoyancy term and the convection
term:

.. math::
         |\varrho_0 \boldsymbol{u}\cdot\nabla\boldsymbol{u}| \sim \varrho_0 g \beta\Delta T{\thinspace .}

Translating this similarity to scales,

.. math::
         \varrho_0 U^2/L \sim \varrho_0 g \beta\Delta T,

gives an :math:`U` of in terms of :math:`\Delta T` :

.. math::
         U = \sqrt{\beta L \Delta T}{\thinspace .}

The Reynolds number with this :math:`U` now becomes

.. math::
         \hbox{Re}_T = \frac{UL}{\nu} = \frac{\sqrt{g\beta L^3 \Delta T}}{\nu^2}
        = \hbox{Gr}^{1/2},

where Gr is the Grashof number in free thermal convection:

.. math::
         \hbox{Ga} = \hbox{Re}_T^2 =  \frac{g\beta L^3 \Delta T}{\nu^2}{\thinspace .}

The Grashof number replaces the Reynolds number in the scaled equations
of free thermal convection. We shall soon look at its interpretations,
which are not as straightforward as for the Reynolds and Peclet numbers.

The above
choice of :math:`U` in terms of :math:`\Delta T` results in :math:`\gamma` equal to unity:

.. math::
         \gamma = \frac{g\beta L\Delta T }{U^2} =
        \frac{g\beta L\Delta T }{g\beta L \Delta T} = 1{\thinspace .}

.. index:: Peclet number

The Peclet number can also be rewritten as

.. math::
         \hbox{Pe}= \frac{\varrho c UL}{\kappa } = \frac{\mu c}{\kappa}
        \frac{\varrho UL}{\mu}
        = \hbox{Pr}\hbox{Re}^{-1} = \hbox{Pr}\hbox{Re}_T,

where Pr is the Prandtl number, defined as

.. math::
         \hbox{Pr} = \frac{\mu c}{\kappa}{\thinspace .}

The Prandtl number is the ratio of the momentum diffusivity (kinematic viscosity) and the thermal diffusivity. Actually, analysis show that Pr reflects the ratio of the thickness of the thermal and velocity boundary layers: when :math:`\hbox{Pr}=1`, these layers
coincide, while :math:`\hbox{Pr}\ll 1` implies that the thermal layer is much
thicker than the velocity boundary layer, and vice versa for :math:`\hbox{Pe}\gg 1`.

.. index:: Eckert number

The :math:`\delta` parameter is in free convection replaced by a combination
of the Eckert number (Ec) and the Reynolds number. We have that

.. math::
         \hbox{Ec} = \frac{U^2}{c\Delta T} = \delta\hbox{Re}_T,

and consequently

.. math::
         \delta = \hbox{Ec}\hbox{Re}_T^{-1}{\thinspace .}

Writing

.. math::
         \hbox{Ec} = \frac{\varrho_0U^2}{\varrho_0c\Delta T},

shows that the Eckert number can be interpreted as the ratio of
the kinetic energy of the flow and the thermal energy.

We use Ga instead of Re in the momentum equations and also instead of
Pe in the energy equation (recall that :math:`\hbox{Pe} = \hbox{Pr}\hbox{Re}
= \hbox{Pr}\hbox{Re}_T=\hbox{Pr}\hbox{Gr}^{-1/2}`). The resulting
scaled system becomes

.. _Eq:scale:fluid:free_convection:eq:momentum_TB1:

.. math::
   :label: scale:fluid:free_convection:eq:momentum_TB1
        
        \frac{\partial \bar\boldsymbol{u}}{\partial \bar t} +
        \bar \boldsymbol{u}\cdot\bar \nabla\bar\boldsymbol{u}
        = -\bar\nabla \bar p + \hbox{Gr}^{-1/2}\bar \nabla^2\bar \boldsymbol{u}
        - \hbox{Fr}^{-2}\boldsymbol{k}  + \bar T \boldsymbol{k},
        
        

.. _Eq:scale:fluid:free_convection:eq:cont_TB1:

.. math::
   :label: scale:fluid:free_convection:eq:cont_TB1
          
        \bar\nabla\cdot\bar\boldsymbol{u}  = 0,
        
        

.. _Eq:scale:fluid:free_convection:eq:energy_TB1:

.. math::
   :label: scale:fluid:free_convection:eq:energy_TB1
          
        \hbox{Gr}^{1/2}\left(\frac{\partial \bar T}{\partial \bar t} +
        \bar\boldsymbol{u}\cdot\bar\nabla \bar T\right)
        = \hbox{Pr}^{-1}
        \bar \nabla^2 \bar T + 2\hbox{Ec}\hbox{Re}_T^{-1}
        \bar\varepsilon_{ij}\bar\varepsilon_{ij}{\thinspace .}
        
        

We realize that in free convection, the Grashof number plays the same
role as the Reynolds number in the momentum equation. In particular,
it turns out that Gr governs the transition between laminar and
turbulent flow.  For example, the transition to turbulence occurs in
the range :math:`10^8 < \hbox{Gr} < 10^9` for free convection from vertical
flat plates.  Gr is normally interpreted as a dimensionless number
expressing the ratio of buoyancy forces and viscous forces.

Recall that the scaling leading to the Grashof number is based on an
estimate of :math:`U` from a balance of the convective and the buoyancy
terms. When the viscous term dominates over convection, we need a
different estimate of :math:`U`, since in this case, the viscous force
balances the buoyancy force:

.. math::
         \mu\nabla^2\boldsymbol{u} \sim \varrho_0g\beta\Delta T\quad
        \Rightarrow\quad \mu U/L^2 \sim \varrho_0g\beta\Delta T,

This similarity suggests the scale

.. math::
         U = \frac{g\beta L^2 \Delta T}{\nu}{\thinspace .}

Now,

.. math::
         \frac{|\varrho_0\boldsymbol{u}\cdot\nabla\boldsymbol{u}|}{|\mu\nabla^2\boldsymbol{u}|} = \frac{UL}{\nu}
        = \frac{g\beta L^3 \Delta T}{\nu} = \hbox{Gr}{\thinspace .}

The result means that :math:`\hbox{Gr}^{1/2}` measures the ratio of convection and
viscous forces when convection dominates, but Gr measures this ratio when
viscous forces dominate.

[**hpl 22**: Normally, convection dominates in free convection!]

[**hpl 23**: Is it not so that Ra is interesting primarily in horizontal layers? Could appear naturally when scaling simplified equations?]

The product of Gr and Pr is the Rayleigh number,

.. math::
        
        \hbox{Ra} = \frac{g\beta L^3\Delta T\varrho_0 c}{\nu\kappa},
        

since

.. math::
        
        \hbox{Gr} \hbox{Pr} = \hbox{Re}_T^2\hbox{Pr} =
        \frac{g\beta L^3 \Delta T}{\nu^2}\frac{\mu c}{\kappa} =
        \frac{g\beta L^3 \Delta T\varrho_0 c}{\nu\kappa} =
        \hbox{Ra}{\thinspace .}
        

[**hpl 24**: Need an example using Ra.]

Heat transfer at boundaries
---------------------------

.. index:: Nusselt number

A common boundary condition, modeling heat transfer to/from the
surroundings is

.. _Eq:scale:fluid:free_convection:fluxcond:

.. math::
   :label: scale:fluid:free_convection:fluxcond
        
        -\kappa\frac{\partial T}{\partial n} = h_T(T - T_s),
        
        

where :math:`\partial/\partial n` means derivative in the normal direction
(:math:`\boldsymbol{n}\cdot\nabla`), :math:`h_T` is an experimentally determined
heat transfer coefficient, and :math:`T_s` is the temperature of
the surroundings. Scaling :eq:`scale:fluid:free_convection:fluxcond`
leads to

.. math::
         -\frac{\kappa\Delta t}{L}\frac{\partial \bar T}{\partial \bar n} = h_T(\Delta T \bar T + T_0 - T_s),

and further to

.. math::
         \frac{\partial \bar T}{\partial \bar n} =
        \frac{h_TL}{\kappa}(\bar T + \frac{T_s - T_0)}{\Delta T}
        = \hbox{Nu}(\bar T - \bar T_s),
        

where the Nusselt number is defined by

.. math::
         \hbox{Nu} = \frac{h_TL}{\kappa},

and :math:`\bar T_s` is simply the dimensionless surrounding temperature,

.. math::
         \bar T_s = \frac{T_s - T_0}{\Delta T}{\thinspace .}

Heat transfer is a huge engineering
field with lots of experimental investigations
that are summarized by curves relating various dimensionless numbers
such as Gr, Pr, and Nu.

.. _scale:bidomain:

The bidomain model in electrophysiology
=======================================

The mechanical functioning of the heart is crucially dependent on
correct electric signal propagation through the heart tissue.
A widely used mathematical
model for the electric signal propagation is the bidomain equations:

.. _Eq:scale:bidomain:eqv:

.. math::
   :label: scale:bidomain:eqv
        
        \chi C_m\frac{\partial v}{\partial t} =
        \nabla\cdot( M_i\nabla v) + \nabla\cdot (M_i\nabla u_e) - \chi I_{\rm{ion}}
        - \chi I_{\rm{app}},
        
        

.. _Eq:scale:bidomain:equ_e:

.. math::
   :label: scale:bidomain:equ_e
          
        0 = \nabla\cdot( M_i\nabla v) + \nabla\cdot ((M_i + M_e)\nabla u_e){\thinspace .}
        
        

These PDEs are posed in a spatial domain :math:`H` for :math:`t\in (0, T]`. The boundary
conditions are of Neumann type, and we drop these from the discussion.
The initial condition is typically :math:`u_e=v=0`.

The symbols in these PDEs have the following meaning:
:math:`u_e` is the extracellular electric potential,
:math:`v` is the transmembrane potential (difference between the extracellular
and intracellular potential),
:math:`C_m` is the capacitance of the cell membrane,
:math:`\chi` is a membrane area to cell volume ratio,
:math:`M_i` is a electric conductivity tensor for the intracellular space,
:math:`M_e` is a electric conductivity tensor for the extracellular space,
:math:`I_{\rm{ion}}` is the ionic current across the cell membrane, and
:math:`I_{\rm{app}}` is an externally applied current.

The PDE system is driven by :math:`I_{\rm{ion}} + I_{\rm{app}}`, and models
for these source terms consist of a system of ODEs at each point
in the domain. The simplest relevant ODE system is the FitzHugh-Nagumo
model:

.. _Eq:scale:bidomain:eqFHN_v:

.. math::
   :label: scale:bidomain:eqFHN_v
        
        C_m\frac{dv}{dt}  = - I_{\rm{ion}} - I_{\rm{app}},
        
        

.. _Eq:scale:bidomain:eqFHN_Iion:

.. math::
   :label: scale:bidomain:eqFHN_Iion
          
        I_{\rm{ion}} = A(v-v_r)(v - v_m)(v - v_p) + Bw,
        
        

.. _Eq:scale:bidomain:eqFHN_w:

.. math::
   :label: scale:bidomain:eqFHN_w
          
        \frac{dw}{dt} = -c_1w + c_2v + c_3,
        
        

where :math:`A`, :math:`v_m`, :math:`B`, :math:`c_1`, :math:`c_2`, and :math:`c_3` are specified constants.
[**hpl 25**: Keyner and Sneyd have a constant in the equation for :math:`w`, in both the unscaled and scaled versions, while The Bible has not.]
More complicated ODE systems for the cell dynamics may have up to a
hundred unknowns
and a correspondingly large collection of parameters.

Dimensionless independent variables are introduced by

.. math::
         \bar x = \frac{x}{L},\quad
        \bar y = \frac{y}{L},\quad \bar z = \frac{z}{L},\quad
        \bar t = \frac{t}{t_c},

where :math:`L` is the characteristic length scale, and :math:`t_c` is the
characteristic time scale. Dimensionless dependent variables are
expressed as

.. math::
         \bar v = \frac{v-v_r}{v_p-v_r},\quad \bar u = \frac{u_e}{u_c}, \quad \bar w =
        \frac{w}{w_c}{\thinspace .}

Here, :math:`v_r` is the resting potential, and :math:`v_p` is the peak potential.
The scaling of :math:`v` ensures :math:`\bar v\in [0,1]`. We introduce the symbol
:math:`\Delta v = v_p-v_r` to save space in the formulas: :math:`\bar v = (v-v_r)/\Delta v`.
The scale for :math:`u_e` is :math:`u_c`, and :math:`w_c` is a scale for :math:`w`, both to be
determined either from simplicity of the equations or from available analysis of
their magnitudes.

The variable tensor coefficients :math:`M_i` and :math:`M_e` depend on the spatial
coordinates and are also scaled:

.. math::
         \bar M_i = \frac{M_i}{M_c},\quad \bar M_e = \frac{M_e}{M_c}{\thinspace .}

For simplicity, we have chosen a common scale :math:`M_c`, but the two tensors
might employ difference scales. We may typically choose :math:`M_c` as a norm of
:math:`M_i + M_e`, e.g., the maximum value.

Inserting the dimensionless variables in the equations, we achieve the system

.. math::
        
        \frac{\Delta v}{t_c}\chi C_m\frac{\partial \bar v}{\partial \bar t} &=
        \frac{M_c\Delta v }{L^2}\nabla\cdot( \bar M_i\bar\nabla\bar v) +
        \frac{M_c u_c}{L^2}\nabla\cdot (\bar M_i\bar \nabla \bar u) -\\ 
        &\quad
        \chi A
        \Delta v \bar v
        (v_r  - v_m + \Delta v \bar v)
        (v_r - v_p + \Delta v \bar v)-\\ 
        &\quad Bw_c\bar w
        - \chi I_{\rm{app}},
        \\ 
        0 &= \frac{M_c\Delta v }{L^2}\bar \nabla\cdot( \bar M_i\bar \nabla \bar v) + \frac{M_cu_c}{L^2}\nabla\cdot ((\bar M_i + \bar M_e)\bar \nabla \bar u),\\ 
        \frac{\Delta v}{t_c}C_m\frac{d\bar v}{d\bar t} & = -
        A
        \Delta v \bar v
        (v_r  - v_m + \Delta v \bar v)
        (v_r - v_p + \Delta v \bar v)-\\ 
        &\quad Bw_c\bar w - I_{\rm{app}},
        \\ 
        \frac{w_c}{t_c}\frac{d\bar w}{d\bar t} &= -c_1w_c\bar w +
        c_2(v_r + \Delta v \bar v) + c_3{\thinspace .}
        

Multiplying the equations by appropriate factors leads to equations with
dimensionless terms only:

.. math::
        
        \frac{\partial \bar v}{\partial \bar t} &=
        \frac{t_cM_c}{\chi C_mL^2}\nabla\cdot( \bar M_i\bar\nabla\bar v) +
        \frac{t_cM_c u_c}{\Delta v \chi C_mL^2}\nabla\cdot (\bar M_i\bar \nabla \bar u) -\\ 
        &\quad
        \frac{t_cA}{C_m\Delta v }
        \Delta v \bar v
        (v_r  - v_m + \Delta v \bar v)
        \Delta v(\bar v - 1)-\\ 
        &\quad \frac{t_cBw_c}{\chi C_m\Delta v }\bar w
        - \frac{t_c I_{\rm{app}}}{C_m\Delta v },
        \\ 
        0 &= \bar \nabla\cdot( \bar M_i\bar \nabla \bar v) + \frac{u_c}{\Delta v}\nabla\cdot ((\bar M_i + \bar M_e)\bar \nabla \bar u),\\ 
        \frac{d\bar v}{d\bar t} & = -
        \frac{t_c A}{C_m\Delta v }
        \Delta v \bar v
        (v_r  - v_m + \Delta v \bar v)
        \Delta v(\bar v - 1)-\\ 
        &\quad \frac{t_c Bw_c}{C_m\Delta v }\bar w
        - \frac{t_c}{C_m\Delta v }I_{\rm{app}},
        \\ 
        \frac{d\bar w}{d\bar t} &= -t_cc_1\bar w +
        \frac{t_cc_2}{w_c}(v_r + \Delta v \bar v) + \frac{t_cc_3}{w_c}{\thinspace .}
        

The length scale is given as the size of the domain, in this case the
diameter of the heart. The time scale is less obvious to choose.
The PDEs are of diffusion nature, and the relevant time scale is related
to the time it takes to diffuse the signal. On the other hand, the ODE
system, in general, may feature many different time scales. Which time
scale to choose for :math:`t_c` depends on whether one is interested in
fast time scales for some components in the ODE system or in the
(anticipated) slower diffusion scale of the PDEs. For now we choose
the time scale based on diffusion. From previous examples in
the section :ref:`sec:scale:diffu:homo1D`, we therefore
set the coefficient in front of the diffusion term to unity, here

.. math::
         \frac{t_cM_c}{\chi C_mL^2} = 1\quad\Rightarrow\quad t_c = \frac{\chi C_mL^2}{M_c}{\thinspace .}

A natural dimensionless variable then arises from the second diffusion
term:

.. math::
         \alpha = \frac{u_c}{\Delta v}{\thinspace .}

The choice :math:`u_c=\Delta v` will of course remove the need for this dimensionless
variable, but we include the freedom to have :math:`u_c` as
some specified characteristic size of :math:`u_e`.

The final dimensionless system becomes

.. _Eq:_auto59:

.. math::
   :label: _auto59
        
        \frac{\partial \bar v}{\partial \bar t} =
        \nabla\cdot( \bar M_i\bar\nabla\bar v) +
        \alpha\nabla\cdot (\bar M_i\bar \nabla \bar u) -
        
        

.. _Eq:_auto60:

.. math::
   :label: _auto60
          
        \quad
        \beta
        \bar v
        (J_1 +  \bar v)
        (\bar v - 1) - \gamma\bar w - \delta,
        
        
        

.. _Eq:_auto61:

.. math::
   :label: _auto61
          
        0 = \bar \nabla\cdot( \bar M_i\bar \nabla \bar v) +
        \alpha\nabla\cdot ((\bar M_i + \bar M_e)\bar \nabla \bar u),
        
        

.. _Eq:_auto62:

.. math::
   :label: _auto62
          
        \frac{d\bar v}{d\bar t}  = -
        \beta
        \bar v
        (J_1 +  \bar v)
        (\bar v -1)- \gamma\bar w - \delta,
        
        
        

.. _Eq:_auto63:

.. math::
   :label: _auto63
          
        \frac{d\bar w}{d\bar t} = -K_1\bar w +
        K_2\bar v + K_3{\thinspace .}
        
        

There are eight dimensionless variables in the above equations:

.. _Eq:_auto64:

.. math::
   :label: _auto64
        
        \alpha = \frac{u_c}{\Delta v},
        
        

.. _Eq:_auto65:

.. math::
   :label: _auto65
          
        \beta  = \frac{\chi AL^2\Delta v^2}{M_c},
        
        

.. _Eq:_auto66:

.. math::
   :label: _auto66
          
        \gamma = \frac{Bw_cL^2}{M_c\Delta v },
        
        

.. _Eq:_auto67:

.. math::
   :label: _auto67
          
        \delta = \frac{\chi L^2 I_{\rm{app}}}{M_c\Delta v },
        
        

.. _Eq:_auto68:

.. math::
   :label: _auto68
          
        J_1 = \frac{v_r-v_m}{\Delta v},
        
        

.. _Eq:_auto69:

.. math::
   :label: _auto69
          
        J_2 = \frac{v_r}{\Delta v},
        
        

.. _Eq:_auto70:

.. math::
   :label: _auto70
          
        K_1 = \frac{\chi C_m L^2c_1}{M_c},
        
        

.. _Eq:_auto71:

.. math::
   :label: _auto71
          
        K_2  = \frac{\chi C_m L^2\Delta v^2c_2}{M_c w_c},
        
        

.. _Eq:_auto72:

.. math::
   :label: _auto72
          
        K_3 = \frac{\chi C_mL^2(c_3 + c_2 v_r\Delta v)}{M_cw_c}{\thinspace .}
        
        

Since :math:`w` is just a help variable without any physiological interpretation,
we can choose its scale :math:`w_c` freely to simplify the expressions.
For example, we can fit :math:`w_c` to make :math:`K_2=1`, :math:`K_3=1`, or :math:`\gamma=1`.

Some of these dimensionless numbers have straightforward interpretations:
:math:`\alpha` is the ratio of the span in the two electric potentials;
:math:`\delta` is ratio of the source term and the time-derivative term of :math:`v`,
or the source term and the diffusion term in :math:`v`.
The rest have fixed values:
:math:`J_1` and :math:`J_2` have well-established values from measurements,
while :math:`\beta`, :math:`\gamma`, :math:`K_1`, :math:`K_2`, and :math:`K_3` contain empirically
fitted constants with known values, combined with known scales and
other known physical parameters.

[**hpl 26**: It is unclear what the gain really is, besides having primary variables of unit size. Since there are so many empirical constants, the number of dimensionlesss variables blows up, and instead of gettting more insight into the dynamics through these variables, they are just fixed numbers.]

Two-phase porous media flow
===========================

Exercises: single-phase flow, with and without thermal effects.

The Euler equations of gas dynamics
===================================

Exercises
=========

.. --- begin exercise ---

.. _sec:scale:exer:US2SI1:

Exercise 1: Perform unit conversion
-----------------------------------

Density (mass per volume: :math:`[\hbox{ML}^{-3}]`) of water is
given as 1.05 ounce per fluid ounce. Use the ``PhysicalQuantity`` object
to convert to :math:`\hbox{kg\,m}^{-3}`.

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

Filename: ``density_conversion``.

.. --- end exercise ---

.. --- begin exercise ---

.. _sec:scale:exer:ball_y:

Problem 2: Scale a simple formula
---------------------------------

The height :math:`y` of a body thrown up in the air is given by

.. math::
         y = v_0t - \frac{1}{2}gt^2,

where :math:`t` is time, :math:`v_0` is the initial velocity of the body at :math:`t=0`,
and :math:`g` is the acceleration of gravity. Scale this formula. Use
two choices of the characteristic time: the time it takes to reach the
maximum :math:`y` value and the time it takes to return to :math:`y=0`.

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

Filename: ``scaled_vertical_motion``.

.. --- end exercise ---

.. --- begin exercise ---

.. _sec:scale:exer:decay:cooling:osc:

Exercise 3: Perform alternative scalings
----------------------------------------

The problem in the section :ref:`scale:decay:cooling:osc` applies a
temperature scaling

.. math::
         \bar T = \frac{T-T_0}{T_m-T_0},

which is not always suitable.

**a)**
Consider the case :math:`T_0=T_m` and the fact that :math:`|T_m-T_0|` does not
represent the characteristic temperature scale since it
collapses to zero. Formulate a suitable
scaling in this case. The figure below corresponds to :math:`T_m=25` C,
:math:`T_0=24.9` C, and :math:`a=2.5` C. We clearly see that :math:`\bar T` is
not of size unity.

.. figure:: osc_cooling_wrong_scale.png
   :width: 500

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

**b)**
Consider the case where :math:`a` is much larger than :math:`|T_m-T_0|`.
What is an appropriate scaling of the temperature?

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

.. --- end exercise ---

.. --- begin exercise ---

.. _sec:scale:exer:ball_y_wdrag:

Problem 4: Scale a nonlinear ODE
--------------------------------

The velocity :math:`v(t)`
of a body moving vertically through a fluid in the gravity field,
with fluid drag and buoyancy, is governed by ODE

.. math::
         mv' = -\frac{1}{2}C_D\varrho A |v|v - mg + \varrho V g,\quad v(0)=v_0,

where :math:`t` is time, :math:`m` is the mass of the body, :math:`C_D` is a drag coefficient,
:math:`\varrho` is the density of the fluid, :math:`A` is the cross-sectional area
perpendicular to the motion, :math:`g` is the acceleration of gravity,
and :math:`V` is the volume of the body. Scale this ODE.

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

Filename: ``scaled_vertical_motion_with_drag``.

.. --- end exercise ---

.. --- begin exercise ---

.. _sec:scale:exer:decay:jump:

Exercise 5: Implement a scaled model with jump
----------------------------------------------

Make software for the problem in the section :ref:`sec:scale:decay:jump`
so that you can produce Figure :ref:`sec:scale:decay:jump:fig`.

.. --- begin hint in exercise ---

**Hint.**
Follow the ideas for software in the section :ref:`sec:scale:decay:body`: use the
`decay_vc.py <http://tinyurl.com/o8pb3yy/decay_vc.py>`__ module as computational
engine and modify the
`falling_body.py <http://tinyurl.com/o8pb3yy/falling_body.py>`__ code.

.. --- end hint in exercise ---

Filename: ``decay_jump``.

.. --- end exercise ---

.. --- begin exercise ---

.. _sec:scale:exer:decay:cooling:

Exercise 6: Implement a scaled model for cooling
------------------------------------------------

Make software for the unscaled problem :ref:`(5.16) <Eq:scale:decay:cooling:model>`
where :math:`T_s` can be a function of time.
Use this implementation to compute the solution of the
scaled problem :ref:`(5.23) <Eq:scale:decay:cooling:model:scaled>`.

.. --- begin hint in exercise ---

**Hint.**
You may use the general software `decay_vc.py <http://tinyurl.com/o8pb3yy/decay_vc.py>`__
for computing with the cooling model.
See the section :ref:`sec:scale:decay:body` for more ideas.

.. --- end hint in exercise ---

Filename: ``decay_cooling1``.

.. --- end exercise ---

.. --- begin exercise ---

.. _scale:decay:exer:decay:step:

Problem 7: Scale variable coefficients
--------------------------------------

The goal of this exercise is to scale the problem
:math:`u^{\prime}(t) = -a(t)u(t) + b(t)`, :math:`u(0)=I`, when

.. math::
        
        a(t) =\left\lbrace\begin{array}{ll}
        Q, & t < s,\\ 
        Q - A, & t\geq s,\end{array}\right.
        \quad b = \left\lbrace\begin{array}{ll}
        \gamma t, & t < s,\\ 
        0, & t\geq s,\end{array}\right.
        

Here, :math:`Q,A,\gamma >0`.
Filename: ``decay_varcoeff``.

.. --- end exercise ---

.. --- begin exercise ---

.. _scale:decay:exer:cooling:Ts:

Exercise 8: Alternative scalings of a cooling model
---------------------------------------------------

Scale the model :ref:`(5.16) <Eq:scale:decay:cooling:model>`, with :math:`T_s`
given as in :ref:`(5.22) <Eq:scale:decay:cooling:Tst>`, using two alternative
scalings of :math:`T`: :ref:`(5.20) <Eq:scale:decay:cooling:Tbar2>` and
the simpler :math:`\bar T = T/T_0`. Does the type of scaling impact how
many dimensionless parameters we end up with?
Filename: ``decay_cooling2``.

.. --- end exercise ---

.. --- begin exercise ---

.. _scale:decay:exer:nonlin:logistic2:

Exercise 9: Alternative scalings of a cooling model
---------------------------------------------------

Implement the scaled model :ref:`(5.29) <Eq:sec:scale:decay:nonlinear:model1:scaled>`
and produce a plot with curves corresponding to various values of
:math:`\alpha` and :math:`p` to summarize how :math:`\bar u(\bar t)` look like.

.. --- begin hint in exercise ---

**Hint.**
A centered Crank-Nicolson-style
scheme for :ref:`(5.29) <Eq:sec:scale:decay:nonlinear:model1:scaled>`
can use an old time value for the nonlinear coefficient:

.. math::
         \frac{\bar u^{n+1} - \bar u^n}{\Delta t} =
        (1 - \alpha\bar u^n)^p\frac{1}{2}(\bar u^n + \bar u^{n+1}){\thinspace .}

.. --- end hint in exercise ---

Filename: ``growth``.

.. --- end exercise ---

.. --- begin exercise ---

.. _scale:vib:exer:projectile:

Exercise 10: Scale projectile motion
------------------------------------

We have the following mathematical model for the motion of a projectile
in two dimensions:

.. math::
         m\ddot\boldsymbol{x} + \frac{1}{2}C_D\varrho A|\dot\boldsymbol{x}|\dot\boldsymbol{x}
        = -mg\boldsymbol{j},\quad \boldsymbol{x}(0)=\boldsymbol{0},\ \dot\boldsymbol{x}(0)=v_0\cos\theta\boldsymbol{i} +
        v_0\sin\theta\boldsymbol{j}{\thinspace .}

Here, :math:`m` is the mass of the projectile, :math:`\boldsymbol{x}=x\boldsymbol{i} + y\boldsymbol{j}` is
the position vector of the projectile, :math:`\boldsymbol{i}` and :math:`\boldsymbol{j}`
are unit vectors along the :math:`x` and :math:`y` axes, respectively,
:math:`\ddot\boldsymbol{x}` and :math:`\dot\boldsymbol{x}` is the second- and first-order
time derivative of :math:`\boldsymbol{x}(t)`, :math:`C_D` is a drag coefficient
depending on the shape of the projectile (can be taken as 0.4 for a sphere),
:math:`\varrho` is the density of the air, :math:`A` is the cross section area
(can be taken as :math:`\pi R^2` for a sphere of radius :math:`R`), :math:`g` is gravity,
:math:`v_0` is the initial velocity of the projectile in a direction that makes
the angle :math:`\theta` with the ground.

**a)**
Neglect the air resistance term proportional to :math:`\dot\boldsymbol{x}` and solve
analytically for :math:`\boldsymbol{x}(t)`.

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

**b)**
Make the model for projectile motion with air resistance non-dimensional.
Use the maximum height from the simplification in a) as length scale.

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

**c)**
Make the model dimensionless again, but this time by demanding that
the scaled initial velocity is unity in :math:`x` direction.

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

**d)**
A soccer ball has diameter :math:`R=11` cm and mass 0.43 kg, the density of air
is 1.2 :math:`\hbox{kg}\hbox{m}^{-3}`, a soft kick has velocity 10 km/h,
while a hard kick may have 120 km/h. Estimate the dimensionless parameter
in the scaled problem for a soft and a hard kick with
:math:`\theta` corresponding to 30 degrees. Solve the scaled
differential equation for these values and plot the trajectory (:math:`y` versus
:math:`x`) for the two cases.

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

Filename: ``projectile``.

.. --- end exercise ---

.. --- begin exercise ---

.. _scale:decay:exer:predpray:

Problem 11: Scale a predator-pray model
---------------------------------------

.. index::
   single: Lotka-Volterra, predator-pray model

The evolution of animal populations with a predator and a pray (e.g.,
lynx and hares, or foxes and rabbits) can be described by the
Lotka-Volterra ODE system

.. _Eq:scale:decay:exer:predpray:eqH:

.. math::
   :label: scale:decay:exer:predpray:eqH
        
        H^{\prime} = H(a - bL),
        
        

.. _Eq:scale:decay:exer:predpray:eqL:

.. math::
   :label: scale:decay:exer:predpray:eqL
          
        L^{\prime} = L(dH - c),
        
        

.. _Eq:_auto73:

.. math::
   :label: _auto73
          
        H(0)=H_0,
        
        

.. _Eq:_auto74:

.. math::
   :label: _auto74
          
        L(0)=L_0{\thinspace .}
        
        

Here, :math:`H` is the number of animals of the pray (say hares)
and :math:`L` is the corresponding measure of the predator population (say lynx).
There are six parameters: :math:`a`, :math:`b`, :math:`c`, :math:`d`, :math:`H_0`, and :math:`L_0`.

The terms has the following meanings:

 * :math:`aH` is the exponential
   population growth of :math:`H` due to births and deaths and is governed by
   the access to nutrition,

 * :math:`-bHL` is the loss of prays because they are eaten by predators,

 * :math:`dHL` is the increase of prays because they eat predators (but only
   a fraction of the eaten prays, :math:`bHL`, contribute to population growth
   of the predator and therefore :math:`d < b`),

 * :math:`-cL` is the exponential decay in the predator population because of
   deaths (the increase is modeled by :math:`dHL`).

Dimensionless independent and dependent variables are introduced as usual
by

.. math::
         \bar t = \frac{t}{t_c},\quad
        \bar H = \frac{H}{H_c},\quad \bar L = \frac{L}{L_c},
        

where :math:`t_c`, :math:`H_c`, and :math:`L_c` are scales to be determined. Inserted
in the ODE problem we arrive at

.. _Eq:scale:decay:exer:predpray:eqH:s:

.. _Eq:scale:decay:exer:predpray:eqH:s:

.. math::
   :label: scale:decay:exer:predpray:eqH:s
        
        \frac{H_0}{t_c}\frac{d\bar H}{d\bar t} = H_0\bar H(a - bH_0\bar L),
        
        

.. _Eq:scale:decay:exer:predpray:eqH:s:

.. _Eq:scale:decay:exer:predpray:eqH:s:

.. math::
   :label: scale:decay:exer:predpray:eqH:s
          
        \frac{H_0}{t_c}\frac{d\bar L}{d\bar t} = H_0\bar L(dH_0\bar H - c),
        
        

.. _Eq:scale:decay:exer:predpray:eqH0:s:

.. math::
   :label: scale:decay:exer:predpray:eqH0:s
          
        H_c\bar H(0) = H_0,
        
        

.. _Eq:scale:decay:exer:predpray:eqL0:s:

.. math::
   :label: scale:decay:exer:predpray:eqL0:s
          
        L_c\bar H(0) = L_0{\thinspace .}
        
        

**a)**
Consider first a simple, intuitive scaling of :math:`H` and :math:`L` based on
initial conditions :math:`H_c=H_0`
and :math:`L_c=H_c`. This means that :math:`\bar H` starts out at unity and :math:`\bar L`
starts out as the fraction :math:`L_0/H_0`. Find a time scale and identify
dimensionless parameters in the scaled ODE problem.

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

**b)**
Try a different scaling where the aim is to adjust the scales such that
the ODEs become as simple as possible, i.e, have as few dimensionless
parameters as possible. Compare with the scaling in a).

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

**c)**
A more mathematical approach to determining suitable scales for :math:`H` and :math:`L`
consists in finding the stationary points :math:`(H,L)` of the ODE system,
where :math:`H^{\prime}=L^{\prime}=0`, and use such points as characteristic
sizes of the dependent variables. Show that :math:`H^{\prime}=L^{\prime}=0`
implies :math:`H=L=0` or :math:`L=a/b` and :math:`H=c/d`. Use :math:`H_c=a/b`, :math:`L_c=c/d`,
and find a time scale. Compare with the result in b).

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

Filename: ``predator_pray``.

.. --- end exercise ---

.. --- begin exercise ---

.. _scale:decay:exer:competing_species:

Problem 12: Scale a model for competing species
-----------------------------------------------

.. index::
   single: Lotka-Volterra, competing species model

Let :math:`N_1(t)` and :math:`N_2(t)` be the number of animals in two
competing species. A generalized Lotka-Volterra model
is based on a logistic growth of each specie and a predator-pray like
interaction (cf. |nbsp| :ref:`scale:decay:exer:predpray`):

.. _Eq:_auto79:

.. math::
   :label: _auto79
        
        \frac{dN_1}{dt} = r_1N_1\left( 1 - \frac{N_1}{M_1} - s_{12}\frac{N_2}{M_1}\right),
        
        

.. _Eq:_auto80:

.. math::
   :label: _auto80
          
        \frac{dN_2}{dt} = r_2N_2\left( 1 - \frac{N_2}{M_2} - s_{21}\frac{N_1}{M_2}\right),
        
        

where :math:`r_1`, :math:`r_2`, :math:`M_1`, :math:`M_2`, :math:`s_{12}`, and :math:`s_{21}` are given constants.
The initial conditions specify :math:`N_1` and :math:`N_2` at :math:`t=0`.
Find suitable scales and derive a dimensionless ODE problem.

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

Filename: ``competing_species``.

.. --- end exercise ---

.. --- begin exercise ---

.. _scale:decay:exer:sine:

Problem 13: Find the period of sinusoidal signals
-------------------------------------------------

**a)**
Plot the function

.. math::
         u(t) = A\sin(\omega t), 

for :math:`t\in [0, 8\pi/\omega]`. Choose :math:`\omega` and :math:`A`.

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

**b)**
The *period* :math:`P` of :math:`u` is the shortest distance between two peaks (where
:math:`u=A`). Show mathematically that

.. math::
         P = \frac{2\pi}{\omega}{\thinspace .}

Frequently, :math:`P` is also referred to as the *wave length* of :math:`u`.

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

**c)**
Plot the damped signal :math:`u(t)=e^{-at}\sin (\omega t)` over four periods
of :math:`sin(\omega t)`. Choose :math:`\omega`, :math:`A`, and :math:`a`.

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

**d)**
What is the period of :math:`u(t)=e^{-at}\sin (\omega t)`? We define the
period :math:`P` as the shortest distance between two peaks of the signal.

.. --- begin hint in exercise ---

**Hint.**
Use that :math:`v = p\cos(\omega t) + q\sin (\omega t)` can be rewritten
as :math:`v = B\cos(\omega t - \phi)` with :math:`B=\sqrt{p^2 + q^2}` and
:math:`\phi = \tan^{-1}(p/q)`. Use such a rewrite of :math:`u'` to find the peaks of
:math:`u` and then the period.

.. --- end hint in exercise ---

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

Filename: ``sine_period``.

.. Closing remarks for this Problem

Remarks          (1)
~~~~~~~~~~~~~~~~~~~~

The *frequency* is the number of up and down cycles in one unit time.
Since there is one cycle in a period :math:`P`, the frequency is :math:`f =1/P`,
measured in Hz.
The *angular frequency* :math:`\omega` is then :math:`\omega = 2\pi/P = 2\pi f`.

.. --- end exercise ---

.. --- begin exercise ---

.. _sec:scale:exer:pendulum:

Problem 14: Scale the pendulum equation
---------------------------------------

The equation for a so-called simple pendulum with a mass :math:`m` at the end is

.. _Eq:_auto81:

.. math::
   :label: _auto81
        
        mL\ddot\theta + mg\sin\theta = 0,
        
        

where :math:`\theta(t)` is the angle with the vertical, :math:`L` is the length of
the pendulum, and :math:`g` is the acceleration of gravity.

A physical pendulum with moment of inertia :math:`I` is governed by
a similar equation,

.. _Eq:_auto82:

.. math::
   :label: _auto82
        
        I\ddot\theta + mgL\sin\theta = 0{\thinspace .}
        
        

Both equations have the initial conditions :math:`\theta(0)=\Theta` and
:math:`\theta'(0)=0` (start at rest).

Use :math:`\theta` as dimensionless unknown, find a proper time scale,
and scale both differential equations.

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

Filename: ``pendulum``.

.. --- end exercise ---

.. --- begin exercise ---

.. _scale:vib:exer:Duffing:

Problem 15: Scale Duffing's equation
------------------------------------

Duffing's equation is a vibration equation with linear and cubic
spring terms:

.. math::
         mu'' + k_0u + k_1u^3 = 0,\quad u(0)=U_0,\ u'(0)=0{\thinspace .}

Scale this problem.

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

Filename: ``Duffing_eq``.

.. --- end exercise ---

.. --- begin exercise ---

.. _scale:vib:exer:stationary_Couette:

Problem 16: Scale a stationary Couette flow
-------------------------------------------

A fluid flows between two flat plates, with one plate at rest while
the other moves with velocity :math:`U_0`. This classical flow case is known as
stationary Couette flow.

**a)**
Directing the :math:`x` axis in the flow direction and letting :math:`y` be
a coordinate perpendicular to the walls, one can assume that
the velocity field simplifies to :math:`\boldsymbol{u} = u(y)\boldsymbol{i}`.
Show from the Navier-Stokes equations that the boundary-value problem
for :math:`u(y)` is

.. math::
         u^{\prime\prime}(u) = 0,\quad u(0)=0,\ u(H)=U_0{\thinspace .}

We have here assumed at :math:`y=0` corresponds to the plate at rest and
that :math:`y=H` represents the plate that moves. There are no pressure
gradients present in the flow.

**b)**
Scale the problem in a) and show that the result has no physical parameters
left in the model:

.. math::
         \frac{d^2\bar u}{d\bar y^2} = 0,\quad \bar u(0)=0,\ \bar u(1)=1{\thinspace .}

**c)**
We can compute :math:`\bar u(\bar y)` from one numerical simulation (or a
straightforward integration of the differential equation). Set up
the formula that finds :math:`u(y; H, u_0)` from :math:`\bar u(\bar y)` for any
values of :math:`H` and :math:`U_0`.

Filename: ``stationary_Couette``.

.. Closing remarks for this Problem

Remarks          (2)
~~~~~~~~~~~~~~~~~~~~

The problem for :math:`u` is a classical two-point boundary-value problem
in applied mathematics and arises in a number of applications, where
Couette flow is just one example. Heat conduction is another
example: :math:`u` is temperature, and the heat conduction equation for
an insulated rod reduces to :math:`u^{\prime\prime}=0` under stationary
conditions and no heat source.
Controlling the end :math:`x=0` at 0 degrees Celsius the other end :math:`x=L`
at :math:`U_0` degrees
Celsius, gives the same boundary conditions as in the above flow problem.
The scaled problem is of course the same whether we have flow of
fluid or heat.

.. --- end exercise ---

.. --- begin exercise ---

.. _scale:vib:exer:starting_Couette:

Problem 17: Scale a starting Couette flow
-----------------------------------------

A fluid is confined in a channel with two planar walls :math:`z=0` and :math:`z=H`.
The fluid is at rest. At time :math:`t=0` the upper wall is suddenly set in
motion with a velocity :math:`U\boldsymbol{i}`. We assume that the velocity is
directed along the :math:`x` axis: :math:`\boldsymbol{u} = u(x,z,t)\boldsymbol{i}`. From the equation of continuity, :math:`\nabla\cdot\boldsymbol{u} =0`, we get that :math:`\partial u/\partial x = 0` such
that :math:`\boldsymbol{u} = u(z,t)\boldsymbol{i}`. The boundary conditions are :math:`\boldsymbol{u}=0` at the lower
wall :math:`z=0` and :math:`\boldsymbol{u} = U\boldsymbol{i}` at the upper wall :math:`z=H`. Assume that the
pressure is constant everywhere and that there are no body forces.

**a)**
Start with the incompressible Navier-Stokes equations and the
assumption :math:`\boldsymbol{u} = u(z,t)\boldsymbol{i}`. Derive an initial-boundary value problem
for :math:`u(z,t)`. Scale the problem.

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

**b)**
Start with the dimensionless Navier-Stokes equations and use
the assumption :math:`\bar\boldsymbol{u} = \bar u(\bar z,\bar t)\boldsymbol{i}` to reduce
the problem. The resulting equation now contains a Reynolds
number, i.e., one more physical parameter than in a).
Why is this an inferior approach to scaling the problem?

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

**c)**
Can you construct a heat conduction problem that has the same solution
:math:`\bar u(\bar z,\bar t)` as in a)?

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

**d)**
Describe how the scaled problem in this exercise can be solved
by a program that solves the following diffusion problem with dimensions:

.. math::
        
        \frac{\partial u}{\partial t} &=
        {\alpha} \frac{\partial^2 u}{\partial z} + f(x,t),\\ 
        u(x,0) &= I(x),\\ 
        u(0,t) & =U_0(t),\\ 
        u(L,t) & =U_L(t){\thinspace .}
        

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

Filename: ``starting_Couette``.

.. --- end exercise ---

.. --- begin exercise ---

.. _scale:vib:exer:Couette_wpressure:

Exercise 18: Scale Couette flow with pressure gradient
------------------------------------------------------

Viscous fluid flow between two infinite flat plates :math:`z=0` and :math:`z=H`
is governed by

.. _Eq:_auto83:

.. math::
   :label: _auto83
        
        \mu u''(z) = -\beta
        
        

.. _Eq:_auto84:

.. math::
   :label: _auto84
          
        u(0) = 0,
        
        

.. _Eq:_auto85:

.. math::
   :label: _auto85
          
        u(H) = U_0{\thinspace .}
        
        

Here, :math:`u(z)` is the fluid velocity in :math:`x` direction (perpendicular to the
:math:`z` axis), :math:`\mu` is the dynamic viscosity of the fluid, :math:`\beta` is
a positive constant pressure gradient, and :math:`U_0` is the
constant velocity of the upper
plate :math:`z=H` in :math:`x` direction.

**a)**
Find the exact solution :math:`u(z)`. Point out how :math:`\beta` and :math:`U_0`
influence the magnitude of :math:`u`.

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

**b)**
Scale the problem.

.. removed !bsol ... !esol environment (because of the command-line option --without_solutions)

[**hpl 30**: Could extend to time-dependent case, but this will involve three time scales...]

Filename: ``Couette_wpressure``.

.. --- end exercise ---

.. --- begin exercise ---

.. _scale::exer:suggest:

Exercise 19: Suggestions...
---------------------------

Projects:

 * Poisson problem, membrane, see Nayfeh chapter 1, stationary and time

 * diffusion with oscillating :math:`f(x,t)`,
   oscillating pressure in tube (channel first)

 * Helmholtz

 * two metal pieces in contact

 * boundary layer fluid flow problem, with/without thermal effects

 * channel viscous flow: with and without Reynolds number (bad to
   have an extra parameter!)

 * Starting Couette flow and rod with fixed end temperatures

 * Fisher's equation

 * Vertical motion in the gravity field, two time scales, discuss

 * sliding box, see ``vib`` exercise

.. --- end exercise ---

