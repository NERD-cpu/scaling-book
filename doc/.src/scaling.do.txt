
!split
========= Dimensions and units =========
label{scale:dimunit}

idx{units}

A mechanical system undergoing one-dimensional damped vibrations can be
modeled by the equation

!bt
\begin{equation}
mu'' + bu' + ku = 0,
label{scale:dimunit:eq:u}
\end{equation}
!et
where $m$ is the mass of the system, $b$ is some damping coefficient,
$k$ is a spring constant, and $u(t)$ is the displacement of the
system.  This is an equation expressing the balance of three physical
effects: $mu''$ (mass times acceleration), $bu'$ (damping force), and
$ku$ (spring force).  The different physical quantities, such as $m$,
$u(t)$, $b$, and $k$, have all different *dimensions*, measured in
different *units*, but $mu''$, $bu'$, and $ku$ must all have the same
dimension, otherwise it would not make sense to add them (you will get
the same problem as when trying to add one banana, one apple, and one
orange).

======= Fundamental concepts =======

===== Base units and dimensions =====

idx{base unit}
idx{length}
idx{mass}
idx{time}


There are seven fundamental (SI) *base units* and corresponding
physical quantities:
meter (m) for length,
kilogram (kg) for mass,
second (s) for time,
kelvin (K) for temperature,
ampere (A) for electric current,
candela (cd) for luminous intensity,
mole (mol) for the amount of substance.

The dimension of length is written as [L], the dimension of mass is
[M], the dimension of time is [T], and the dimension of temperature is
$[\Theta]$ (the dimensions of the other base units are omitted in
this introduction). The dimension of a *derived unit* like velocity, which is
distance (length) divided by time, then becomes $[\hbox{LT}^{-1}]$.
The dimension of force, another derived unit, is the same as the
dimension of mass times acceleration, and hence the dimension of force is
$[\hbox{MLT}^{-2}]$.

Let us find the dimensions of the terms in (ref{scale:dimunit:eq:u}).
A displacement $u(t)$ has dimension [L]. The derivative $u'(t)$ is
change of displacement, which has dimension [L], divided by a time
interval, which has dimension [T], implying that the dimension of $u'$
is $\hbox{LT}^{-1}$. This results coincides with the interpretation of
$u'$ as velocity and the fact that velocity is defined as distance
([L]) per time ([T]).

Looking at (ref{scale:dimunit:eq:u}), and interpreting $u(t)$ as
displacement, we realize that the term $mu''$ (mass times
acceleration) has dimension $[\hbox{MLT}^{-2}]$.  The term $bu'$ must
have the same dimension, and since $u'$ has dimension
$[\hbox{LT}^{-1}]$, $b$ must have dimension $[\hbox{MT}^{-1}]$.
Finally, $ku$ must also have dimension $[\hbox{MLT}^{-1}]$, implying
that $k$ is a parameter with dimension $[\hbox{MT}^{-2}]$.

The unit of a physical quantity follows from the dimension expression.
For example, since velocity has dimension $\hbox{LT}^{-1}$ and length
is measured in m while time is measured in s, the unit for velocity
becomes m/s. Similarly, force has dimension $[\hbox{MLT}^{-2}]$ and
unit $\hbox{kg\, m/s}^2$. The $k$ parameter in
(ref{scale:dimunit:eq:u}) is measured in $\hbox{kg\,s}^{-2}$.

!bnotice Dimension of derivatives
The easiest way to realize the dimension of a derivative, is to express
the derivative as a finite difference. For a function $u(t)$ we have

!bt
\[ \frac{du}{dt} \approx \frac{u(t+\Delta t)- u(t)}{\Delta t},\]
!et
where $\Delta t$ is a small time interval.
If $u$ denotes a velocity, its dimension is $\hbox{[LT]}^{-1}$,
and $u(t+\Delta t) - u(t)$ gets the same dimension. The time
interval has dimension $\hbox{[T]}$, and consequently, the
finite difference gets the dimension $\hbox{[LT]}^{-2}$.
In general, the dimension of the derivative $du/dt$ is the dimension
of $u$ divided by the dimension of $t$.
!enotice


===== Dimensions of common physical quantities =====
label{scale:dimunit:tables}

idx{dimension of physical quantities}

Many derived quantities are measured in derived units. Force is one
example: Newton (N) is a derived unit for force, equal to $\hbox{kg\,
m/s}^2$. Another derived unit is Pascal (Pa) for pressure and stress,
i.e., force per area. The unit of Pa then equals $\hbox{N/m}^2$ or
$\hbox{kg/ms}^2$. Below are more derived quantities and their units.

|-----------------------------------------------------------|
| Name   | Symbol | Physical quantity | unit |
|----l------l-----------l-----------------l-----------------|
| radian | rad    | angle             |	1    |
| hertz  | Hz     | frequency	      | $\hbox{s}^{-1}$ |
| newton | N      | force, weight     | $\hbox{kg\, m/s}^2$ |
| pascal | Pa     | pressure, stress  | $\hbox{N/m}^2$ |
| joule  | J      | energy, work, heat|	Nm |
| watt   | W      | power             | J/s |
|-----------------------------------------------------------|

Some common physical quantities and their dimensions are listed next.

[hpl: TODO: Check the tables.]

|-----------------------------------------|
| Quantity  | relation | unit | dimension |
|----l----------l---------l---|----l------|
| stress     | force/area  | $\hbox{N/m}^2 = \hbox{Pa}$ | $[\hbox{M}\hbox{T}^{-2}\hbox{L}^{-1}]$ |
| pressure   | force/area  | $\hbox{N/m}^2 = \hbox{Pa}$ | $\hbox{M}\hbox{T}^{-2}\hbox{L}^{-1}]$ |
| density    | mass/volume | $\hbox{kg/m}^3$            | $[\hbox{ML}^{-3}]$ |
| strain     | displacement/length | 1                  | $[1]$ |
| Young's modulus     | stress/strain | $\hbox{N/m}^2 = \hbox{Pa}$ | $\hbox{M}\hbox{T}^{-2}\hbox{L}^{-1}]$ |
| Poisson's ratio     | transverse strain/axial strain | 1 | $[1]$ |
| Lame' parameters $\lambda$ and $\mu$ | stress/strain | $\hbox{N/m}^2 = \hbox{Pa}$ | $\hbox{M}\hbox{T}^{-2}\hbox{L}^{-1}]$ |
| moment (of a force) | distance $\times$ force  | Nm | $[\hbox{ML}^2\hbox{T}^{-2}]$ |
| impulse             | force $\times$ time     | $\hbox{Ns}$ | $[\hbox{MLT}^{-1}]$ |
| linear momentum     | mass $\times$ velocity | $\hbox{kg m/s}$ | $[\hbox{ML}\hbox{T}^{-1}]$ |
| angular momentum     | distance $\times$ mass $\times$ velocity | $\hbox{kg m}^2/\hbox{s}$ | $[\hbox{ML}^2\hbox{T}^{-1}]$ |
| work       | force $\times$ distance | $\hbox{Nm} = \hbox{J}$ | $[\hbox{ML}^2\hbox{T}^{-2}]$ |
| energy     | work                    |  $\hbox{Nm} = \hbox{J}$ | $[\hbox{ML}^2\hbox{T}^{-2}]$ |
| power      | work/time               | $\hbox{Nm/s} = \hbox{W}$ | $[\hbox{ML}^2\hbox{T}^{-3}]$ |
| heat       | work                    | J | $[\hbox{ML}^2\hbox{T}^{-2}]$ |
| heat flux  | heat rate/area          | $\hbox{Wm}^{-2}$ | $[\hbox{MT}^{-3}]$ |
| temperature            | base unit   | K |  $[\Theta]$ |
| heat capacity          | heat change/temperature change | J/K | $[\hbox{ML}^2\hbox{T}^{-2}\Theta^{-1}]$ |
| specific heat capacity | heat capacity/unit mass        | $\hbox{JK}^{-1}\hbox{kg}^{-1}$ | $[\hbox{L}^2\hbox{T}^{-2}\Theta^{-1}]$ |
| thermal conductivity   | heat flux/temperature gradient | $\hbox{Wm}^{-1}\hbox{K}^{-1}$ | $[\hbox{MLT}^{-3}\Theta^{-1}]$ |
| dynamic viscosity      | shear stress/velocity gradient | $\hbox{kgm}^{-1}\hbox{s}^{-1}$ | $[\hbox{ML}^{-1}T^{-1}]$ |
| kinematic viscosity    | dynamic viscosity/density      | $[\hbox{m}^2/\hbox{s}$ |  $\hbox{L}^2\hbox{T}^{-1}]$ |
| surface tension        | energy/area                    | $[\hbox{J/m}^2$ | $\hbox{MT}^{-2}]$ |
|-----------------------------------------|

=== Prefixes for units ===

Units often have "prefixes": "https://en.wikipedia.org/wiki/Metric_prefix".
For example, kilo is a prefix for 1000,
so kg is 1000 g. Similarly, GPa means giga pascal or $10^9$ Pa.

===== The Buckingham Pi theorem =====
label{scale:dimunit:Pi}

idx{Pi theorem}
idx{Buckingham Pi theorem}

Almost all texts on scaling has a treatment of the famous Buckingham Pi
theorem, which can be used to derive physical laws based on
unit compatibility rather than the underlying physical mechanisms.
This book has its focus on models where the physical mechanisms are
already expressed through differential equations. Nevertheless, the Pi
theorem has a remarkable position in the literature on scaling, and we
will occasionally make references to it so the theorem is briefly
discussed below.

The theorem itself is simply stated in two parts. First, if a problem
involves $n$ physical parameters in which $m$ independent unit-types
(such as length, mass etc.) appear, then the parameters can be
combined to exactly $n-m$ independent dimensionless numbers, referred
to as Pi's. Secondly, any unit-free relation between the original $n$
parameters can be transformed into a relation between the $n-m$
dimensionless numbers.  Such relations may be identities or
inequalities stating, for instance, whether or not a given effect is
negligible. Moreover, the transformation an equation set into
dimensionless form corresponds to expressing the coefficients, as well
as the free and dependent variables, in terms of Pi's.

At first glance the Pi theorem may appear as bordering on the
trivial. However, it may produce remarkable progress for selected
problems, such as turbulent jets, nuclear blasts or similarity
solutions, without the detailed knowledge of mathematical or physical
models. Hence, to a novice in scaling it may stand out as something
very profound, if not magical.  Anyhow, as one move on to more complex
problems with many parameters the use of the theorem yields
comparatively less gain as the number of Pi's become large and they
may recombined in countless ways. It then requires either a good
physical insight or information conveyed through an equation set to
pick the useful dimensionless numbers or the appropriate scaling of
the said equation set.  Sometimes the scrutiny of the equations also
reveals that some of Pi's, obtained by applying the theorem, in fact
may be removed from the problem.  As a consequence, in mathematical
modeling of a complex physical problem the real assessment of scaling
and dimensionless numbers will anyhow be an integral part of the
analysis of the governing equations instead of a separate issue left
with the Pi theorem. In textbooks and articles alike the discussion of
scaling in the context of the equations are too often missing or
presented in an half-hearted fashion. Hence, herein the focus will be
on this process, while we do not provide much in the way of examples
on the Pi theorem.  We do not allude that the Pi theorem is of little
value.  In a number of contexts, such as in experiments, it may
provide valuable and even crucial guidance, but in this particular
textbook we seek to tell the complementary story on scaling.
Moreover, as will be shown in this book, the dimensionless numbers in
a problem also arise, in a very natural way, from scaling the
differential equation(s).  Provided one has a model based on
differential equation, there is actually no need for classical
dimensional analysis.


===== Absolute errors, relative errors, and units =====

Mathematically, it does not matter what units we use for a physical
quantity. However, when we deal with approximations and errors,
units are important. Suppose we work with a geophysical problem where
the length scale is typically measured in km and we have an approximation
12.5 km to the exact value 12.52 km. The error is then 0.02 km.
Switching units to mm leads to an error of 20,000 mm. A program working
in mm would report $2\cdot 10^5$ as the error, while a program working
in km would print 0.02. The absolute error is therefore sensitive to
the choice of units. This fact motivates for the use of the *relative
error*: (exact - approximate)/exact since then the unit cancels.
In the present example, one gets a relative error of $1.6\cdot 10^{-3}$
regardless of the whether the length is measured in km or mm.

Nevertheless, rather than relying solely on relative errors, it is in general
better to scale the problem such that the quantities entering the
computations are of unit size (or at least moderate) instead of being very
large or very small. The techniques of this ${APPENDIX} show how this
can be done.

===== Units and computers =====

Traditional numerical computing involves numbers only and therefore
require dimensionless mathematical expressions. Usually, an implicit
trivial scaling is used. One can, for example, just scale all length
quantities by 1 m, all time quantities by 1 s, and all mass quantities
by 1 kg, to obtain the dimensionless numbers needed for calculations.
This is the most common approach, although it is very seldom explicitly
stated.

Symbolic computing packages, such as Mathematica and Maple, allow
computations with quantities that have dimension. This is also possible
in popular computer languages used for numerical computing (Section
ref{scale:PQ} provides a specific example in Python).


===== Unit systems =====

idx{units!US}
idx{units!British}

Confusion arises quickly when some physical quantities are expressed
in SI units while others are in US or British units.  Density could,
for instance, be given in unit of ounce per teaspoon (see Exercise
ref{sec:scale:exer:US2SI1} for how to safely convert to a standard
unit like $\hbox{kg\,m}^{-3}$).  Although unit conversion tables are
frequently met in school, errors in unit conversions between units
probably rank highest among all errors committed by scientists and
engineers (and when a unit conversion error make an "airplane's fuel
run out":
"http://www.nytimes.com/1983/07/30/us/jet-s-fuel-ran-out-after-metric-conversion-errors.html",
it is serious!).  Having good software tools to assist in unit
conversion is therefore paramount, and this topic is treated in
Sections ref{scale:PQ} and ref{scale:parampool}.  Readers who are
primarily interested in the mathematical scaling technique may safely
jump over this material and continue with Section
ref{sec:scale:decay}.


===== Example on challenges arising from unit systems =====

A slightly elaborated example on scaling in an actual
science/engineering project may hopefully be useful for further
motivation.  In its full extent, the study of *tsunamis* spans
geophysics, geology, history, fluid dynamics, statistics, geodesy,
engineering, and civil protection. This complexity reflects in a
diversity of practices concerning the use of units, scales, and
concepts. If we narrow the scope to the modeling of tsunami
propagation, the scaling aspect, at least, may seem simple as we are
mainly concerned with length and time.  Still, even here the
non-uniformity concerning physical units is an encumbrance.

A minor issue is the occasional use of non-SI units such as inches, or
in old charts, even fathoms.  More important is the non-uniformity in
the magnitude of the different variables, and the differences in the
inherent horizontal and vertical scales in particular.  Typically
surface elevations are meters or smaller. For far-field deep water
propagation as well as small tsunamis, which are still of scientific
interest, surface elevations are often given in $\hbox{cm}$ or even
$\hbox{mm}$.  In the deep ocean the characteristic depth is orders of
magnitude larger than this, typically $5000\,\hbox{m}$. Propagation
distances, on the other hand, are hundreds or thousands of
kilometers. Often locations and computational grids are best described
in geographical coordinates (longitude/latitude) which are related to
SI units by 1 latitude minute being roughly one nautical mile
($1852\,\hbox{m}$), and 1 longitude minute being this quantity times
the cosine of the latitude. Wave periods of tsunamis are mostly from
minutes to an hour, hopefully sufficiently short to be well separated
from the half-daily period of the tides. Propagation times are
typically hours or maybe the better part of a day when the Pacific
Ocean is traversed.

The scientists, engineers, and bureaucrats in the tsunami community
tend to be particular and non-conform concerning formats and units, as
well as the type of data required.  To accommodate these demands, a
tsunami modeler must produce a diversity of data which are in units
and formats which cannot be used internally in her models.  On the
other hand, she must also be prepared to accept the input data in
diversified forms.  Some data sets may be large, implying that
unnecessary duplication, with different units or scaling, should be
avoided.  In addition, tsunami models are often bench-marked through
comparison with experimental data. The lab scale is generally
$\hbox{cm}$ or $\hbox{m}$, at most, which implies that measured data
are provided in different units than real events, or even in volts,
with conversion information, as obtained from the measuring gauges.

All the unit particulars in various file formats is clearly a nuisance
and give rise to a number of misconceptions and errors that may cause
loss of precious time or efforts. To reduce such problems, developers
of computational tools should combine a reasonable flexibility
concerning units in input and output with a clear and consistent
convention for scaling within the tools. In fact, this is also goes
for academic tools for in-house use.

The discussion above points to some best practices that this book
promotes. First, always compute with scaled differential equation
models. This book tells you how to do that. Second, users of software
often want to specify input data with dimension and get output data
with dimension. The software should then apply tools like
`PhysicalQuantity` (Section ref{scale:PQ})
or the more sophisticated Parampool package (Section
ref{scale:parampool}) to allow input with explicit dimensions and
convert the dimensions to the right types if necessary.
It is trivial to apply these tools if the computational software is
written in Python, but it is even straightforward if the software is
written in compiled languages like Fortran, C, or C++. In the latter
case one just makes an input reading module in Python that grabs data from
a user interface and feeds them into the computational software, either
through files or function calls (the relevant functions to be called
must be wrapped in Python with tools like
"f2py": "http://docs.scipy.org/doc/numpy-dev/f2py/",
"Cython": "http://cython.org/",
"Weave": "http://docs.scipy.org/doc/scipy/reference/tutorial/weave.html",
"SWIG": "http://www.swig.org/",
"Instant": "https://bitbucket.org/fenics-project/instant",
or similar, see cite[Appendix C]{Langtangen_Linge_fdm} for basic
examples on f2py and Cython wrapping of C and Fortran code).

===== PhysicalQuantity: a tool for computing with units =====
label{scale:PQ}

idx{`PhysicalQuantity`}
idx{units!conversion}
idx{units!software}

This book contains quite some computer code to illustrate how the theory
maps in detail to running software. Python is the programming language
used, primarily because it is an easy-to-read, powerful,
full-fledged language that can be made very close to popular MATLAB-like code
as well as class-based code typically used in Java, C#, and C++.
The Python ecosystem for scientific computing has in recent years grown
fast in popularity and acts as a replacement for more specialized tools
like MATLAB, R, and IDL.
The coding examples in this book requires only familiarity with basic
procedural programming in Python.

Readers without knowledge of Python variables, functions, if tests,
and module import should consult, e.g., a "brief tutorial on scientific
Python": "http://hplgit.github.io/bumpy/doc/web/index.html",
the "Python Scientific Lecture Notes": "http://scipy-lectures.github.com/",
or a full textbook cite{Langtangen_2012} in parallel with reading about
Python code in the present book.

!bwarning This book applies Python 2.7
Python exists in two incompatible versions, numbered 2 and 3.
The differences can be made small, and there are tools to write
code that runs under both versions.

As Python version 2 is still dominating
in scientific computing, we stick to this version, but
write code in version 2.7 that is as close as possible to version 3.4
and later. In most of our programs, only the `print` statement differs
between version 2 and 3.
!ewarning

[hpl: Geir, is this sufficient intro about Python? Should we be more
specific about the expected competence?]
[Geir: hpl, no this will do. ]

Computations with units in Python are well supported by the
`PhysicalQuantity` object from the "ScientificPython package":
"https://bitbucket.org/khinsen/scientificpython" by Konrad
Hinsen. Unfortunately, ScientificPython does not, at the time of this
writing, work with NumPy version 1.9 or later, so we have isolated the
`PhysicalQuantity` object in a module "`PhysicalQuantities`":
"https://github.com/hplgit/physical-quantities" and made it publicly
available on GitHub. There is also an alternative package "Unum":
"https://bitbucket.org/kiv/unum/" for computing with numbers with
units, but we shall stick to the former module here.

Let us demonstrate the usage of the `PhysicalQuantity` object by
computing $s=vt$, where $v$ is a velocity given in the unit *yards per
minute* and $t$ is time measured in hours.  First we need to know what
the units are called in `PhysicalQuantities`.  To this end, run `pydoc
PhysicalQuantities`, or

!bc sys
Terminal> pydoc Scientific.Physics.PhysicalQuantities
!ec
if you have entire ScientificPython package installed. The
resulting documentation shows the names of
the units. In particular,
yards are specified by `yd`, minutes by `min`, and hours
by `h`. We can now compute $s=vt$ as follows:

!bc pyshell
>>> # With ScientificPython:
>>> from Scientific.Physics.PhysicalQuantities import \
... PhysicalQuantity as PQ
>>> # With PhysicalQuantities as separate/stand-alone module:
>>> from PhysicalQuantities import PhysicalQuantity as PQ
>>>
>>> v = PQ('120 yd/min')   # velocity
>>> t = PQ('1 h')          # time
>>> s = v*t                # distance
>>> print s                # s is string
120.0 h*yd/min
!ec
The odd unit `h*yd/min` is better converted to a standard SI unit such
as meter:

!bc pyshell
>>> s.convertToUnit('m')
>>> print s
6583.68 m
!ec
Note that `s` is a `PhysicalQuantity` object with a value and a
unit. For mathematical computations we need to extract the
value as a `float` object. We can also extract the unit as a string:

!bc pyshell
>>> print s.getValue()     # float
6583.68
>>> print s.getUnitName()  # string
m
!ec

Here is an example on how to convert the odd velocity unit yards per
minute to something more standard:

!bc pyshell
>>> v.convertToUnit('km/h')
>>> print v
6.58368 km/h
>>> v.convertToUnit('m/s')
>>> print v
1.8288 m/s
!ec

#Sometimes you find physical quantities in the literature or on the web
#with units that you do not want to use. The `convertToUnit` method is
#then handy.
As another example on unit conversion,
say you look up the specific heat capacity of water to
be 1 $\hbox{cal}\, \hbox{g}^{-1}\hbox{K}^{-1}$. What is the
corresponding value in the standard unit $\hbox{Jg}^{-1}\hbox{K}^{-1}$
where joule replaces calorie?

!bc pyshell
>>> c = PQ('1 cal/(g*K)')
>>> c.convertToUnit('J/(g*K)')
>>> print c
4.184 J/K/g
!ec

======= Parampool: user interfaces with automatic unit conversion =======
label{scale:parampool}

idx{`parampool`}

The "Parampool": "https://github.com/hplgit/parampool" package allows
creation of user interfaces with support for units and unit
conversion. Values of parameters can be set as a number with a
unit. The parameters can be registered beforehand with a preferred
unit, and whatever the user prescribes, the value and unit are
converted so the unit becomes the registered unit. Parampool supports
various type of user interfaces: command-line arguments (option-value
pairs), text files, and interactive web pages. All of these
are described next.

=== Example application ===

As case, we want to make software for computing with the simple
formula $s=v_0t + \frac{1}{2}at^2$. We want $v_0$ to be a velocity
with unit m/s, $a$ to acceleration with unit $\hbox{m/s}^2$, $t$ to be
time measured in s, and consequently $s$ is a distance measured in m.

===== Pool of parameters =====

First, Parampool requires us to define a *pool* of all input
parameters, which is here simply represented by list of dictionaries, where each
dictionary holds information about one parameter. It is possible to
organize input parameters in a tree structure with subpools having
subpools,
but for our simple application we just need a flat structure with
three input parameters:
$v_0$, $a$, and $t$. These parameters are put in a subpool called
``Main''. The pool is created by the code

@@@CODE src-scaling/distance.py fromto: def define_input@def distance\(
For each parameter we can define a logical name, such as `initial velocity`,
a default value, and a unit. Additional properties
are also allowed, see the "Parampool documentation": "http://hplgit.github.io/parampool/doc/web/index.html".

!bnotice Tip: specify default values of numbers as float objects
Note that we write 1.0 as default value and not just 1.
In the latter case, Parampool will interpret that our parameter is
an integer and actually convert input like `2.5 m/s` to `2 m/s`.
To ensure that a real-valued parameter becomes a `float` object inside
the pool, specify the default value as a real number: `1.` or `1.0`.
(The type of an input parameter can alternatively be explicitly set by
the `str2type` property, e.g., `str2type=float`.)
!enotice

===== Fetching pool data for computing =====

We can make a little function for fetching values from the pool
and computing $s$:

@@@CODE src-scaling/distance.py fromto: def distance\(@def distance_unit\(
The `pool.get_value` function returns the numerical value of
the named parameter, after the unit has been converted from what the
user has specified to what was registered in the pool.
For example, if the user provides the command-line argument
`--time '2 h'`, Parampool will convert this quantity to seconds and
`pool.get_value('time')` will return 7200.

===== Reading command-line options =====

To run the computations, we define the pool, load values from the
command line, and call `distance`:

!bc pycod
pool = define_input()
from parampool.menu.UI import set_values_from_command_line
pool = set_values_from_command_line(pool)

s = distance(pool)
print 's=%g' % s
!ec

Parameter names with whitespace must use an underscore for whitespace
in the command-line option, such as in `--Initial_velocity`.
We can now run

!bc sys
Terminal> python distance.py --initial_velocity '10 km/h' \
          --acceleration 0 --time '1 h
s=10000
!ec
Notice from the answer (`s`) that 10 km/h gets converted to m/s and 1 h to s.

It is also possible to fetch parameter values as `PhysicalQuantity`
objects from the pool through calling

!bc pycod
v_0 = pool.get_value_unit('Initial velocity')
!ec
The following variant of the `distance` function computes with
values and units:

@@@CODE src-scaling/distance.py fromto: def distance_unit\(@def distance_unit2
We can then do

!bc pycod
s, s_unit = distance_unit(pool)
print 's=%g' % s, s_unit
!ec
and get output with the right unit as well.

===== Setting default values in a file =====

In large applications with lots of input parameters one will often like
to define a (huge) set of default values specific for a case and then
override a few of them on the command-line. Such sets of default values
can be set in a file using syntax like

!bc pycod
subpool Main
initial velocity = 100 ! yd/min
acceleration = 0 ! m/s**2         # drop acceleration
end
!ec
The unit can be given after the `!` symbol (and before the comment symbol `#`).

To read such files we have to add the lines

!bc pycod
from parampool.pool.UI import set_defaults_from_file
pool = set_defaults_from_file(pool)
!ec
before the call to `set_defaults_from_command_line`.

If the above commands are stored in a file `distance.dat`, we give
this file information to the program through the
option `--poolfile distance.dat`. Running just

!bc sys
Terminal> python distance.py --poolfile distance.dat
s=15.25 m
!ec
first loads the velocity
100 yd/min converted to 1.524 m/s and zero acceleration
into the pool system and, and then we call `distance_unit`, which
loads these values from the pool along with the default value for
time, set as 10 s. The calculation is then $s=1.524\cdot 10 + 0=15.24$
with unit m. We can override the time and/or the other two
parameters on the command line:

!bc sys
Terminal> python distance.py --poolfile distance.dat --time '2 h'
s=10972.8 m
!ec
The resulting calculations are $s=1.524\cdot 7200 + 0 =10972.8$.
You are encouraged to play around with the "`distance.py`": "${src_scaling}/distance.py" program.

idx{multiple software runs}

===== Specifying multiple values of input parameters =====

Parampool has an interesting feature: multiple values can be assigned
to an input parameter, thereby making it easy for an application to
run through all combinations of all parameters.
We can demonstrate this feature by making a table of $v_0$, $a$, $t$, and
$s$ values. In the compute function, we need to call `pool.get_values`
instead of `pool.get_value` to get a list of all the values that
were specified for the parameter in question. By nesting loops over
all parameters, we visit all combinations of all parameters as
specified by the user:

@@@CODE src-scaling/distance.py fromto: def distance_table@def main
In case just a single value was specified for a parameter, `pool.get_values`
returns this value only and there will be only one pass in the associated
loop.

After loading command-line arguments into our `pool` object, we can call
`distance_table` instead of `distance` or `distance_unit` and
write out a nicely formatted table of results:

!bc pycod
table = distance_table(pool)
print '|-----------------------------------------------------|'
print '|      v_0   |      a     |      t     |      s       |'
print '|-----------------------------------------------------|'
for v_0, a, t, s in table:
    print '|%11.3f | %10.3f | %10.3f | %12.3f |' % (v_0, a, t, s)
print '|-----------------------------------------------------|'
!ec
Here is a sample run,

!bc sys
Terminal> python distance.py --time '1 h & 2 h & 3 h' \
          --acceleration '0 m/s**2 & 1 m/s**2 & 1 yd/s**2' \
	  --initial_velocity '1 & 5'
|-----------------------------------------------------|
|      v_0   |      a     |      t     |      s       |
|-----------------------------------------------------|
|      1.000 |      0.000 |   3600.000 |     3600.000 |
|      1.000 |      0.000 |   7200.000 |     7200.000 |
|      1.000 |      0.000 |  10800.000 |    10800.000 |
|      1.000 |      1.000 |   3600.000 |  6483600.000 |
|      1.000 |      1.000 |   7200.000 | 25927200.000 |
|      1.000 |      1.000 |  10800.000 | 58330800.000 |
|      1.000 |      0.914 |   3600.000 |  5928912.000 |
|      1.000 |      0.914 |   7200.000 | 23708448.000 |
|      1.000 |      0.914 |  10800.000 | 53338608.000 |
|      5.000 |      0.000 |   3600.000 |    18000.000 |
|      5.000 |      0.000 |   7200.000 |    36000.000 |
|      5.000 |      0.000 |  10800.000 |    54000.000 |
|      5.000 |      1.000 |   3600.000 |  6498000.000 |
|      5.000 |      1.000 |   7200.000 | 25956000.000 |
|      5.000 |      1.000 |  10800.000 | 58374000.000 |
|      5.000 |      0.914 |   3600.000 |  5943312.000 |
|      5.000 |      0.914 |   7200.000 | 23737248.000 |
|      5.000 |      0.914 |  10800.000 | 53381808.000 |
|-----------------------------------------------------|

!ec
Notice that some of the multiple values have dimensions different
from the registered dimension for that parameter, and the table
shows that conversion to the right dimension has taken place.

idx{web interface (Parampool)}
idx{graphical web interface}

===== Generating a graphical user interface =====

For the fun of it, we can easily generate a graphical user interface
via Parampool. We wrap the `distance_unit` function in a function that
returns the result in some nice-looking HTML code:

@@@CODE src-scaling/distance.py fromto: def distance_unit2@def distance_table
In addition, we must make a file `generate_distance_GUI.py` with the
simple content

@@@CODE src-scaling/generate_distance_GUI.py
Running `generate_distance_GUI.py` creates a Flask-based web
interface[^Flask]
to our `distance_unit` function, see Figure ref{scale:dimunit:fig:GUI}.
The text fields in this GUI allow specification of parameters with
numbers and units, e.g., acceleration with unit yards per minute squared,
as shown in the figure. Hovering the mouse slightly to the left of
the text field causes a little black window to pop up with the registered unit
of that parameter.

[^Flask]: You need to have Flask and additional packages installed.
This is easy to do with a few `pip install` commands,
see cite{parampool} or cite{web4sciapps}.


FIGURE: [fig-scaling/distance_GUI, width=400 frac=0.5] Web GUI where parameters can be specified with units. label{scale:dimunit:fig:GUI}

With examples shown above, you should be able to utilize the
`PhysicalQuantity` object and the Parampool package in your programs
to work safely with units. For the coming text, where we discuss the
craft of scaling in detail, we shall just work in standard SI units
and avoid unit conversion so there will be no more use of
`PhysicalQuantity` and Parampool.


!split
========= ODE models =========

This chapter introduces the basic techniques of scaling and the ways to
reason about scales. The first class of examples targets exponential
decay models, starting with the simple ordinary differential equation (ODE)
for exponential decay processes: $u^{\prime}=-au$, with constant $a>0$.
Then we progress to various generalizations of this ODE, including nonlinear
versions and systems of ODEs. The next class of examples concerns
second-order ODEs for oscillatory systems, where the simplest
ODE reads $mu^{\prime\prime} + ku=0$, with $m$ and $k$ as positive constants.
Various extensions with damping and force terms are discussed in detail.


======= Exponential decay problems =======
label{sec:scale:decay}

===== Fundamental ideas =====


idx{scaling}
idx{non-dimensionalization}

Scaling is an extremely useful technique in mathematical modeling and
numerical simulation.  The purpose of the technique is three-fold:

 o Make independent and dependent variables dimensionless.
 o Make the size of independent and dependent variables about unity.
 o Reduce the number of independent physical parameters in the model.

idx{dimensionless variable}

The first and second item mean that for any variable, denote it by
$q$, we introduce a corresponding dimensionless variable

!bt
\[ \bar q = \frac{q-q_0}{q_c},\]
!et
where $q_0$ is a reference value of $q$ ($q_0=0$ is a common choice) and
$q_c$ is a characteristic size of $|q|$. Since the numerator and denominator
have the same dimension, $\bar q$ becomes a dimensionless number.

If $q_c$ is the maximum value of $|q-q_0|$, we see that $0 < |\bar
q|\leq 1$. How to find $q_c$ is sometimes the big challenge of
scaling. Examples will illustrate various approaches to meet this
challenge.

The forthcoming text has the following goals.

 * Teach the technical steps of making a mathematical model, based
   on differential equations, dimensionless.
 * Describe various techniques for reasoning about the scales, i.e.,
   finding the characteristic sizes of quantities.
 * Teach how to identify and interpret dimensionless numbers arising
   from the scaling process.
 * Provide a lot of different examples on making models dimensionless
   with physically correct scales.
 * Demonstrate software tools for computing with numbers with units,
   including doing unit conversions.
 * Introduce software tools for creating user interfaces that
   can automatically perform unit conversion.
 * Use symbolic software (SymPy) to derive exact solutions of differential
   equations.
 * Explain how to run a dimensionless model with software developed
   for the problem with dimensions.

!bwarning What this book is and is not
Books covering scaling and non-dimensionalization very often cover
topics not treated in the present book. One key topic   is
dimensional analysis and the famous Buckingham Pi Theorem
cite{Douglas_et_al_1979,Logan_1987}, which we discuss only briefly in
section ref{scale:dimunit:Pi}.

Other classical topics closely related to scaling and non-dimensionalization
are analytical solution methods like perturbation techniques and
similarity solutions. These are not addressed in this book.
There are numerous texts on perturbation techniques, and these build
on an already scaled differential equations. Similarity solutions do not
fit within the present scope since these involve non-dimensional
*combinations of the independent variables* to derive new differential
equations that are easier to solve.

Our scope is to scale differential
equations to simplify the setting of parameters in numerical simulations,
and at the same time understand more of the physics
through interpretation of the dimensionless numbers that automatically
arise from the scaling procedure.
!ewarning


===== The basic model problem =====
idx{exponential decay}

Processes undergoing exponential reduction can be modeled by the ODE
problem

!bt
\begin{equation}
u'(t) = -au(t),\quad u(0)=I,
label{scale:decay:model}
\end{equation}
!et
where $a,I>0$ are prescribed constants and $u(t)$ is the unknown function.
For this particular model, we can easily derive the solution, $u(t)=Ie^{-at}$,
which is helpful to have in mind during the scaling process.

=== Example: Population dynamics ===

The evolution of a population of humans, animals, cells, etc.,
under unlimited access to resources, can be
modeled by (ref{scale:decay:model}). Then $u$ is the number of
individuals in the population, strictly speaking an integer, but well
modeled by a real number in large populations.
The parameter $a$ is the increase in the number of individuals per
time and per individual.

=== Example: Decay of pressure with altitude ===

The simple model (ref{scale:decay:model}) also governs the pressure
in the atmosphere (under many assumptions, such as an ideal gas in
equilibrium). In this case $u$ is the
pressure, measured in $\hbox{Nm}^{-2}$; $t$ is the hight in meters;
and $a=M/(R^*T)$, where
$M$ is the molar mass of the Earth's air (0.029 kg/mol),
$R^*$ is the universal
gas constant ($8.314\,\frac{\hbox{Nm}}{\hbox{mol K}}$),
and $T$ is the temperature in Kelvin (K).
The temperature depends on the hight so we have $a=a(t)$.


===== The technical steps of the scaling procedure =====
label{sec:scale:decay:steps}

=== Step 1: Identify independent and dependent variables ===

There is one independent variable, time $t$, and one dependent variable,
$u$.

idx{dimensionless variable}
idx{characteristic time}

=== Step 2: Make independent and dependent variables dimensionless ===

We introduce a new dimensionless $t$, called $\bar t$, defined by
!bt
\begin{equation}
\bar t = \frac{t}{t_c},
\end{equation}
!et
where $t_c$ is a *characteristic value* of $t$. Similarly,
we introduce a dimensionless $u$, named $\bar u$, according to
!bt
\begin{equation}
\bar u = \frac{u}{u_c},
\end{equation}
!et
where $u_c$ is a constant *characteristic size* of $u$. When $u$ has a specific
interpretation, say when (ref{scale:decay:model}) models pressure
in an atmospheric layer, $u_c$ would be referred to as characteristic pressure.
For a decaying population, $u_c$ may be a characteristic number of
members in the population, e.g., the initial population $I$.

=== Step 3: Derive the model involving only dimensionless variables ===

The next task is to insert the new dimensionless variables in the
governing mathematical model. That is, we replace $t$ by $t_c\bar t$
and $u$ by $u_c\bar u$ in (ref{scale:decay:model}). The derivative
with respect to $\bar t$ is derived as

!bt
\[ \frac{du}{dt} = \frac{d (u_c\bar u)}{d\bar t}\frac{d\bar t}{dt}
= u_c\frac{d\bar u}{d\bar t}\frac{1}{t_c} =
\frac{u_c}{t_c}\frac{d\bar u}{d\bar t}\tp
\]
!et
The model (ref{scale:decay:model}) now becomes

!bt
\begin{equation}
\frac{u_c}{t_c}\frac{d\bar u}{d\bar t} = -au_c\bar u,\quad u_c\bar u(0)=I\tp
label{scale:decay:model:scaled0}
\end{equation}
!et

=== Step 4: Make each term dimensionless ===

Equation (ref{scale:decay:model:scaled0}) still has terms with
dimensions. To make each term dimensionless, we usually divide by
the coefficient in front of the term with the highest time derivative
(but dividing by any coefficient in any term will do). The result is

!bt
\begin{equation}
\frac{d\bar u}{d\bar t} = -at_c\bar u,\quad \bar u(0)=u_c^{-1}I
\tp
label{scale:decay:model:dimless0}
\end{equation}
!et

=== Step 5: Estimate the scales ===

A characteristic quantity like $t_c$ reflects the time scale in the
problem. Estimating such a time scale is certainly
the most challenging part of the scaling procedure. There are different
ways to reason. The first is to aim at a size of $\bar u$ and its derivatives
that is of order unity. If $u_c$ is chosen such that $|\bar u|$ is
of size unity, we see from (ref{scale:decay:model:dimless0}) that
$d\bar u/d\bar t$ is of the size of $\bar u$ (i.e., unity)
if we choose $t_c = 1/a$.

idx{e-folding time}

Alternatively, we may look at a special case of the model where we have
analytical insight. In the present problem we are lucky to know the
exact solution for any value of the input data. For exponential
decay, $u(t)\sim e^{-at}$, it is common to define a characteristic time
scale $t_c$ as the time it takes to reduce $u$ by a factor of $1/e$ (also
called the *e-folding time*):

!bt
\[ e^{-at_c} = \frac{1}{e}e^{-a\cdot 0}\quad\Rightarrow\quad e^{-at_c}=e^{-1},
\]
!et
from which it follows that $t_c = 1/a$.

In this example, two different, yet common ways of reasoning, lead to the
same value of $t_c$. However, instead of using the e-folding time we
could use the half-time of the exponential decay as characteristic
time, which is also a very common measure of the time scale in such
processes. The half time is defined as the time it takes to halve $u$:

!bt
\[ e^{-at_c} = \frac{1}{2}e^{-a\cdot 0}
\quad\Rightarrow\quad t_c = a^{-1}\ln 2\tp\]
!et
There is a factor $\ln 2 =0.69$ difference from the other $t_c$ value.
As long as the factor is not an order of magnitude or more different,
we do not pay attention to such small differences.
Although $t_c = a^{-1}\ln 2$ is a fine time scale to be used in this
problem, it leads to a scaled differential equation $u'=-(\ln 2) u$,
which is fine, but an unusual form. People tend to prefer the simpler
ODE $u'=-u$,
which arises from $t_c=1/a$, and we shall therefore use this
time scale.

Regarding $u_c$, we may look at the initial condition
and realize that the choice $u_c=I$ makes $\bar u(0)=1$. For $\bar t>0$
we know that $\bar u$ is decreasing, so $u_c=I$
gives us $\bar u\leq 1$, which is always a goal
(alternatively, we may look to analytical insight, $u(t)=Ie^{-at}$, to
see that $u\leq I$, such that $u_c=I$ gives $\bar u\leq 1$).

With $t_c=1/a$ and $u_c=I$, we have the final dimensionless model

!bt
\begin{equation}
\frac{d\bar u}{d\bar t} = -\bar u,\quad \bar u(0)=1
\tp
label{scale:decay:model:dimless}
\end{equation}
!et
This is a remarkable result in the sense that *all physical parameters*
($a$ and $I$)
are removed from the model! Or more precisely, there are no physical input
parameters to assign
before using the model. In particular, numerical investigations of the original
model (ref{scale:decay:model}) would need experiments with different
$a$ and $I$ values, while numerical investigations of
(ref{scale:decay:model:dimless}) can be limited to *a single run*! As soon
as we have computed the curve $\bar u(\bar t)$, we can find the
solution $u(t)$ of (ref{scale:decay:model}) by

!bt
\begin{equation}
u(t) = u_c\bar u(t/t_c) = I\bar u(at)
\tp
label{scale:decay:u:dim}
\end{equation}
!et
This particular transformation actually means stretching the $\bar t$ and
$\bar u$ axes in a plot of $\bar u(\bar t)$ by the factors $a$ and $I$,
respectively.

It is very common to drop the bars when the scaled problem has been
derived and work further with (ref{scale:decay:model:dimless}) simply
written as

!bt
\[
\frac{du}{dt} = -u,\quad u(0)=1
\tp
\]
!et
Nevertheless, in this book we have decided to stick to bars for all
dimensionless quantities.


===== Making software for utilizing the scaled model =====
label{sec:scale:decay:prog}

Software for solving (ref{scale:decay:model}) could take advantage
of the fact that only one simulation of (ref{scale:decay:model:dimless})
is necessary. As soon as we have $\bar u(\bar t)$ accessible,
a simple scaling (ref{scale:decay:u:dim}) computes the real $u(t)$
for any given input data $a$ and $I$. Although the numerical computation of
$u(t)$ from (ref{scale:decay:model}) is very fast in this simple model
problem, using (ref{scale:decay:u:dim}) is very much faster than
computing a full numerical solution in more complicated
differential equation problems.

We can compute with the dimensionless model (ref{scale:decay:model:dimless})
in two ways, either make a solver for (ref{scale:decay:model:dimless})
or reuse a solver for (ref{scale:decay:model}) with the parameters
appropriately set ($I=1$, $a=1$).
The latter approach has the advantage of giving us
software that works both with a dimensionless model and a model
with dimensions and all the original physical parameters.

=== Software for the original problem with dimensions ===

We base our solver for
(ref{scale:decay:model:dimless}) on a solver for (ref{scale:decay:model}).
Assume that we have some module `decay.py` that offers the following
functions:

  * `solver(I, a, T, dt, theta=0.5)` for returning the solution arrays
    `u` and `t` for (ref{scale:decay:model}) solved by the so-called
    $\theta$ rule. This rule includes the Forward Euler scheme ($\theta=0$),
    the Backward Euler scheme ($\theta=1$), or the Crank-Nicolson
    (centered midpoint) scheme ($\theta=\half$).
  * `read_command_line_argparse()` for reading parameters in the problem
    from the command line and returning them: `I`, `a`, `T`, `theta` ($\theta$),
    and a list of $\Delta t$ values for time steps. (We shall only make
    use of the first $\Delta t$ value.)

The basic statements for solving (ref{scale:decay:model}) are
then

!bc pycod
from decay import solver, read_command_line_argparse
I, a, T, theta, dt_values = read_command_line_argparse()
u, t = solver(I, a, T, dt_values[0], theta)

from matplotlib.pyplot import plot, show
plot(t, u)
show()
!ec
The module "`decay.py`": "${src_scaling}/decay.py" is developed
and explained in
ref[Section ref{softeng1:basic:module}][ in cite{Langtangen_decay}][
Section refaux{softeng1:basic:module} in
the book "Finite Difference Computing with Exponential Decay Models":
"http://tinyurl.com/nclmcng/doc/pub/book" cite{Langtangen_decay}].

To solve the dimensionless problem, just fix $I=1$ and $a=1$:

!bc pycod
I, a, T, theta, dt_values = read_command_line_argparse()
u, t = solver(I=1, a=1, T=T, dt=dt_values[0], theta=theta)
!ec


=== Avoiding unnecessary computations ===

A key observation, as mentioned, is that we need to solve the problem
(ref{scale:decay:model:dimless}) only once. All solutions
corresponding to different $I$ and $a$ values in the original physical
problem can be recovered by scaling this single solution with formula
(ref{scale:decay:u:dim}).  We may therefore want to make software that
takes advantage of this fact. When requesting a solution, we see if it
has already been computed and stored in a file, and if so, the data
can be retrieved from file, otherwise we have to compute a new
solution and store it in a file.

A very plain solution to the problem is found in the file
"`decay_scaled_v1.py`": "${src_scaling}/decay_scaled_v1.py".
The `np.savetxt` function saves a two-dimensional array (``table'') to
a text file, and the `np.loadtxt` function can load the data back
into the program. A better solution to this problem is obtained
by using the `joblib` package as described next.

idx{memoize function}
idx{`joblib`}

=== Implementation with joblib ===

The Python package `joblib` has functionality that is very convenient
for implementing the `solver_scaled` function. The first time a
function is called with a set of arguments, the statements in the
function are executed and the return value is saved to file. If the
function is called again with the same set of arguments, the
statements in the function are not executed, but the return value is
read from file. In computer science, one would say that `joblib` in
this way provides *memorization* functionality for Python functions.
This functionality is particularly aimed at large-scale computations
with arrays that one would like to avoid being recomputed. We
illustrate the technique here in a very simple mathematical context.

First we make a `solver_scaled` function for the scaled
model that just calls up a `solver_unscaled` for the problem with
dimensions:

@@@CODE src-scaling/decay_scaled.py fromto: from decay import solver_unscaled@import joblib
Then we create some ``computer memory on disk'', i.e., some disk space to
store the result of a call to the `solver_scaled` function. Thereafter,
we redefine the name `solver_scaled` to a new function, created
by `joblib`, which calls our original `solver_scaled` function
if necessary and otherwise loads data from file:

@@@CODE src-scaling/decay_scaled.py fromto: import joblib@from decay import unscale
The solutions are actually stored in files in the cache directory `temp`.

A typical use case is to read values from the command line,
solve the unscaled problem (if necessary), scale the solution, and visualize
the solution with dimension:

@@@CODE src-scaling/decay_scaled.py fromto: from decay import un@if __name
The complete code resides in the file
"`decay_scaled.py`": "${src_scaling}/decay_scaled.py".
A plot of the scaled and unscaled solution appears in Figure
ref{sec:decay:fig:simplest}.

FIGURE: [fig-scaling/decay, width=800 frac=1] Scaled (left) and unscaled (right) exponential decay. label{sec:decay:fig:simplest}


Note that we write a message `Computing the numerical solution` inside
the `solver_scaled` function. We can then easily detect when
the solution is actually computed and when it is simply read from file.
Here is a demo:

!bc sys
Terminal> # Very first run
Terminal> python decay_scaled.py --T 7 --a 1 --I 0.5 --dt 0.2
[Memory] Calling __main__--home-hpl...
solver_scaled-alias(7.0, 0.2, 0.5)
Computing the numerical solution

Terminal> # No change of T, dt, theta - can reuse solution in file
Terminal> python decay_scaled.py --T 7 --a 4 --I 2.5 --dt 0.2

Terminal> # Change of dt, must recompute
Terminal> python decay_scaled.py --T 7 --a 4 --I 2.0 --dt 0.5
[Memory] Calling __main__--home-hpl...
solver_scaled-alias(7.0, 0.5, 0.5)
Computing the numerical solution

Terminal> # Change of dt again, but dt=0.2 is already in a file
Terminal> python decay_scaled.py --T 7 --a 0.5 --I 1 --dt 0.2
!ec

We realize that `joblib` has access to all previous runs and does not
recompute unless it is strictly required. Our previous implementation
without `joblib`
used only one file (for one numerical case)
and will therefore perform many more calls to
`solver_unscaled`.

!bnotice On the implementation of a simple memoize function
A memoized function recalls
previous results when the same set
of arguments is encountered. That is, the function caches its results.
A simple implementation stores the arguments in a function call and
the returned results in a
dictionary, and if the arguments are seen again, one looks up
in the dictionary and return previously computed results:

!bc pycod
class Memoize:
    def __init__(self, f):
        self.f = f
        self.memo = {}  # map arguments to results

def __call__(self, *args):
        if not args in self.memo:
            self.memo[args] = self.f(*args)
        return self.memo[args]

# Wrap my_compute_function(arg1, arg2, ...)
my_compute_function = Memoize(my_compute_function)
!ec
The memoize functionality in `joblib.Memory` is more sophisticated and
can work very efficiently with large array data structures as arguments.
Note that the simple version above can only be used when all arguments to
the function `f` are immutable (since the key in a dictionary has to be
immutable).
!enotice

===== Scaling a generalized problem =====
label{sec:scale:decay:body}

Now we consider an extension of the exponential decay ODE to the
form

!bt
\begin{equation}
u'(t) = -au(t) + b,\quad u(0)=I
label{scale:decay:model:g}
\tp
\end{equation}
!et
One particular model, with constant $a$ and $b$,
is a spherical micro-organism falling in air,

!bt
\begin{equation}
u' = - \frac{3\pi d\mu}{\varrho_b V} u + g\left(\frac{\varrho}{\varrho_b} -1\right),
label{scale:decay:model:g:spec}
\end{equation}
!et
where $d$, $\mu$, $\varrho_b$, $\varrho$, $V$, and $g$ are physical
parameters. The function $u(t)$ represents the vertical velocity,
being positive upwards.
We shall use this model in the following.

=== Exact solution ===

It can be handy to have the exact solution for reference, in case
of constant $a$ and $b$:

!bt
\[ \uex(t) = \frac{e^{-at}}{a}\left( b(e^{at}-1) + aI\right)
\tp
\]
!et

!bnotice Solving differential equations in SymPy
It can be very useful to use a symbolic computation tool such as SymPy
to aid us in solving differential equations.
Let us therefore demonstrate how SymPy can be used to find this solution.
First we define the parameters in the problem as symbols
and $u(t)$ as a function:

!bc pyshell
>>> from sympy import *
>>> t, a, b, I = symbols('t a b I', real=True, positive=True)
>>> u = symbols('u', cls=Function)
!ec
The next task is to define the differential equation, either as
a symbolic expression that is to equal zero, or as
an equation `Eq(lhs, rhs)` with `lhs` and `rhs` as expressions for
the left- and right-hand side):

!bc pyshell
>>> # Define differential equation
>>> eq = diff(u(t), t) + a*u(t) - b
>>> # or
>>> eq = Eq(diff(u(t), t), -a*u(t) + b)
!ec
The differential equation can be solved by the `dsolve` function, yielding
an equation of the form `u(t) == expression`. We want to grab the
expression on the right-hand side as our solution:

!bc pyshell
>>> sol = dsolve(eq, u(t))
>>> print sol
u(t) == (b + exp(a*(C1 - t)))/a
>>> u = sol.rhs                    # grab solution
>>> print u
(b + exp(a*(C1 - t)))/a
!ec
The solution contains the unknown integration constant `C1`, which must
be determined by the initial condition. We form the equation arising
from the initial condition $u(0)=I$:

!bc pyshell
>>> C1 = symbols('C1')
>>> eq = Eq(u.subs(t, 0), I)   # substitute t by 0 in u
>>> sol = solve(eq, C1)
>>> print sol
[log(I*a - b)/a]
!ec
The one solution that was found (stored in a list!)
must then be substituted back in the
expression `u` to yield the final solution:

!bc pyshell
>>> u = u.subs(C1, sol[0])
>>> print u
(b + exp(a*(-t + log(I*a - b)/a)))/a
!ec
As in mathematics with pen and paper, we strive to simplify
expressions also in symbolic computing software.
This frequently requires some trial and error
process with SymPy's simplification functions. A very standard
first try is to expand everything and run simplification algorithms:

!bc pyshell
>>> u = simplify(expand(u))
>>> print u
(I*a + b*exp(a*t) - b)*exp(-a*t)/a
!ec
Doing `latex(u)` automatically converts the expression to LaTeX syntax
for inclusion in reports.
!enotice

=== Theory ===

The challenges in our scaling is to find the right $u_c$ and $t_c$
scales. From (ref{scale:decay:model:g}) we see that if $u'\rightarrow 0$
as $t\rightarrow\infty$, $u$ approaches the constant value $b/a$. It can be
convenient to let the scaled $\bar u\rightarrow 1$ as
we approach the $d\bar u/d\bar t = 0$ state. This idea points to choosing

!bt
\begin{equation}
u_c = \frac{b}{a} = g\left(\frac{\varrho}{\varrho_b} -1\right)\left(\frac{3\pi d\mu}{\varrho_b V}\right)^{-1}
\tp
\end{equation}
!et

!bnotice On the sign of the scaled velocity
A little note on the sign of $u_c$ is necessary here.
With $\varrho_b < \varrho$, the buoyancy force upwards wins over the
gravity force downwards, and the body will move upwards. In this case,
the terminal velocity $u_c > 0$. When $\varrho_b > \varrho$, we get
a motion downwards, and $u_c < 0$. The corresponding $u$ is then also
negative, but the scaled velocity $u/u_c$, becomes positive.
!enotice

idx{dimensionless number}

Inserting $u = u_c\bar u = b\bar u/a$ and $t=t_c\bar t$ in
(ref{scale:decay:model:g}) leads to

!bt
\[
\frac{d\bar u}{d\bar t} = -t_c a\bar u + \frac{t_c}{u_c}b,
\quad \bar u(0) = I\frac{a}{b}
\tp
\]
!et
We want the scales such that $d\bar u/d\bar t$ and $\bar u$ are
about unity.
To balance the size of $\bar u$ and $d\bar u/d\bar t$ we must
therefore choose
$t_c = 1/a$, resulting in the scaled ODE problem

!bt
\begin{equation}
\frac{d\bar u}{d\bar t} = -\bar u + 1,\quad u(0)=\beta,
label{scale:decay:model:g:dimless}
\end{equation}
!et
where $\beta$ is a dimensionless number,
!bt
\begin{equation}
\beta = \frac{I}{u_c} = I\frac{a}{b},
\end{equation}
!et
reflecting the ratio of the initial velocity and the
terminal ($t\rightarrow \infty$) velocity $b/a$.
Scaling normally ends up with one or more dimensionless parameters,
such as $\beta$ here, containing ratios of physical effects in
the model. Many more examples on dimensionless parameters will appear
in later sections.

The analytical solution of the scaled model
(ref{scale:decay:model:g:dimless}) reads

!bt
\begin{equation}
\bar\uex(t) =
e^{-t}\left( e^{t}-1 + \beta\right) = 1 + (\beta -1)e^{-t}\tp
label{scale:decay:model:g:exact_scaled}
\end{equation}
!et

The result (ref{scale:decay:model:g:dimless}) with the
solution (ref{scale:decay:model:g:exact_scaled}) is actually
astonishing if $a$ and $b$ are as in (ref{scale:decay:model:g:spec}):
the six parameters $d$, $\mu$, $\varrho_b$, $\varrho$, $V$, and $g$
are conjured to one:
!bt
\[ \beta = I\frac{3\pi d\mu}{\varrho_b V}
\frac{1}{g}\left(\frac{\varrho}{\varrho_b} -1\right)^{-1},
\]
!et
which is an enormous simplification of the problem if our aim is to
investigate how $u$ varies with the physical input parameters in
the model.
In particular, if the motion starts from rest, $\beta=0$, and
there are no physical parameters in the scaled model!
We can then perform a single simulation and recover all physical
cases by the unscaling procedure. More precisely,
having computed $\bar u(\bar t)$ from (ref{scale:decay:model:g:dimless}),
we can use

!bt
\begin{equation}
u(t) = \frac{b}{a}\bar u(at),
\end{equation}
!et
to scale back to the original
problem again.
We observe that (ref{scale:decay:model:g:dimless}) can utilize a solver
for (ref{scale:decay:model:g}) by setting $a=1$, $b=1$, and $I=\beta$.
Given some implementation of a solver for (ref{scale:decay:model:g}),
say `solver(I, a, b, T, dt, theta)`,
the scaled model is run by `solver(beta, 1, 1, T, dt, theta)`.


idx{`joblib`}

=== Software ===

We may develop a solver for the scaled problem that uses `joblib`
to cache solutions with the same $\beta$, $\Delta t$, and $T$.
For now we fix $\theta=0.5$.
The module "`decay_vc.py`": "${src_scaling}/decay_vc.py"
(see ref[Section ref{decay:general}][ in cite{Langtangen_decay}[the
section "Implementation of the generalized model problem":
"${decay_book}/._book006.html#implementation-of-the-generalized-model-problem"
cite{Langtangen_decay}] for details)
has a function
`solver(I, a, b, T, dt, theta)` for solving $u'(t)=-a(t)u(t)+b(t)$ for
$t\in (0,T]$, $u(0)=I$, with time step `dt`.
We reuse this function and call it with $a=b=1$ and $I=\beta$ to solve
the scaled problem:

@@@CODE src-scaling/falling_body.py fromto: from decay_vc import@def unscale
If we want to plot the physical solution, we need an `unscale` function,

@@@CODE src-scaling/falling_body.py fromto: def unscale@from math import

Looking at droplets of water in air, we can fix some of the parameters
and let the size parameter $d$ be the one for experimentation.
The following function sets physical parameters, computes $\beta$,
runs the solver for the scaled problem (`joblib` detects
if it is necessary), and finally plots the scaled curve
$\bar u(\bar t)$ and the unscaled curve $u(t)$.

@@@CODE src-scaling/falling_body.py fromto: def main@plt\.savefig
The most complicated part of the code is related to plotting, but
this part can be skipped when trying to understand how we work with
a scaled model to perform the computations.
The complete program is found in the file
"`falling_body.py`": "${src_scaling}/falling_body.py".

Since $I=0$ implies $\beta=0$, we can run different $d$ values without
any need to recompute $\bar u(\bar t)$ as long as we assume the particle
starts from rest.

From the scaling, we see that $u_c = b/a\sim d^{-2}$ and
also that $t_c=1/a \sim d^{-2}$, so plotting of $u(t)$ with dimensions
for various $d$ values will involve significant variations in the time
and velocity scales. Figure ref{sec:scale:decay:body:fig}
has an example with $d=1,2,3$ mm, where we clearly see the different
time and velocity scales in the figure with unscaled variables.
Note that the scaled velocity is positive because of the sign of $u_c$
(see the box above).

FIGURE: [fig-scaling/falling_body, width=800 frac=1] Velocity of falling body: scaled (left) and with dimensions (right). label{sec:scale:decay:body:fig}


===== Variable coefficients =====
label{sec:scale:decay:jump}

When a prescribed coefficient like $a(t)$ in $u'(t) = -a(t)u(t)$
varies with time one usually also
performs a scaling of this $a$,

!bt
\[ \bar a(\bar t) = \frac{a(t) - a_0}{a_c}, \]
!et
where the goal is to have the scaled $\bar a$
of size unity: $|\bar a|\leq 1$.
This property is obtained by choosing $a_c$ as the maximum value
of $|a(t)-a_0|$ for $t\in [0,T]$, which is usually a quantity that
can be estimated since $a(t)$ is known as a function of $t$. The $a_0$
parameter can be chosen as 0 here. (It could be tempting to
choose $a_0=\min_t a(t)$ so that $0\leq \bar a\leq 1$, but then there
is at least one point where $\bar a = 0$ and
the differential equation collapses to $u'=0$.)

As an example, imagine a decaying cell culture where we at time $t_1$
change the environment (typically the nutrition)
such that the death rate increases by a factor 5.
Mathematically, $a(t) = d$ for
$t < t_1$ and $a(t)=5d$ for $t\geq t_1$. The model reads $u'=-a(t)u$, $u(0)=I$.

The $a(t)$ function is scaled by letting the characteristic size be
$a_c=d$ and $a_0=0$:

!bt
\[ \bar a (\bar t) = \left\lbrace\begin{array}{ll}
1, & \bar t < t_1/t_c\\
5, & \bar t \geq t_1/t_c
\end{array}\right.
\]
!et

idx{dimensionless number}

The scaled equation becomes

!bt
\[ \frac{u_c}{t_c}\frac{d\bar u}{d\bar t} = a_c\bar a(\bar t) u_c\bar u,\quad
u_c\bar u(0) = I\tp\]
!et
The natural choice of $u_c$ is $I$.
The characteristic time, previously taken as $t_c=1/a$, can now be
chosen as $t_c=t_1$ or $t_c=1/d$.
With $t_c=1/d$ we get

!bt
\begin{equation}
\bar u'(\bar t)=-\bar a\bar u,\quad \bar u(0)=1,\quad
\bar a = \left\lbrace\begin{array}{ll}
1, & \bar t < \gamma\\
5, & \bar t \geq \gamma
\end{array}\right.
label{sec:scale:decay:jump:eq1}
\end{equation}
!et
where

!bt
\[ \gamma = t_1 d\]
!et
is a dimensionless number in the problem. With $t_c=t_1$, we get

!bt
\[ \bar u'(\bar t)=-\gamma\bar a\bar u,\quad \bar u(0)=1,\quad
\bar a = \left\lbrace\begin{array}{ll}
1, & \bar t < 1\\
5, & \bar t \geq 1
\end{array}\right.\]
!et
The dimensionless parameter $\gamma$ is now in the equation rather than in
the definition of $\bar a$. Both problems involve $\gamma$, which
is the ratio between the time when the environmental change happens
and the typical time for the decay ($1/d$).

A computation with the scaled model (ref{sec:scale:decay:jump:eq1})
and the original model with dimensions appears in
Figure ref{sec:scale:decay:jump:fig}.

FIGURE: [fig-scaling/decay_jump, width=800 frac=1] Exponential decay with jump: scaled model (left) and unscaled model (right). label{sec:scale:decay:jump:fig}


===== Scaling a cooling problem with constant surroundings =====
label{scale:decay:cooling:const}

The heat exchange between a body at temperature $T(t)$ and the
surroundings at constant temperature $T_s$
can be modeled by Newton's law of cooling:

!bt
\begin{equation}
T'(t) = -k(T-T_s),\quad T(0)=T_0,
label{scale:decay:cooling:model}
\end{equation}
!et
where $k$ is a prescribed heat transfer coefficient.

=== Exact solution ===

An analytical solution is always handy to have as a control of the
choice of scales. The solution of (ref{scale:decay:cooling:model})
is by standard methods for ODEs found to be
$T(t) = T_s + (T_0 - T_s)e^{-kt}$.

=== Scaling ===

Physically, we expect the temperature to start at $T_0$ and then
to move toward the surroundings ($T_s$). We therefore expect
that $T$ lies between $T_0$ and $T_s$. This is mathematically
demonstrated by the analytical solution as well. A proper scaling
is therefore to scale and translate $T$ according to
!bt
\begin{equation}
\bar T = \frac{T-T_0}{T_s-T_0}
label{scale:decay:cooling:Tbar}
\tp
\end{equation}
!et
Now, $0\leq \bar T\leq 1$.

Scaling time by $\bar t = t/t_c$ and inserting
$T= T_0 + (T_s-T_0)\bar T$ and $t=t_c\bar t$ in the
problem (ref{scale:decay:cooling:model}) gives

!bt
\[ \frac{d\bar T}{d\bar t} = - t_ck(\bar T - 1),\quad \bar T(0) = 0
\tp
\]
!et
A natural choice, as argued in other exponential decay problems,
is to choose $t_ck=1$, which leaves us with the scaled problem
!bt
\begin{equation}
\frac{d\bar T}{d\bar t} = - (\bar T - 1),\quad \bar T(0)=0
label{scale:decay:cooling:Tbar:eq}
\tp
\end{equation}
!et
No physical parameter enters this problem!
Our scaling implies that $\bar T$ starts at
0 and approaches 1 as $\bar t\rightarrow\infty$, also in the case
$T_s < T_0$. The physical temperature is always recovered as
!bt
\begin{equation}
T(t) = T_0 + (T_s-T_0)\bar T (k\bar t)
label{scale:decay:cooling:T}
\tp
\end{equation}
!et

=== Software ===

An implementation for (ref{scale:decay:cooling:model}) works for
(ref{scale:decay:cooling:Tbar:eq}) by setting $k=1$, $T_s=1$, and $T_0=0$.

=== Alternative scaling ===

An alternative temperature scaling is to choose
!bt
\begin{equation}
\bar T = \frac{T-T_s}{T_0-T_s}
label{scale:decay:cooling:Tbar2}
\tp
\end{equation}
!et
Now $\bar T=1$ initially and approaches zero as $t\rightarrow\infty$.
The resulting scaled ODE problem then becomes

!bt
\begin{equation}
\frac{d\bar T}{d\bar t} = - \bar T,\quad \bar T(0)=1
label{scale:decay:cooling:Tbar:eq2}
\tp
\end{equation}
!et

===== Scaling a cooling problem with time-dependent surroundings =====
label{scale:decay:cooling:osc}

Let us apply the model (ref{scale:decay:cooling:model}) in
case the surrounding temperature varies in time. Say we have
an oscillating temperature environment according to

!bt
\begin{equation}
T_s(t) = T_m + a\sin(\omega t)
label{scale:decay:cooling:Tst}
\tp
\end{equation}
!et
# #ifdef NOT
This $T_s$ function varies between $T_m-a$ and $T_m+a$ so
a scaled version of it might be

!bt
\[ \bar T_s = \frac{T_s - T_m}{2a} = \sin(\omega t)\tp\]
!et
# #endif

=== Exact solution ===

It is possible to solve the differential equation problem analytically,
and such a solution is a good help to see what scales are.
In general, using the method of integrating factors for the
original differential equation, we have

!bt
\[ T(t) = T_0e^{-kt} + e^{-kt}k\int_0^t e^{k\tau}T_s(\tau)d\tau\tp\]
!et
With $T_s(t)=T_m + a\sin (\omega t)$ we can use SymPy to help us with
integrations (note that we use `w` for $\omega$ in the computer code):

!bc pycod
>>> from sympy import *
>>> t, k, T_m, a, w = symbols('t k T_m a w', real=True, positive=True)
>>> T_s = T_m + a*sin(w*t)
>>> I = exp(k*t)*T_s
>>> I = integrate(I, (t, 0, t))
>>> Q = k*exp(-k*t)*I
>>> Q = simplify(expand(Q))
>>> print Q
(-T_m*k**2 - T_m*w**2 + a*k*w +
(T_m*k**2 + T_m*w**2 + a*k**2*sin(t*w) -
a*k*w*cos(t*w))*exp(k*t))*exp(-k*t)/((k**2 + w**2))
!ec
Reordering the result, we get

!bt
\[ T(t) = T_0e^{-kt} + T_m(1- e^{-kt}) +  (k^2 + \omega^2)^{-1}(ak\omega e^{-kt}
+ ak\sin (\omega t) - akw\cos(\omega t))\tp\]
!et

idx{dimensionless number}

=== Scaling ===

The scaling (ref{scale:decay:cooling:Tbar}) brings in a time-dependent
characteristic temperature scale $T_s-T_0$. Let us start with a
fixed scale, where we take the characteristic temperature variation to
be $T_m - T_0$:

!bt
\[ \bar T = \frac{T-T_0}{T_m-T_0}\tp\]
!et
We see from the analytical solution, and realize also by physical
reasoning, that $T$ sets out at $T_0$, but with time, it will oscillate
around $T_m$. The typical average temperature span is therefore
$|T_m-T_0|$, unless $a$ is much larger than $|T_m-T_0|$ or $T_0$ is
very close to $T_m$ (see Exercise ref{sec:scale:exer:decay:cooling:osc} for
a discussion of these cases).

We get from the differential equation, with $t_c=1/k$ as in the former
case,

!bt
\[ k(T_m-T_0)\frac{d\bar T}{d\bar t} = -k((T_m-T_0)\bar T + T_0 - T_m - a
\sin(\omega t),\]
!et
resulting in

!bt
\begin{equation}
\frac{d\bar T}{d\bar t} = -\bar T + 1 + \alpha\sin (\beta \bar t),\quad
\bar T(0)=0,
label{scale:decay:cooling:model:scaled}
\end{equation}
!et
where we have two dimensionless numbers:

!bt
\[ \alpha = \frac{a}{T_m-T_0},\quad \beta = \frac{\omega}{k}\tp\]
!et
The $\alpha$ quantity measures the ratio of temperatures: amplitude of
oscillations versus distance from initial temperature to the average
temperature for large times.  The $\beta$ number is the ratio of the
two time scales: the frequency of the oscillations in $T_s$ and the
inverse e-folding time of the heat transfer. For clear interpretation
of $\beta$ we may introduce the period $P=2\pi/\omega$ of the
oscillations in $T_s$ and the e-folding time $e=1/k$. Then $\beta =
2\pi e/P$ and measures the e-folding time versus the period.

!bnotice Remark
The original problem features five physical parameters: $k$, $T_0$,
$T_m$, $a$, and $\omega$, but only two dimensionless numbers appear in the
scaled model (ref{scale:decay:cooling:model:scaled}).
In fact, this is an example where application of the Pi theorem
(see Section ref{scale:dimunit:Pi}) falls
short. Since, only time and temperature are involved as unit types, the
theorem predicts that the five parameters yields three dimensionless numbers,
not two. Scaling of the differential equations, on the other hand,
shows us that the two parameters
$T_m$ and $T_0$ affect the nature of the problem only through their difference.
!enotice

=== Software ===

Implementations of the unscaled problem (ref{scale:decay:cooling:model})
can be reused for the scaled model by setting $k=1$, $T_0=0$, and
$T_s(t) = 1 + \alpha\sin (\beta \bar t)$ ($T_m=1$, $a=\alpha$, $\omega =\beta$).
The file "`osc_cooling.py`": "${src_scaling}/osc_cooling.py" contains
solvers for the problem with dimensions and
for the scaled problem. The figure below
shows three cases of $\beta$ values: small, medium, and large.

FIGURE: [fig-scaling/osc_cooling, width=500 frac=0.8]

For the small $\beta$ value, the oscillations in the surrounding
temperature are slow enough compared to $k$ for the heating and
cooling process to follow the surrounding temperature, with a small
time lag. For larger $\beta$, the heating and cooling require more
time, and the oscillations get smaller.

=== Discussion of the time scale ===

Looking at the analytical insight we have obtained, we
observe that $T(t)$ has two characteristic
terms in time: $e^{-kt}$ and $\sin(\omega t)$. The former points to a time
scale $t_c=1/k$, while the latter to $t_c=1/\omega$.
Which one should be chosen? Bringing the temperature from $T_0$ to
the level of the surroundings, $T_m$, goes like $e^{-kt}$, so
in this process $t_c=1/k$ is the characteristic time. Thereafter,
the body's temperature just responds to the oscillations and the
$\sin (\omega t)$ (and $\cos(\omega t)$) term dominates. For these large times,
$t_c=1/\omega$ is the appropriate time scale. Choosing $t_c=1/\omega$
results in

!bt
\begin{equation}
\frac{d\bar T}{d\bar t} = -\beta^{-1}(\bar T - (1 + \alpha\sin (\bar t))),\quad
\bar T(0)=0\tp
label{scale:decay:cooling:model:scaled2}
\end{equation}
!et


Let us illustrate another, less effective, scaling.
The temperature scale in
(ref{scale:decay:cooling:Tbar}) looks natural, so we apply this
choice of scale. The characteristic temperature $T_0-T_s$
now involves
a time-dependent term $T_s(t)$. The mathematical steps become a bit
more technically involved:

!bt
\[ T(t) = T_0 + (T_s(t)-T_0)\bar T,\]
!et

!bt
\[ \frac{dT}{dt} = \frac{dT_s}{dt}\bar T +
(T_s-T_0)\frac{d\bar T}{d\bar t}\frac{d\bar t}{dt}
\tp
\]
!et
With $\bar t = t/t_c = kt$ we get from the differential equation

!bt
\[
\frac{dT_s}{dt}\bar T +
(T_s-T_0)\frac{d\bar T}{d\bar t}k
= -k(\bar T - 1)(T_s - T_0),
\]
!et
which after dividing by $k(T_s-T_0)$ results in

!bt
\[
\frac{d\bar T}{d\bar t} = -(\bar T - 1) -
\frac{dT_s}{dt}\frac{\bar T}{k(T_s-T_0},
\]
!et
or

!bt
\[
\frac{d\bar T}{d\bar t} = -(\bar T - 1) -
\frac{a\omega\cos(\omega \bar t/k)}{k(T_m + a\sin(\omega \bar t/k) -T_0)}\bar T
\tp
\]
!et
The last term is complicated and becomes more tractable if we factor
out dimensionless numbers. To this end, we scale $T_s$ by (e.g.) $T_m$,
which means to factor out $T_m$ in the denominator. We are then
left with

!bt
\begin{equation}
\frac{d\bar T}{d\bar t} = -(\bar T - 1) -
\alpha\beta \frac{\cos(\beta \bar t)}{1 + \alpha\sin(\beta\bar t) - \gamma}
\bar T,
label{scale:decay:cooling:Tbar:eq3}
\end{equation}
!et
where $\alpha$, $\beta$, and $\gamma$ are dimensionless numbers
characterizing the relative importance of parameters in the problem:

!bt
\begin{equation}
\alpha=a/T_m,\quad \beta = \omega/k,\quad \gamma = T_0/T_m
\tp
\end{equation}
!et
We notice that (ref{scale:decay:cooling:Tbar:eq3})
is not a special case of the original problem
(ref{scale:decay:cooling:model}). Furthermore, the original five
parameters $k$, $T_m$, $a$, $\omega$, and
$T_0$ are reduced to three dimensionless parameters.
We conclude that this scaling is inferior, because
using the temperature scale $T_0-T_m$ enables reuse of the software
for the unscaled problem and only two dimensionless parameters appear
in the scaled model.

Let us briefly mention another possible temperature scaling:
$\bar T = T/T_m$, motivated by the fact that as $t\rightarrow\infty$,
$T$ will oscillate around $T_m$, so this $\bar T$ will oscillate around
unity. We get the dimensionless ODE

!bt
\[ \frac{d\bar T}{d\bar t} = -(\bar T - (1 + \delta\sin(\beta\bar t))),\]
!et
with a new dimensionless parameter $\delta = a/T_m$. However, the initial
condition becomes $\bar T(0)=T_0/T_m$, and the ratio $T_0/T_m$ is
a third dimensionless parameter, so this scaling is also inferior to the
one above with only two parameters.

===== Scaling a nonlinear ODE =====
label{sec:scale:decay:nonlinear}

idx{logistic equation}

Exponential growth models, $u'=au$, are not realistic in environments
with limited resources. The idea is then to assume that
the growth rate $a$ decreases with $u$ and vanishes when we reach the maximum
value $M$ of $u$ the environment can sustain. The initial growth rate
is set to $r$: $a(0)=\varrho$.
In general, this reasoning gives rise to models

!bt
\begin{equation}
u' = a(u)u,\quad u(0)=I,
label{sec:scale:decay:nonlinear:model1}
\end{equation}
!et
with the logistic model, corresponding to $a(u)=\varrho(1-u/M)$,
as the simplest:

!bt
\begin{equation}
u' = \varrho u(1-u/M),\quad u(0)=I\tp
label{sec:scale:decay:nonlinear:model2}
\end{equation}
!et
A general choice of $a$ may be $a(u)=\varrho(1-u/M)^p$ for some exponent $p$.

idx{dimensionless number}

=== Scaling ===

Let us scale (ref{sec:scale:decay:nonlinear:model1}) with
$a(u)=\varrho (1-u/M)^p$.
The natural scale for $u$ is $M$ ($u_c=M$), since we know that
$0 < u\leq M$, and this makes the dimensionless $\bar u = u/M \in (0,1]$.
The function $a(u)$ is
typically varying between 0 and $\varrho$, so it can be scaled as

!bt
\[ \bar a(\bar u) = \frac{a(u)}{\varrho} = (1 - \frac{u}{M})^p =
(1 - \bar u)^p\tp\]
!et
Time is scaled as $\bar t = t/t_c$ for some suitable characteristic time $t_c$.
Inserted in (ref{sec:scale:decay:nonlinear:model1}), we get

!bt
\[ \frac{u_c}{t_c}\frac{d\bar u}{d\bar t} = \varrho\bar a u_c\bar u,\quad u_c\bar u(0)=I,\]
!et
resulting in

!bt
\[ \frac{d\bar u}{d\bar t} = t_c \varrho (1 - \bar u)^p \bar u,\quad
\bar u(0) =\frac{I}{M}\tp\]
!et
A natural choice is $t_c =1/\varrho$ as in other exponential growth models
since it leads to the term on the right-hand side to be about unity,
as the left-hand side, if the scaling is physically correct.
Introducing the dimensionless parameter

!bt
\[ \alpha = \frac{I}{M},\]
!et
measuring the fraction of the initial population compared to the maximum
one, we get the dimensionless model

!bt
\begin{equation}
\frac{d\bar u}{d\bar t} = (1 - \bar u)^p \bar u,\quad
\bar u(0) =\alpha\tp
label{sec:scale:decay:nonlinear:model1:scaled}
\end{equation}
!et
Here, we have two dimensionless parameters: $\alpha$ and $p$. A classical
logistic model with $p=1$ has only one dimensionless variable.

=== Alternative scaling ===

We could try another scaling of $u$ where we also translate $\bar u$:

!bt
\[ \bar u = \frac{u-I}{M}\tp \]
!et
This choice of $\bar u$ results in

!bt
\begin{equation}
\frac{d\bar u}{d\bar t} = (1 - \alpha - \bar u)^p \bar u,\quad
\bar u(0) =0\tp
label{sec:scale:decay:nonlinear:model1:scaled2}
\end{equation}
!et
The essential difference between (ref{sec:scale:decay:nonlinear:model1:scaled})
and (ref{sec:scale:decay:nonlinear:model1:scaled2}) is that
$\bar u\in [\alpha, 1]$ in the former and $\bar u \in [0, 1-\alpha]$ in
the latter. Both models involve the dimensionless numbers $\alpha$ and $p$.
An advantage of (ref{sec:scale:decay:nonlinear:model1:scaled})
is that software for the unscaled model can easily be used for the
scaled model by choosing $I=\alpha$, $M=1$, and $\varrho=1$.

===== SIR ODE system for spreading of diseases =====

The field of epidemiology frequently applies ODE systems to describe
the spreading of diseases, such as smallpox, measles, plague, ordinary
flu, swine flu, and HIV. Different models include different effects,
which are reflected in dimensionless numbers. Most of the effects are
modeled as exponential decay or growth of the dependent variables.

The simplest model has three categories of people: susceptibles (S)
who can get the disease, infectious (I) who are infected and may
infect susceptibles, and recovered (R) who have recovered from the
disease and gained immunity. We introduce $S(t)$, $I(t)$, and $R(t)$
as the number of people in the categories S, I, and R, respectively.
The model, naturally known as the "SIR model":
"https://en.wikipedia.org/wiki/Epidemic_model", takes the form a
system of ODEs:

!bt
\begin{align}
\frac{dS}{dt} &= - \beta SI,
label{scale:SIR:S}\\
\frac{dI}{dt} &= \beta SI - \nu I,
label{scale:SIR:I}\\
\frac{dR}{dt} &= \nu I,
label{scale:SIR:R}
\end{align}
!et
where $\beta$ and $\nu$ are empirical constants. The average time for recovering
from the disease can be shown to be $\nu^{-1}$, but $\beta$ is much harder
to estimate, so working with a scaled model where $\beta$ is ``scaled away''
is advantageous.

[hpl: Geir asked about the background for this model. A link to Wikipedia
is now inserted, but in general all models in this book are just listed
without further explanations. Do we need more references? The idea was
that ``here are the ODEs'' and if understanding of the ``physics'' is
necessary, the reader must have the necessary background. Maybe state
this in the preface?]
[Geir: I will look at the example again, but even more on the chemistry example. I guess we need to be pragmatic
concerning background and explanations.
In short: do not add more references.]
=== Scaling ===

It is natural to scale $S$, $I$, and $R$ by, e.g., $S(0)$:

!bt
\[ \bar S = \frac{S}{S(0)},\quad \bar I = \frac{I}{S(0)},\quad
\bar R = \frac{R}{S(0)}\tp
\]
!et
Introducing $\bar t = t/t_c$, we arrive at the equations

!bt
\begin{align*}
\frac{d\bar S}{d\bar t} &= - t_c S(0) \beta\bar S\bar I,
\\
\frac{d\bar I}{d\bar t} &= t_c S(0) \beta \bar S\bar I - t_c \nu \bar I,
\\
\frac{d\bar R}{d\bar t} &= t_c \nu I,
\end{align*}
!et
with initial conditions $\bar S(0)=1$, $\bar I(0)=I_0/S(0)=\alpha$, and
$\bar R(0)=R(0)/S(0)$. Normally, $R(0)=0$.

Taking $t_c=1/\nu$, corresponding to a time unit equal to the time it takes
to recover from the disease, we end up with the scaled model

!bt
\begin{align}
\frac{d\bar S}{d\bar t} &= - R_0\bar S\bar I,
label{scale:SIR:S2}\\
\frac{d\bar I}{d\bar t} &= R_0 \bar S\bar I - \bar I,
label{scale:SIR:I2}\\
\frac{d\bar R}{d\bar t} &= I,
label{scale:SIR:R2}
\end{align}
!et
with $\bar S(0)=1$, $\bar I(0)=\alpha$, $\bar R(0)=0$, and $R_0$ as
the dimensionless number

!bt
\begin{equation}
R_0 = \frac{S(0)\beta}{\nu}\tp
\end{equation}
!et
We see from (ref{scale:SIR:I2}) that to make the disease spreading,
$d\bar I/d\bar t >0$, and therefore $R_0 S(0) - 1 > 0$ or $R_0 > 1$
since $S(0)=1$.
Therefore, $R_0$ reflects the disease's ability to spread and is
consequently an important dimensionless quantity, known as the "basic
reproduction number": "https://en.wikipedia.org/wiki/Basic_reproduction_number".
This number reflects the number of infected people caused by one infectious
individual during the time period of the disease.

Looking at (ref{scale:SIR:I}), we see that to increase $I$ initially,
we must have $dI/dt >0$ at $t=0$, which implies
$\beta I(0)S(0) - \nu I(0) >0$, i.e., $R_0 > 1$.

=== Software ===

Any implementation of the SIR model with dimensions can be reused for
the scaled model by setting $\beta = R_0$, $\nu = 1$, $S(0)=1-\alpha$,
and $I(0)=\alpha$. Below is a plot with two cases: $R_0=2$ and $R_0=5$,
both with $\alpha=0.02$.

<linebreak>
<linebreak>

FIGURE: [fig-scaling/SIR1, width=800 frac=1]

<linebreak>
<linebreak>


=== Alternative scaling ===

Adding (ref{scale:SIR:S})-(ref{scale:SIR:R}) shows that

!bt
\[ \frac{dS}{dt}+\frac{dI}{dt}+\frac{dR}{dt}=0\quad\Rightarrow\quad
S+I+R=\hbox{const}=N,\]
!et
where $N$ is the size of the population.
We can therefore scale $S$, $I$, and $R$ by the total
population $N=S(0)+I(0)+R(0)$:

!bt
\[ \bar S = \frac{S}{N},\quad \bar I = \frac{I}{N},\quad
\bar R = \frac{R}{N}\tp
\]
!et
With the same time scale, one gets the system (ref{scale:SIR:S2})-(ref{scale:SIR:R2}), but with $R_0$ replaced by the dimensionless number:

!bt
\begin{equation}
\tilde R_0 = \frac{N\beta}{\nu}\tp
\end{equation}
!et
The initial conditions become $\bar S(0)=1-\alpha$, $\bar I(0)=\alpha$,
and $\bar R(0)=0$.

For the disease to spread at $t=0$, we must have $\tilde R_0 \bar S(0) > 1$,
but $\tilde R_0 \bar S(0) = N\beta/\nu \cdot S(0)/N = R_0$, so the
criterion is still $R_0 > 1$. Since $R_0$ is a more famous number than
$\tilde R_0$, we can write the ODEs with $R_0/S(0) = R_0/(1-\alpha)$
instead of $\tilde R_0$.

Choosing $t_c$ to make the $SI$ terms balance the time derivatives,
$t_c = (N\beta)^{-1}$, moves $\tilde R_0$ (or $R_0$ if we scale
$S$, $I$, and $R$ by $S(0)$) to the $I$ terms:

!bt
\begin{align*}
\frac{d\bar S}{d\bar t} &= - \bar S\bar I,
\\
\frac{d\bar I}{d\bar t} &= \bar S\bar I - \tilde R_0^{-1} \bar I,
\\
\frac{d\bar R}{d\bar t} &= \tilde R_0^{-1} I\tp
\end{align*}
!et

===== SIRV model with finite immunity =====

A common extension of the SIR model involves finite immunity: after
some period of time, recovered individuals lose their immunity
and become susceptibles again. This is modeled as
a leakage $-\mu R$ from the R to the S category, where $\mu^{-1}$
is the average time it takes to lose immunity.
Vaccination is another extension: a fraction $pS$ is removed from the
S category by successful vaccination and brought to a new category V (the
vaccinated). The ODE model reads

!bt
\begin{align}
\frac{dS}{dt} &= - \beta SI - pS + \mu R,
label{scale:SIRV:S}\\
\frac{dI}{dt} &= \beta SI - \nu I,
label{scale:SIRV:I}\\
\frac{dR}{dt} &= \nu I -\mu R,
label{scale:SIRV:R}\\
\frac{dV}{dt} &= p S\tp
label{scale:SIRV:V}
\end{align}
!et
Using $t_c=1/\nu$ and scaling the unknowns by $S(0)$, we arrive at
the dimensionless model

!bt
\begin{align}
\frac{d\bar S}{d\bar t} &= - R_0 \bar S \bar I - \delta S + \gamma \bar R,
label{scale:SIRV:S2}\\
\frac{d\bar I}{d\bar t} &= R_0 \bar S \bar I - \bar I,
label{scale:SIRV:I2}\\
\frac{d\bar R}{d\bar t} &= \bar I -\gamma \bar R,
label{scale:SIRV:R2}\\
\frac{d\bar V}{d\bar t} &= \delta \bar S,
label{scale:SIRV:V2}
\end{align}
!et
with two new dimensionless parameters:

!bt
\[ \gamma = \frac{\mu}{\nu},\quad \delta = \frac{p}{\nu}\tp \]
!et
The quantity $p^{-1}$ can be interpreted as the average time it takes
to vaccinate a susceptible successfully. Writing $\gamma = \nu^{-1}/\mu^{-1}$
and $\delta = \nu^{-1}/p^{-1}$ gives the interpretation that $\gamma$
is the ratio of the average time to recover and the average time to
lose immunity, while $\delta$ is the ratio of the average time to recover
and the average time to successfully vaccinate a susceptible.

The plot in Figure ref{sec:scale:SIRV:fig} has $\gamma = 0.05$, i.e.,
loss of immunity takes 20 weeks if it takes one week to recover from
the disease. The left plot corresponds to no vaccination, while the
right has $\delta = 0.5$ for a vaccination campaign that lasts from
day 7 to day 15. The value $\delta =0.5$ reflects that
it takes two weeks to successfully
vaccinate a susceptible, but the effect of vaccination is still dramatic.

FIGURE: [fig-scaling/SIRV2, width=800 frac=1] Spreading of a disease with loss of immunity (left) and added vaccination (right). label{sec:scale:SIRV:fig}


===== Michaelis-Menten kinetics for biochemical reactions =====
label{scale:MMK}

A classical reaction model in biochemistry describes how a
substrate S is turned into a product P with aid of an enzyme E.
S and E react to form a complex ES in the first stage of the reaction.
In the second stage, ES is turned into E and P.
Introducing the amount of S, E, ES, and P by $[S]$, $[E]$, $[ES]$, and
$[P]$, can be written as

!bt
\begin{align}
\frac{d[ES]}{dt} &= k_+[E][S] - k_v[ES] - k_-[ES],
label{scale:MMK:ES1}\\
\frac{d[P]}{dt} &= k_v[ES],
label{scale:MMK:P1}\\
\frac{d[S]}{dt} &= -k_+[E][S] + k_-[ES],
label{scale:MMK:S1}\\
\frac{d[E]}{dt} &= -k_+[E][S] + k_-[ES] + k_v[ES]\tp
label{scale:MMK:E1}
\end{align}
!et
The initial conditions are $[ES](0)=[P](0)=0$, and $[S]=S_0$, $[E]=E_0$.
Three rate constants are involved: $k_+$, $k_-$, and $k_v$.
The above mathematical model is known as "Michaelis-Menten kinetics":
"https://en.wikipedia.org/wiki/Michaelis-Menten_kinetics".

The amount of substance is measured in the unit "mole": "https://en.wikipedia.org/wiki/Mole_(unit)" (mol). From the equations we can see that
$k_+$ is measured in $\hbox{s}^{-1}\hbox{mol}^{-1}$, while $k_-$ and
$k_v$ are measured in $\hbox{s}^{-1}$. It is convenient to get rid of
the mole unit for the amount of a substance. When working with
dimensionless quantities, only ratios of the rate constants and not their
specific values are needed.

=== Classical analysis ===

A common assumption is that the formation of $[ES]$ is very fast and that
it quickly reaches an equilibrium state, $[ES]^{\prime}=0$. Equation
(ref{scale:MMK:ES1}) then reduces to the algebraic equation

!bt
\[ k_+[E][S] - k_v[ES] - k_-[ES] = 0, \]
!et
which leads to

!bt
\begin{equation}
\frac{[E][S]}{[ES]} = \frac{k_- + k_v}{k_+} = K,
label{scale:MMK:K}
\end{equation}
!et
where $K$ is the famous Michaelis constant - the equilibrium constant
between $[E][S]$ and $[ES]$.

Another important observation is that the ODE system implies
two conservation equations, arising from simply adding the ODEs:

!bt
\begin{align}
\frac{d[ES]}{dt} + \frac{d[E]}{dt} & =0,\\
\frac{d[ES]}{dt} + \frac{d[S]}{dt} + \frac{d[P]}{dt} &= 0,
\end{align}
!et
from which it follows that

!bt
\begin{align}
[ES] + [E] &= E_0,
label{scale:MMK:cons1}\\
[ES] + [S] + [P] &= S_0\tp
label{scale:MMK:cons2}
\end{align}
!et

We can use (ref{scale:MMK:cons1}) and (ref{scale:MMK:K}) to
express $[E]$ by $[S]$:

!bt
\[ [E] = E_0 - [ES] = E_0 - \frac{[E][S]}{K}\quad\Rightarrow\quad
[E] = \frac{KE_0}{K + [S]}\tp\]
!et
Now (ref{scale:MMK:S1}) can be developed to an equation involving
$[S]$ only:

!bt
\begin{align}
\frac{d[S]}{dt} &= -k_+[E][S] + k_-[ES]\nonumber\\
& = (-k_+ + \frac{k_-}{K})[E][S]\nonumber\\
& = (-k_+ + \frac{k_-}{K})[S]\frac{KE_0}{K + [S]}\nonumber\\
& = - \frac{k_-E_0}{[S] + K}\tp
label{scale:MMK:Seq1}
\end{align}
!et
We see that the parameter $K$ is central.

# #ifdef EXTRA
## This is classical analysis taken from somewhere:

Using (ref{scale:MMK:cons1}), we can eliminate $[E]$ and obtain a
system of only two ODEs,

!bt
\begin{align}
\frac{d[ES]}{dt} &= k_+([ES]-E_0)[S] - (k_v + k_-)[ES],\\
\frac{d[S]}{dt} &= -k_+([ES]-E_0)[S] + k_-[ES]\tp
\end{align}
!et


!bt
\[ k_+([ES]-E_0)[S] - (k_v + k_-)[ES]=0\quad\Rightarrow\quad
[ES] = \frac{E_0[S]}{[S] - K},
\]
!et
where

!bt
\[ K = \frac{k_- + k_v}{k_+},\]
!et
is the Michaelis constant. Using the expression for $[ES]$ in the
equation for $[S]$ gives

!bt
\begin{equation}
\frac{d[S]}{dt} = \frac{k_vE_0[S]}{[S] + K}\tp
label{scale:MMK:Seq1}
\end{equation}
!et
We see that the parameter $K$ is central.
# #endif

=== Dimensionless ODE system ===

Let us reason how to make the original ODE system dimensionless.
Aiming at $[S]$ and $[E]$ of unit size, two obvious dimensionless
unknowns are

!bt
\[ \bar S = \frac{[S]}{S_0},\quad
\bar E = \frac{[E]}{E_0}\tp\]
!et
For the other two unknowns we just introduce scales to be determined
later:

!bt
\[
\bar P = \frac{[P]}{P_c},\quad
\bar{Q} = \frac{[ES]}{Q_c}\tp
\]
!et
With $\bar t = t/t_c$ the equations become

!bt
\begin{align*}
\frac{d\bar Q}{d\bar t} &= t_ck_+\frac{E_0S_0}{Q_c}\bar E\bar S
- t_c(k_v + k_-)\bar Q,\\
\frac{d\bar P}{d\bar t} &= t_ck_v\frac{Q_c}{P_c}\bar Q,\\
\frac{d\bar S}{d\bar t} &= -t_ck_+E_0\bar E\bar S
+ t_ck_-\frac{Q_c}{S_0}\bar Q,\\
\frac{d\bar E}{d\bar t} &= -t_ck_+S_0\bar E\bar S
+ t_c(k_- + k_v)\frac{Q_c}{E_0}\bar Q\tp
\end{align*}
!et
# http://www.biosym.uzh.ch/modules/models/Michaelis_Menten/michaelis_menten.html
# http://deepblue.lib.umich.edu/bitstream/handle/2027.42/26960/0000527.pdf?sequence=1
# http://www.math.ubc.ca/~keshet/EnzKin.pdf
# Good (but complicated): https://people.maths.ox.ac.uk/maini/PKM%20publications/9.pdf
# http://www.ncbi.nlm.nih.gov/pmc/articles/PMC2932968/ (read this one - it is the best, this one has units for the constants too and typical values of constants)
# Murray has S_c=S_0, Q_c=E_0 (that is common)
# All use the long time scale with E_0
# Murray has much complicated analysis before selecting scales...
# Can find Q_c from Q'=0 which gives Q_c=E_0S_0/K

=== Determining scales ===

Choosing the scales is actually a quite complicated matter that requires
extensive analysis of the equations to determine the characteristics of
the solutions. Much literature is written about this, but here we shall
take a simplistic and pragmatic approach.
Besides the Michaelis constant $K$, there is another important parameter,

!bt
\[ \epsilon = \frac{E_0}{S_0},\]
!et
because most applications will involve a small $\epsilon$.
We shall have $K$ and $\epsilon$ in mind while choosing scales such that
these symbols appear naturally in the scaled equations.

Looking at the equations, we see that the $K$ parameter will appear
if $t_c\sim 1/k_+$. However, $1/k_+$ does not have the dimension
$\hbox{[T]}^{-1}$ as required, so we need to add a factor with dimension
mol. A natural choice is
$t_c^{-1}=k_+S_0$ or $t_c^{-1}=k_+E_0$. Since often $S_0\gg E_0$,
the former $t_c$ is a short time scale and the latter is a long
time scale. If the interest is in the long time scale, we set

!bt
\[ t_c = \frac{1}{k_+E_0}\tp\]
!et
The equations then take the form

!bt
\begin{align*}
\frac{d\bar Q}{d\bar t} &= \frac{S_0}{Q_c}\bar E\bar S
- KE_0^{-1}\bar Q,\\
\frac{d\bar P}{d\bar t} &= \frac{k_v}{k_+ E_0}\frac{Q_c}{P_c}\bar Q,\\
\frac{d\bar S}{d\bar t} &= -\bar E\bar S
+ \frac{k_-}{k_+E_0}\frac{Q_c}{S_0}\bar Q,\\
\frac{d\bar E}{d\bar t} &= -\epsilon^{-1}\bar E\bar S
+ K\frac{Q_c}{E_0^2}\bar Q\tp
\end{align*}
!et
The $[ES]$ variable starts and ends at zero, and its maximum value
can be roughly estimated from the equation for $[ES]^\prime$
by setting $[ES]^\prime = 0$, which gives

!bt
\[ [ES] = \frac{[E][S]}{K}\approx \frac{E_0S_0}{K},\]
!et
where we have approximated $[E][S]$ by $E_0S_0$. This estimate of $[ES]$
at its maximum can be used as the characteristic size $Q_c$:

!bt
\[ Q_c = \frac{E_0S_0}{K}\tp\]
!et

The equation for $\bar P$ simplifies if we choose $P_c=Q_c$.
With these assumptions one gets

!bt
\begin{align*}
\frac{d\bar Q}{d\bar t} &= KE_0^{-1} (\bar E\bar S
- \bar Q),\\
\frac{d\bar P}{d\bar t} &= \frac{k_v}{k_+ E_0}\bar Q,\\
\frac{d\bar S}{d\bar t} &= -\bar E\bar S
+ \frac{k_-}{k_+E_0}\frac{E_0}{K}\bar Q,\\
\frac{d\bar E}{d\bar t} &= -\epsilon^{-1}\bar E\bar S
+ \epsilon^{-1}\bar Q\tp
\end{align*}
!et
We can now identify the dimensionless numbers

!bt
\[ \alpha = \frac{K}{E_0},\quad \beta = \frac{k_v}{k_+ E_0},
\quad \gamma = \frac{k_-}{k_+E_0},
\]
!et
where we see that $\alpha = \beta + \gamma$, so $\gamma$ can be eliminated,
leading to the final set of equations:

!bt
\begin{align}
\frac{d\bar Q}{d\bar t} &= \alpha (\bar E\bar S
- \bar Q),
label{scale:MMK:Q2}\\
\frac{d\bar P}{d\bar t} &= \beta\bar Q,
label{scale:MMK:P2}\\
\frac{d\bar S}{d\bar t} &= -\bar E\bar S
+ (1 - \beta\alpha^{-1})\bar Q,
label{scale:MMK:S2}\\
\epsilon\frac{d\bar E}{d\bar t} &= -\bar E\bar S + \bar Q\tp
label{scale:MMK:E2}
\end{align}
!et
The five initial parameters ($S_0$, $E_0$, $k_+$, $k_-$, and $k_v$)
are reduced to three dimensionless constants:

 * $\alpha$ is the dimensionless Michaelis constant, reflecting the
   ratio of the production of P and E ($k_v+k_-$) versus the production of
   the complex ($k_+$), made dimensionless by $E_0$,
 * $\epsilon$ is the initial fraction of enzyme relative to the substrate,
 * $\beta$ measures the relative importance of production of P ($k_v$)
   versus production of the complex ($k_+$), made dimensionless by $E_0$.

Observe that software developed for
solving (ref{scale:MMK:ES1})-(ref{scale:MMK:E1}) cannot be reused
for solving (ref{scale:MMK:Q2})-(ref{scale:MMK:E2}) since the latter
system has a slightly different structure.


=== Analysis of the scaled system ===

In the scaled system, we may assume $\epsilon$ small, which from
(ref{scale:MMK:E2}) gives rise to the simplification
$\epsilon\bar E^{\prime}=0$, and thereby the relation $\bar Q = \bar E\bar S$.
The conservation equation $[ES] + [E]= E_0$ reads $Q_c\bar Q + E_0\bar E =
E_0$ such that $\bar E = 1 - Q_c\bar Q/E_0=1- \bar Q S_0/K = 1 - \epsilon^{-1}\alpha^{-1}\bar Q$. The relation $\bar Q=\bar E\bar S$ then becomes

!bt
\[ \bar Q = (1 - \epsilon^{-1}\alpha^{-1}\bar Q)\bar S,\]
!et
which can be solved for $\bar Q$:

!bt
\[ \bar Q = \frac{\bar S}{1 + \epsilon^{-1}\alpha^{-1}\bar S}\tp\]
!et
The equation (ref{scale:MMK:S2}) for $\bar S$ becomes

!bt
\begin{equation}
\frac{d\bar S}{d\bar t} = -\beta\alpha^{-1}\bar Q =
-\frac{\beta\bar S}{\alpha + \epsilon^{-1}\bar S}\tp
label{scale:MMK:Seq2}
\end{equation}
!et
This is a more precise analysis than the one leading to
(ref{scale:MMK:Seq1}) since we now realize that the
mathematical assumption for the simplification is
$\epsilon\rightarrow 0$.

Is (ref{scale:MMK:Seq2}) consistent with (ref{scale:MMK:Seq1})? It is
easy to make algebraic mistakes when deriving scaled equations,
so it is always wise to carry out consistency checks.
Introducing dimensions in (ref{scale:MMK:Seq2}) leads to

!bt
\[
\frac{t_c}{S_0}\frac{d S}{dt} =
\frac{d\bar S}{d\bar t}  =
-\frac{\beta\bar S}{\alpha + \epsilon^{-1}\bar S}
= -\frac{k_v}{k_+E_0}\frac{S}{KE_0^{-1} + E_0^{-1}S_0\bar S}
= -\frac{k_v}{k_+}\frac{\bar S}{K + S},\]
!et
and hence with $t_c^{-1}=k_+E_0$,

!bt
\[ \frac{dS}{dt} = -\frac{k_vE_0 S}{K + S},\]
!et
which is (ref{scale:MMK:Seq1}).

Figure ref{scale:MMK:fig} shows the impact of $\epsilon$: with a moderately small
value (0.1) we see that $\bar Q\approx 0$, which justifies the
simplifications performed above. We also observe that all the unknowns
vary between 0 and about 1, indicating that the scaling is successful
for the chosen dimensionless numbers. The simulations made use of
a time step $\Delta\bar t=0.1$ with a 4th-order Runge-Kutta method,
using $\alpha=1$, $\beta=4$ (relevant code is in the
`simulate_biochemical_process` function in "`session.py`": "${src_scaling}/session.py").

FIGURE: [fig-scaling/biochem, width=700 frac=1] Simulation of a biochemical process. label{scale:MMK:fig}

However, it is of interest to investigate the limit $\epsilon\rightarrow 0$.
Initially, the equation for $d\bar E/d\bar t$ reads
$d\bar E/d\bar t = -\epsilon^{-1}$, which implies a very fast reduction of
$\bar E$. Using $\epsilon=0.005$ and $\Delta\bar t = 10^{-3}$, simulation
results show that $\bar E$ decays to approximately zero at $t=0.03$ while
$\bar S\approx 1$ and $\bar Q \approx \bar P\approx 0$.
This is reasonable since with
very little enzyme in comparison with the substrate ($\epsilon\rightarrow 0$)
very little will happen.

!split
======= Vibration problems =======
label{sec:scale:vib}

We shall in this section
address a range of different second-order ODEs for mechanical
vibrations and demonstrate how to reason about the scaling in
different physical scenarios.

[hpl: Include more figures.]

===== Undamped vibrations without forcing =====
label{sec:scale:vib:undamped}

The simplest differential equation model for mechanical vibrations
reads

!bt
\begin{equation}
mu'' + ku = 0,\quad u(0)=I,\ u'(0)=V\tp
label{sec:scale:vib:undamped:model}
\end{equation}
!et
This is a common model for a vibrating body  with mass $m$ attached
to a linear spring with spring constant $k$ (and force $-ku$).
The quantity $u(t)$ measures the displacement of the body.
Figure ref{sec:scale:vib:undamped:sketch} shows a typical mechanical
sketch of such a system: some mass can move horizontally without friction
and is connected to a spring that exerts a force $-ku$ on the body.

FIGURE: [fig-scaling/oscillator_spring, width=500 frac=0.6] Oscillating body attached to a spring. label{sec:scale:vib:undamped:sketch}

=== The first technical steps of scaling ===

The problem (ref{sec:scale:vib:undamped:model}) has one independent
variable $t$ and one dependent variable $u$. We introduce dimensionless
versions of these variables:

!bt
\[ \bar u =\frac{u}{u_c},\quad\bar t = \frac{t}{t_c},\]
!et
where $u_c$ and $t_c$ are characteristic values of $u$ and $t$.
Inserted in (ref{sec:scale:vib:undamped:model}), we get

!bt
\[ m\frac{u_c}{t_c^2}\frac{d^2\bar u}{d\bar t^2} + ku_c\bar u = 0,
\quad u_c\bar u(0)=I,\quad \frac{u_c}{t_c}\frac{d\bar u}{d\bar t}(0)=V,\]
!et
resulting in

!bt
\begin{equation}
\frac{d^2\bar u}{d\bar t^2} + \frac{t_c^2 k}{m}\bar u = 0,
\quad \bar u(0)=\frac{I}{u_c},\ \bar u'(0)=\frac{Vt_c}{u_c}\tp
label{sec:scale:vib:undamped:model:scaled0}
\end{equation}
!et

What is an appropriate displacement scale $u_c$? The initial condition
$u(0)=I$ is a candidate, i.e., $u_c=I$. But how to choose the time scale?
Making the coefficient in front of the $\bar u$ unity, such that
both terms balance and are of size unity, is a candidate.

=== The exact solution ===

To better see what the proper scales of $u$ and $t$ are, we can look
into the analytical solution of this problem.
Although the exact solution of
(ref{sec:scale:vib:undamped:model}) is quite straightforward to calculate
by hand, we take the opportunity to make use of SymPy to
find $u(t)$. The use of SymPy can later be generalized to vibration
ODEs that are harder to solve by hand.

SymPy need all mathematical symbols to be explicitly created:

!bc pypro
from sympy import *
u = symbols('u', cls=Function)
w = symbols('w', real=True, positive=True)
I, V, C1, C2 = symbols('I V C1 C2', real=True)
!ec
To specify the ODE to be solved, we can make a Python function returning
all the terms in the ODE:

!bc pycod
# Define differential equation: u'' + w**2*u = 0
def ode(u):
    return diff(u, t, t) + w**2*u

diffeq = ode(u(t))
!ec
The `diffeq` variable, defining the ODE, can be passed to a SymPy
function `dsolve` to find the symbolic solution of the ODE:

!bc pycod
s = dsolve(diffeq, u(t))
# s is an u(t) == expression (Eq obj.), s.rhs grabs the expression
u_sol = s.rhs
print u_sol
!ec
The solution that gets printed is `C1*sin(t*w) + C2*cos(t*w)`, indicating
that there are two integration constants `C1` and `C2` to be determined
by the initial conditions. The result of applying these conditions is
a $2\times 2$ linear system of algebraic equations that SymPy can solve
by the `solve` function. The code goes as follows:

!bc pycod
# The solution u_sol contains integration constants C1 and C2
# but these are not symbols, substitute them by symbols
u_sol = u_sol.subs('C1', C1).subs('C2', C2)

# Determine C1 and C2 from the initial conditions
ic = [u_sol.subs(t, 0) - I, u_sol.diff(t).subs(t, 0) - V]
print ic   # 2x2 algebraic system for C1 and C2
s = solve(ic, [C1, C2])
# s is now a dictionary: {C2: I, C1: V/w}
# substitute solution back in u_sol
u_sol = u_sol.subs(C1, s[C1]).subs(C2, s[C2])
print u_sol
!ec
The `u_sol` variable is now `I*cos(t*w) + V*sin(t*w)/w`.
Since symbolic software is far from bug-free and can give wrong results,
we should always check the answer. Here, we insert the solution in the ODE
to see if the result is zero, and we insert the solution in the initial
conditions to see that these are fulfilled:

!bc pycod
# Check that the solution fulfills the ODE and init.cond.
print simplify(ode(u_sol)),
print u_sol.subs(t, 0) - I, diff(u_sol, t).subs(t, 0) - V
!ec
There will be many more examples on using SymPy to find exact solutions
of differential equation problems.

The solution of the ODE in mathematical notation is

!bt
\[ u(t) = I\cos(\omega t) + \frac{V}{\omega}\sin(\omega t),\quad \omega = \sqrt{\frac{k}{m}}\tp\]
!et
More insight arises from rewriting such an expression in the form
$A\cos(wt - \phi)$:

!bt
\[ u(t) = \sqrt{I^2 + \frac{V^2}{\omega^2}}\cos(wt - \phi),\quad
\phi = \tan^{-1}(V/(\omega I))\tp
\]
!et
Now we see that the $u$ corresponds to cosine oscillations with a
phase shift $\phi$ and amplitude $\sqrt{I^2 + (V/\omega)^2}$.

=== Discussion of the displacement scale ===

The amplitude of $u$ is $\sqrt{I^2 + V^2/\omega^2}$, and this
expression is obviously a candidate for $u_c$.  However, the simpler
choice $u_c=\max (I, V/\omega)$ is also relevant and more attractive
than the square root expression (but potentially a factor 1.4 wrong
compared to the exact amplitude).  It is not very important to have
$|u|\leq 1$, the point is to avoid $|u|$ very small or large.

=== Discussion of the time scale ===

What is an appropriate time scale? Looking at
(ref{sec:scale:vib:undamped:model:scaled0}) and arguing that
$\bar u''$ and $\bar u$ both should be around unity in size, the
coefficient $t_c^2k/m$ must equal unity, implying that $t_c=\sqrt{m/k}$.
Also from the analytical solution we see that the solution goes like the
sine or cosine of $\omega t$ so $1/\omega = \sqrt{m/k}$ can be a characteristic
time scale. Likewise, one period of the oscillations, $P=2\pi/\omega$ can
be the characteristic time, leading to $t_c=2\pi/\omega$.

=== The dimensionless solution ===

With $u_c=I$ and $t_c=\sqrt{m/k}$ we get the scaled model

!bt
\begin{equation}
\frac{d^2\bar u}{d\bar t^2} + \bar u = 0,
\quad \bar u(0)=1,\ \bar u'(0)=\alpha,
label{sec:scale:vib:undamped:model:scaled1}
\end{equation}
!et
where $\alpha$ is a dimensionless parameter:

!bt
\[ \alpha = \frac{V}{I}\sqrt{\frac{m}{k}}\tp\]
!et
Note that in case $V=0$, we have ``scaled away'' all physical parameters.
The universal solution without physical parameters is then
$\bar u(\bar t)=\cos\bar t$.

The unscaled solution is recovered as

!bt
\begin{equation}
u(t) = I\bar u(\sqrt{k/m}\bar t)\tp
\end{equation}
!et
This expressions shows that the scaling is simply a matter of
*stretching or shrinking the axes*.

=== Alternative displacement scale ===

Using $u_c = V/\omega$, the equation
is not changed, but the initial conditions become

!bt
\[ \bar u(0) = \frac{I}{u_c} = \frac{I\omega}{V} =\frac{I}{V}\sqrt{\frac{k}{m}} = \alpha^{-1},\quad \bar u'(0)=1\tp\]
!et

# #ifdef NOT_SMART
With $u_c=\sqrt{I^2 + V^2/\omega^2}=\sqrt{I^2 + mV^2/k}$, we get two
dimensionless variables related to both initial conditions:

!bt
\[ \bar u(0) = \beta = \frac{I}{\sqrt{I^2 + V^2/\omega^2}},
\quad \alpha = \frac{V}{\omega\sqrt{I^2 + V^2/\omega^2}}\tp\]
!et
# #endif

With $u_c=V/\omega$ and one period as time scale,
$t_c=2\pi\sqrt{m/k}$,
we get the alternative model

!bt
\begin{equation}
\frac{d^2\bar u}{d\bar t^2} + 4\pi^2 \bar u = 0,
\quad \bar u(0)=\alpha^{-1},\ \bar u'(0)=2\pi\tp
label{sec:scale:vib:undamped:model:scaled2}
\end{equation}
!et
The unscaled solution is in this case recovered by

!bt
\begin{equation}
u(t) = V\sqrt{\frac{m}{k}}\bar u(2\pi\sqrt{k/m}\bar t)\tp
\end{equation}
!et

idx{frequency}
idx{frequency, angular}
idx{period (of oscillations)}
idx{radians}
idx{angular frequency}

=== About frequency and dimensions ===

The solution goes like $\cos\omega t$, where $\omega =\sqrt{m/k}$
must have dimension 1/s. Actually, $\omega$ has dimension *radians
per second*: rad/s. A radian is dimensionless since it is arc (length)
divided by radius (length), but still regarded as a unit.
The period $P$ of vibrations is a more intuitive quantity than the frequency
$\omega$. The relation between $P$ and $\omega$ is $P=2\pi/\omega$.
The number of oscillation cycles per period, $f$, is a more intuitive
measurement of frequency and also known as *frequency*. Therefore, to be
precise, $\omega$ should be named *angular frequency*. The relation between
$f$ and $T$ is $f=1/T$, so $f=2\pi\omega$ and measured in Hz (1/s), which is
the unit for counts per unit time.

===== Undamped vibrations with constant forcing =====
label{sec:scale:vib:undamped:mg}

For vertical vibrations in the gravity field, the model
(ref{sec:scale:vib:undamped:model}) must also take the gravity force
$-mg$ into account:

!bt
\[ mu'' + ku = -mg\tp\]
!et
How does the new term $-mg$ influence
the scaling? We observe that if there is no movement of the body,
$u''=0$, and the spring elongation matches the gravity force:
$ku = -mg$, leading to a steady displacement $u=-mg/k$. We can then
have oscillations around this equilibrium point. A natural scaling
for $u$ is therefore

!bt
\[ \bar u = \frac{u - (-mg/k)}{u_c}=\frac{uk + mg}{ku_c}\tp\]
!et
# u = - mg/k + u_c\bar u
The scaled differential equation with the same time scale as before
reads

!bt
\[ \frac{d^2\bar u}{d\bar t^2} + \bar u - \frac{t_c^2}{u_c}g
= -\frac{t_c^2}{u_c}g,\]
!et
leading to

!bt
\[ \frac{d^2\bar u}{d\bar t^2} + \bar u = 0\tp\]
!et
The initial conditions $u(0)=I$ and $u'(0)=V$ become, with $u_c=I$,

!bt
\[ \bar u(0) = 1 + \frac{mg}{kI},\quad \frac{d\bar u}{d\bar t}(0)=\sqrt{\frac{m}{k}}\frac{V}{I}\tp\]
!et
We see that the oscillations around the equilibrium point in the
gravity field are identical to the horizontal oscillations without
gravity, except for an offset $mg/(kI)$ in the displacement.


===== Undamped vibrations with time-dependent forcing =====
label{sec:scale:vib:undamped:F}

Now we add a transient forcing term $F(t)$ to the model
(ref{sec:scale:vib:undamped:model}):

!bt
\begin{equation}
mu'' + ku = F(t),\quad u(0)=I,\ u'(0)=V\tp
label{sec:scale:vib:undamped:F:model}
\end{equation}
!et
Take the forcing to be oscillating:

!bt
\[ F(t) = A\cos(\psi t)\tp\]
!et
The technical steps of the scaling are still the same, with the
intermediate result

!bt
\begin{equation}
\frac{d^2\bar u}{d\bar t^2} + \frac{t_c^2 k}{m}\bar u =
\frac{t_c^2}{mu_c}A\cos(\psi t_c\bar t),
\quad \bar u(0)=\frac{I}{u_c},\ \bar u'(0)=\frac{Vt_c}{u_c}\tp
label{sec:scale:vib:undamped:F:model:scaled0}
\end{equation}
!et
What are typical displacement and time scales? This is not so obvious
without knowing the details of the solution, because there are
three parameters ($I$, $V$, and $A$) that influence the magnitude of $u$.
Moreover, there are two time scales, one for the free vibrations of
the systems and one for the forced vibrations $F(t)$.

=== Investigating scales via analytical solutions ===

We may look into the exact solution to see what the scales are.  We
continue the SymPy session from the previous section and perform much
of the same steps. Note that we use `w` for $\omega = \sqrt{k/m}$
in the computer code (to obtain a more direct visual counterpart to
$\omega$).
SymPy may get confused when coefficients in differential equations
contain several symbols. We therefore rewrite the equation with
at most one symbol in each coefficient.
The amplitude $A/m$ in the forcing term is of this reason
replaced by the symbol `A1`.

!bc pycod
A, A1, m, psi = symbols('A A1 m psi', positive=True, real=True)
def ode(u):
    return diff(u, t, t) + w**2*u - A1*cos(psi*t)

diffeq = ode(u(t))
u_sol = dsolve(diffeq, u(t))
u_sol = u_sol.rhs

# Determine the constants C1 and C2 in u_sol
# (first substitute our own declared C1 and C2 symbols,
# then use the initial conditions)
u_sol = u_sol.subs('C1', C1).subs('C2', C2)
eqs = [u_sol.subs(t, 0) - I, u_sol.diff(t).subs(t, 0) - V]
s = solve(eqs, [C1, C2])
u_sol = u_sol.subs(C1, s[C1]).subs(C2, s[C2])

# Check that the solution fulfills the equation and init.cond.
print simplify(ode(u_sol))
print simplify(u_sol.subs(t, 0) - I)
print simplify(diff(u_sol, t).subs(t, 0) - V)

u_sol = simplify(expand(u_sol.subs(A1, A/m)))
print u_sol
!ec
The output from the last line is

!bc
A/m*cos(psi*t)/(-psi**2 + w**2) + V*sin(t*w)/w +
(A/m + I*psi**2 - I*w**2)*cos(t*w)/(psi**2 - w**2)
!ec
With a bit of rewrite this expression becomes

# Note that the solution becomes a bit simpler of F is cos rather than sin

!bt
\[ u(t) = \frac{A/m}{\omega^2 - \psi^2}\cos(\psi t) + \frac{V}{\omega}
   \sin(\omega t) +
\left(\frac{A/m}{\psi^2 - \omega^2} + I\right) \cos (\omega t)\tp
\]
!et
Obviously, this expression is only meaningful for $\psi\neq\omega$. The
case $\psi = \omega$ gives an infinite amplitude in this model, a
phenomenon known as resonance. The amplitude becomes finite when
damping is included,
see Section ref{sec:scale:vib:damped:F}.

For the case the system starts from rest, $I=V=0$, and the
forcing is the only driving mechanism, we can simplify:

!bt
\begin{align*}
u(t) &= \frac{A}{m(\omega^2 - \psi^2)}\cos(\psi t)
+
\frac{A}{m(\psi^2 - \omega^2)}\cos (\omega t)\\
&= \frac{A}{m(\omega^2 - \psi^2)}(\cos(\psi t) - \cos(\omega t))\tp
\end{align*}
!et
To gain more insight, $\cos(\psi t) - \cos(\omega t)$ can be
rewritten in terms of the mean frequency $(\psi + \omega)/2$ and
the difference in frequency $(\psi - \omega)/2$:

!bt
\begin{equation}
u(t) = \frac{A}{m(\omega^2 - \psi^2)} 2
\sin\left(\frac{\psi - \omega}{2}t\right)
\sin\left(\frac{\psi + \omega}{2}t\right),
label{sec:scale:vib:undamped:F:model:sinsin}
\end{equation}
!et
showing that there is a signal with frequency $(\psi + \omega)/2$
whose amplitude has a (much) slower frequency
$(\psi - \omega)/2$. Figure ref{sec:scale:vib:fig:envelope} shows
an example on such a signal.


FIGURE: [fig-scaling/envelope, width=600 frac=0.8] Signal with frequency 3.1 and envelope frequency 0.2. label{sec:scale:vib:fig:envelope}


=== The displacement and time scales ===

A characteristic displacement can in the latter special case
be taken as $u_c= A/(m(\omega^2 - \psi^2))$. This is also a relevant choice
in the more general case $I\neq0, V\neq 0$, unless $I$ or $V$
is so large that it dominates over the amplitude
caused by the forcing. With $u_c= A/(m(\omega^2 - \psi^2))$ we also
have three special cases: $\omega \ll \psi$, $\omega \gg\psi$, and
$\psi \sim \omega$. In the latter case we need
$u_c= A/(m(\omega^2 - \psi^2))$ if we want $|u|\leq 1$. When
$\omega$ and $\psi$ are significantly different, we may choose one
of them and neglect the smaller. Choosing $\omega$ means $u_c=A/k$,
which is the relevant scale
if $\omega\gg\psi$. In the opposite case, $\omega\ll\psi$,
$u_c=A/(m\psi^2)$.

The time scale is dominated by the fastest oscillations, which are
of frequency $\psi$ or $\omega$ when these are close and the largest
of them when they are distant. In any case, we set
$t_c=1/\max(\psi,\omega)$.

=== Finding the displacement scale from the differential equation ===

Going back to (ref{sec:scale:vib:undamped:F:model:scaled0}), we
may demand that all the three terms in the differential equation
are of size unity. This leads to $t_c=\sqrt{m/k}$
and $u_c=At_c^2/m = A/k$. The formula for $u_c$ is a kind of measure
of the ratio of the
forcing and the spring force (the dimensionless number
$A/(ku_c)$ would be this ratio).

Looking at (ref{sec:scale:vib:undamped:F:model:sinsin}), we see
that if $\psi\ll\omega$, the amplitude can be approximated
by $A/(m\omega^2)=A/k$, showing that the scale $u_c=A/k$ is
relevant for small excitation frequency $\psi$ compared to
the free vibration frequency $\omega$.

=== Scaling with free vibrations as time scale ===

The next step is to work out the dimensionless ODE for the chosen scales.
We first select the time scale based on the free oscillations
with frequency $\omega$, i.e., $t_c=1/\omega$. Inserting the expression in
(ref{sec:scale:vib:undamped:F:model:scaled0}) results in

!bt
\begin{equation}
\frac{d^2\bar u}{d\bar t^2} + \bar u =
\gamma
\cos(\delta\bar t),
\quad \bar u(0)=\alpha,\ \bar u'(0)=\beta\tp
label{sec:scale:vib:undamped:F:model:scaled2}
\end{equation}
!et
Here we have four dimensionless variables

!bt
\begin{align}
\alpha &= \frac{I}{u_c},\\
\beta  &= \frac{Vt_c}{u_c} = \frac{V}{\omega u_c},\\
\gamma &= \frac{t_c^2 A}{mu_c} = \frac{A}{ku_c},\\
\delta &= \frac{t_c}{\psi^{-1}} = \frac{\psi}{\omega}\tp
\end{align}
!et
We remark that the choice of $u_c$ has so far not been made. Several
different cases will be considered below, and certain choices reduce
the number of independent dimensionless variables to three.

[hpl: New comment in the paragraph above.]

The four dimensionless variables above have interpretations as ratios of
physical effects:

 * $\alpha$: ratio of the initial displacement and
   the characteristic response $u_c$,
 * $\beta$: ratio of the initial velocity
   and the typical velocity measure $u_c/t_c$,
 * $\gamma$: ratio of
   the forcing $A$ and the mass times acceleration $mu_c/t_c^2$ *or*
   the ratio of the forcing and the spring force $ku_c$
 * $\delta$: ratio of the
   frequencies or the time scales of the forcing and the free vibrations.

=== Software ===

Any solver for (ref{sec:scale:vib:undamped:F:model:scaled0})
can be used for (ref{sec:scale:vib:undamped:F:model:scaled2}).
More details are provided at the end of
Section ref{sec:scale:vib:damped:F}.

=== Choice of $u_c$ close to resonance ===

Now we shall discuss various choices of $u_c$.
Close to resonance, when $\psi\sim\omega$, we may set
$u_c=A/(m(\omega^2 - \psi^2))$. The dimensionless numbers
become in this case

!bt
\begin{align*}
\alpha &= \frac{I}{u_c} = \frac{I}{A/k}(1-\delta^2),\\
\beta  &= \frac{V}{\omega u_c} = \frac{V\sqrt{km}}{A}(1-\delta^2),\\
\gamma &= \frac{A}{ku_c} = 1-\delta^2,\\
\delta &= \frac{\psi}{\omega}\tp
\end{align*}
!et
With $\psi = 0.99\omega$, $\delta =0.99$, $V=0$,
$\alpha = \gamma = 1-\delta^2 = 0.02$, we have the problem

!bt
\[
\frac{d^2\bar u}{d\bar t^2} + \bar u =
0.02 \cos(0.99\bar t),
\quad \bar u(0)=0.02,\ \bar u'(0)=0\tp
\]
!et
This is a problem with a very small initial condition and a very small
forcing, but the state close to resonance brings the amplitude up to
about unity, see the result of numerical simulations with $\delta=0.99$ in
Figure ref{sec:scale:vib:fig:Fcos_b0:1}.
Neglecting $\alpha$,
the solution is given by (ref{sec:scale:vib:undamped:F:model:sinsin}),
which here means $A=1-\delta^2$, $m=1$, $\omega=1$, $\psi=\delta$:

!bt
\[ \bar u(\bar t) = 2\sin(-0.005\bar t)\sin(0.995\bar t)\tp \]
!et
Note that this is a problem which demands very high accuracy in the
numerical calculations. Using 20 time steps per period gives a
significant angular frequency error and an amplitude of about 1.4. We used
160 steps per period for the results in
Figure ref{sec:scale:vib:fig:Fcos_b0:1}.

FIGURE: [fig-scaling/vib_delta099_b0_Fcos, width=600 frac=1] Forced undamped vibrations close to resonance. label{sec:scale:vib:fig:Fcos_b0:1}

=== Unit size of all terms in the ODE ===

Using the displacement scale $u_c=A/k$ leads to
(ref{sec:scale:vib:undamped:F:model:scaled2}) with

!bt
\begin{align*}
\alpha &= \frac{I}{u_c} = \frac{I}{A/k},\\
\beta  &= \frac{V}{\omega u_c} = \frac{V k}{A\omega},\\
\gamma &= \frac{A}{ku_c} = 1,\\
\delta &= \frac{\psi}{\omega}\tp
\end{align*}
!et
Simulating a case with $\delta=0.5$, $\alpha=1$, and $\beta=0$ gives
the oscillations in Figure ref{sec:scale:vib:fig:Fcos_b0:2}, which is
a case away from resonance, and the amplitude is about unity. However,
choosing $\delta =0.99$ (close to resonance) results in a figure
similar to Figure ref{sec:scale:vib:fig:Fcos_b0:1}, except that the
amplitude is about $10^2$ because of the moderate size of $u_c$.
The present scaling is therefore most suitable away from resonance,
and when the terms containing $\cos\omega t$ and $\sin\omega t$
are important (e.g., $\omega\gg\psi$).

FIGURE: [fig-scaling/vib_delta05_b0_Fcos, width=600 frac=1] Forced undamped vibrations away from resonance. label{sec:scale:vib:fig:Fcos_b0:2}

=== Choice of $u_c$ when $\psi\gg\omega$ ===

Finally, we may look at the case where $\psi\gg\omega$ such that
$u_c=A/(m\psi^2)$ is a relevant scale (i.e., omitting $\omega^2$ compared to
$\psi^2$ in the denominator), but in this case we should
use $t_c=1/\psi$ since the force varies much faster than the
free vibrations of the system.
This choice of $t_c$ changes the scaled ODE to

!bt
\begin{equation}
\frac{d^2\bar u}{d\bar t^2} + \delta^{-2}\bar u =
\gamma
\cos(\bar t),
\quad \bar u(0)=\alpha,\ \bar u'(0)=\beta,
label{sec:scale:vib:undamped:F:model:scaled6}
\end{equation}
!et
where

!bt
\begin{align*}
\alpha &= \frac{I}{u_c} = \frac{I}{A/k}\delta^2,\\
\beta  &= \frac{Vt_c}{u_c} = \frac{V\sqrt{km}}{A}\delta,\\
\gamma &= \frac{t_c^2 A}{mu_c} = 1,\\
\delta &= \frac{t_c}{\psi^{-1}} = \frac{\psi}{\omega}\tp
\end{align*}
!et
In the regime $\psi\gg\omega$, $\delta\gg 1$, thus making $\alpha$ and
$\beta$ large.
However, if $\alpha$ and/or $\beta$ is large,
the initial condition dominates over the forcing, and will also dominate
the amplitude of $u$, thereby making the scaling of $u$ inappropriate.
In case $I=V=0$ so that $\alpha=\beta=0$,
(ref{sec:scale:vib:undamped:F:model:sinsin}) predicts
($A=m=1$, $\omega=\delta^{-1}$, $\psi=1$)

!bt
\[ \bar u(\bar t) = (\delta^{-2}-1)^{-1}2
\sin\left(\frac{1}{2}(1 -\delta^{-1})\bar t\right)
\sin\left(\frac{1}{2}(1 +\delta^{-1})\bar t\right),
\]
!et
which has an amplitude about $2$ for $\delta\gg 1$.
Figure ref{sec:scale:vib:fig:Fcos_b0:3} shows a case.


FIGURE: [fig-scaling/vib_delta10_b0_Fcos, width=600 frac=1] Forced undamped vibrations with rapid forcing. label{sec:scale:vib:fig:Fcos_b0:3}

With $\alpha=0.05\delta^2=5$, we get a significant contribution from
the free vibrations (the homogeneous solution of the ODE) as
shown in Figure ref{sec:scale:vib:fig:Fcos_b0:4}. For larger $\alpha$
values, one must base $u_c$ on $I$ instead.
(The graphs in Figure ref{sec:scale:vib:fig:Fcos_b0:3} and
ref{sec:scale:vib:fig:Fcos_b0:4} were
produced by
numerical simulations with 160 time steps per period of the forcing.)

FIGURE: [fig-scaling/vib_delta10_b0_a5_Fcos, width=600 frac=1] Forced undamped vibrations with rapid forcing and initial displacement of 5. label{sec:scale:vib:fig:Fcos_b0:4}



=== Displacement scale based on $I$ ===

Choosing $u_c=I$ gives

!bt
\begin{equation}
\frac{d^2\bar u}{d\bar t^2} + \bar u =
\gamma\cos(\delta\bar t),
\quad \bar u(0)=1,\ \bar u'(0)=\beta,
label{sec:scale:vib:undamped:F:model:scaled5}
\end{equation}
!et
with

!bt
\begin{align}
\beta  &= \frac{Vt_c}{u_c} = \frac{V}{I}\sqrt{\frac{m}{k}},\\
\gamma & = \frac{tc^2A}{mu_c} = \frac{A}{ku_c} = \frac{A}{kI} \tp
\end{align}
!et
This scaling is not relevant close to resonance since then $u_c\gg I$.


===== Damped vibrations with forcing =====
label{sec:scale:vib:damped:F}

We now introduce a linear damping force $bu'(t)$ in the equation of motion:

!bt
\begin{equation}
mu'' + bu' + ku = A\cos(\psi t),\quad u(0)=I,\ u'(0)=V\tp
label{sec:scale:vib:damped:F:model}
\end{equation}
!et
Figure ref{sec:scale:vib:damped:sketch} shows a typical
one-degree-of-freedom mechanical system with a linear dashpot, representing
the damper ($bu'$), a linear spring ($ku$), and an external force ($F$).

FIGURE: [fig-scaling/oscillator, width=500 frac=0.6] Oscillating body with external force, attached to a spring and damper. label{sec:scale:vib:damped:sketch}

The standard scaling procedure results in

!bt
\begin{equation}
\frac{d^2\bar u}{d\bar t^2} + \frac{t_c b}{m}\frac{d\bar u}{d\bar t}
+ \frac{t_c^2 k}{m}\bar u =
\frac{t_c^2}{mu_c}A\cos(\psi t_c\bar t),
\quad \bar u(0)=\frac{I}{u_c},\ \bar u'(0)=\frac{Vt_c}{u_c}\tp
label{sec:scale:vib:damped:F:model:scaled0}
\end{equation}
!et

=== The exact solution ===

To choose scales, it is (as always)
a great advantage to look into exact solutions.
Using SymPy to solve (ref{sec:scale:vib:damped:F:model}) is, in principle,
very straightforward:

!bc pyshell
>>> diffeq = diff(u(t), t, t) + b/m*diff(u(t), t) + w**2*u(t)
>>> s = dsolve(diffeq, u(t))
>>> s.rhs
C1*exp(t*(-b - sqrt(b - 2*m*w)*sqrt(b + 2*m*w))/(2*m)) +
C2*exp(t*(-b + sqrt(b - 2*m*w)*sqrt(b + 2*m*w))/(2*m))
!ec
This is indeed the correct solution, but it is on a complex
exponential function form, valid for all $b$, $m$, and $\omega$. We are
interested in the case with *small damping*, $b < 2m\omega$, where the solution
is an exponentially damped sinusoidal function. Rewriting the expression
in the right form is tricky with SymPy commands. Instead, we demonstrate
a common technique when doing symbolic computing: general procedures like
`dsolve` are replaced by manual steps. That is, we solve the ODE ``by hand'',
but use SymPy to assist the calculations.

The solution is composed of a homogeneous
solution $u_h$ of $mu'' + bu' + ku=0$ and one particular solution $u_p$
of the nonhomogeneous equation
$mu'' + bu' + ku=A\cos(\psi t)$. The homogeneous solution with
damped oscillations (requiring $b < 2\sqrt{mk}$) can be
found by the following code. We have divided the differential equation
by $m$ and introduced $B=\frac{1}{2}b/m$ and let `A1` represent
$A/m$ to simplify expressions and
help SymPy with less symbols in the equation (without these simplifications,
SymPy stalls in the computations due to too many symbols in the equation).

!bc pycod
u = symbols('u', cls=Function)
t, w, B, A, A1, m, psi = symbols('t w B A A1 m psi',
                                 positive=True, real=True)

def ode(u, homogeneous=True):
    h = diff(u, t, t) + 2*B*diff(u, t) + w**2*u
    f = A1*cos(psi*t)
    return h if homogeneous else h - f

# Find coefficients in polynomial (in r) for exp(r*t) ansatz
r = symbols('r')
ansatz = exp(r*t)
poly = simplify(ode(ansatz)/ansatz)

# Convert to polynomial to extract coefficients
poly = Poly(poly, r)
# Extract coefficients in poly: a_*t**2 + b_*t + c_
a_, b_, c_ = poly.coeffs()
# Assume b_**2 - 4*a_*c_ < 0
d = -b_/(2*a_)
if a_ == 1:
    omega = sqrt(c_ - (b_/2)**2)  # nicer formula
else:
    omega = sqrt(4*a_*c_ - b_**2)/(2*a_)

# The homogeneous solution is a linear combination of a
# cos term (u1) and a sin term (u2)
u1 = exp(d*t)*cos(omega*t)
u2 = exp(d*t)*sin(omega*t)
C1, C2, V, I = symbols('C1 C2 V I', real=True)
u_h = simplify(C1*u1 + C2*u2)
print 'u_h:', u_h
!ec
The print out shows

!bt
\[ u_h = e^{-Bt}\left(C_1 \cos(\sqrt{\omega^2 - B^2}t) +
C_2 \sin(\sqrt{\omega^2 - B^2}t)\right),\]
!et
where $C_1$ and $C_2$ must be determined by the initial conditions later.
It is wise to check that $u_h$ is indeed a solution of the homogeneous
differential equation:

idx{`assert`}

!bc pycod
assert simplify(ode(u_h)) == 0
!ec
We have previously just printed the residuals of the ODE and initial
conditions after inserting the solution, but it is better in a code to
let the programming language test that the residuals are symbolically zero.
This is achieved using the `assert` statement in Python. The argument is
a boolean expression, and if the expression evaluates to `False`,
an `AssertionError` is raised and the program aborts (otherwise `assert`
runs silently for a `True` boolean expression). Hereafter, we will use
`assert` for consistency checks in computer code.

The ansatz for the particular solution $u_p$ is

!bt
\[ u_p= C_3\cos(\psi t) + C_4\sin(\psi t),\]
!et
which inserted in the ODE gives two equations
for $C_3$ and $C_4$. The relevant SymPy statements are

!bc pycod
# Particular solution
C3, C4 = symbols('C3 C4')
u_p = C3*cos(psi*t) + C4*sin(psi*t)
eqs = simplify(ode(u_p, homogeneous=False))

# Collect cos(omega*t) terms
print 'eqs:', eqs
eq_cos = simplify(eqs.subs(sin(psi*t), 0).subs(cos(psi*t), 1))
eq_sin = simplify(eqs.subs(cos(psi*t), 0).subs(sin(psi*t), 1))
s = solve([eq_cos, eq_sin], [C3, C4])
u_p = simplify(u_p.subs(C3, s[C3]).subs(C4, s[C4]))

# Check that the solution is correct
assert simplify(ode(u_p, homogeneous=False)) == 0
!ec
Using the initial conditions for the complete solution $u=u_h+u_p$
determines $C_1$ and $C_2$:

!bc pycod
u_sol = u_h + u_p  # total solution
# Initial conditions
eqs = [u_sol.subs(t, 0) - I, u_sol.diff(t).subs(t, 0) - V]
# Determine C1 and C2 from the initial conditions
s = solve(eqs, [C1, C2])
u_sol = u_sol.subs(C1, s[C1]).subs(C2, s[C2])
!ec
Finally, we should check that `u_sol` is indeed the correct solution:

!bc pycod
checks = dict(
    ODE=simplify(expand(ode(u_sol, homogeneous=False))),
    IC1=simplify(u_sol.subs(t, 0) - I),
    IC2=simplify(diff(u_sol, t).subs(t, 0) - V))
for check in checks:
    msg = '%s residual: %s' % (check, checks[check])
    assert checks[check] == sympify(0), msg
!ec
Finally, we may take `u_sol = u_sol.subs(A, A/m)` to get the right
expression for the solution.
Using `latex(u_sol)` results in a huge expression, which should be
manually ordered to something like the following:

!bt
\begin{align*} u = &
\frac{Am^{-1}}{4 B^{2} \psi^{2} +
\Omega^{2}} \left(2 B \psi
\sin{\left (\psi t \right )} - \Omega\cos{\left (\psi t \right )}\right) + \\
&
{e^{-B t}} \biggl(
C_1 \cos{\left( t \sqrt{\omega^{2}- B^{2}}\right)} +
C_2 \sin{\left (t \sqrt{\omega^{2}- B^{2}}\right )}\biggr)\\
C_1 &= \frac{Am^{-1} \Omega + 4 I B^{2} \psi^{2} +
I\Omega^2}{
4 B^{2} \psi^{2} + \Omega^2}\\
C_2 &=
\frac{- Am^{-1} B\Omega + 4 I B^{3} \psi^{2} +
I B\Omega^2 + 4 V B^{2}\psi^{2} +
V\Omega^2}{
\sqrt{\omega^{2} - B^{2}}
\left(4 B^{2} \psi^{2} + \Omega^2\right)},\\
\Omega &= \psi^2 - \omega^2\tp
\end{align*}
!et

idx{quality factor $Q$}
idx{phase shift}

The most important feature of this solution is that there are
two time scales with frequencies $\psi$ and $\sqrt{\omega^2 - B^2}$,
but the latter appears in terms that decay as $e^{-Bt}$ in time.
The attention is usually on longer periods of time, so in that
case the solution simplifies to

!bt
\begin{align}
u &= \frac{Am^{-1}}{4 B^{2} \psi^{2} +
\Omega^{2}} \left(2 B \psi
\sin{\left (\psi t \right )} - \Omega\cos{\left (\psi t \right )}\right)
\nonumber\\
&= \frac{A}{m}\frac{1}{\sqrt{4B^2\psi^2 + \Omega^2}}\cos(\psi t + \phi)
\frac{(\psi\omega)^{-1}}{(\psi\omega)^{-1}}
\nonumber\\
& = \frac{A}{k} Q\delta^{-1}\left(1 + Q^2(\delta - \delta^{-1})\right)^{-
\frac{1}{2}}\cos(\psi t + \phi),
label{sec:scale:vib:damped:F:model:u_forced0}
\end{align}
!et
where we have introduced the dimensionless numbers

!bt
\[ Q = \frac{\omega}{2B},\quad\delta = \frac{\psi}{\omega},\]
!et
and

!bt
\[ \phi = \tan^{-1}\left(-\frac{2B}{\omega^2 - \psi^2}\right)
= \tan^{-1}\left(\frac{Q^{-1}}{\delta^2 - 1}\right)\tp\]
!et
$Q$ is commonly called *quality factor* and $\phi$ is the
*phase shift*. Dividing
(ref{sec:scale:vib:damped:F:model:u_forced0}) by $A/k$, which is a common
scale for $u$, gives the dimensionless relation

!bt
\begin{equation}
\frac{u}{A/k} = \frac{Q}{\delta} R(Q,\delta)^{\frac{1}{2}}\cos(\psi t + \phi),
\quad
R(Q,\delta) = \left(1 + Q^2(\delta - \delta^{-1})\right)^{-1}\tp
label{sec:scale:vib:damped:F:model:u_forced}
\end{equation}
!et


=== Choosing scales ===

Much of the discussion about scales in the previous sections are
relevant also when damping is included.  Although the oscillations
with frequency $\sqrt{\omega^2-B^2}$ die out for $t\gg B^{-1}$, we
start with using this frequency for the time scale.  A highly relevant
assumption for engineering applications of
(ref{sec:scale:vib:damped:F:model}) is that the damping is small.
Therefore, $\sqrt{\omega^2-B^2}$ is close to $\omega$ and we simply
apply $t_c=1/\omega$ as before (if not the interest in large $t$ for
which the oscillations with frequency $\omega$ has died out).

The coefficient in front of the $\bar u'$ term then becomes

!bt
\[ \frac{b}{m\omega} = \frac{2B}{\omega} = Q^{-1}\tp\]
!et
The rest of the ODE is given in the previous section, and the particular
formulas depend on the choices of $t_c$ and $u_c$.

=== Choice of $u_c$ at resonance ===

The relevant scale for $u_c$ at or nearby resonance ($\psi = \omega$)
becomes different from the previous section, since with damping,
the maximum amplitude is a finite value. For $t\gg B^{-1}$ when the
$\sin\psi t$ term is dominating, we have for $\psi = \omega$:

!bt
\[ u = \frac{Am^{-1}2B\psi}{4B^2\psi^2}\sin (\psi t) =
\frac{A}{2Bm\psi}\sin (\psi t) =
\frac{A}{b\psi}\sin (\psi t)
\tp
\]
!et
This motivates the choice

!bt
\[ u_c = \frac{A}{b\psi} = \frac{A}{b\omega}\tp\]
!et
(It is wise during computations like this to stop and check the
dimensions: $A$ must be $[\hbox{MLT}^{-2}]$ from the original
equation ($F(t)$ must have the same dimension as $mu''$),
$bu'$ also has dimension $[\hbox{MLT}^{-2}]$, implying that
$b$ has dimension $[\hbox{MT}^{-1}]$. $A/b$ then has dimension
$LT^{-1}$, and $A/(b\psi)$ gets dimension $[L]$, which matches
what we want for $u_c$.)

The differential equation on dimensionless form becomes

!bt
\begin{equation}
\frac{d^2\bar u}{d\bar t^2} + Q^{-1}\frac{d\bar u}{d\bar t} + \bar u =
\gamma
\cos(\delta\bar t),
\quad \bar u(0)=\alpha,\ \bar u'(0)=\beta,
label{sec:scale:vib:damped:F:model:scaled1}
\end{equation}
!et
with

#\frac{A}{b\omega}

!bt
\begin{align}
\alpha &= \frac{I}{u_c} = \frac{Ib}{A}\sqrt{\frac{k}{m}},\\
\beta  &= \frac{Vt_c}{u_c} = \frac{Vb}{A},\\
\gamma &= \frac{t_c^2 A}{mu_c} = \frac{b\omega}{k},\\
\delta &= \frac{t_c}{\psi^{-1}} = \frac{\psi}{\omega} = 1\tp
\end{align}
!et

=== Choice of $u_c$ when $\omega\gg\psi$ ===

In the limit $\omega\gg\psi$ and $t\gg B^{-1}$,

!bt
\[ u \approx \frac{A}{m\omega^2}\cos\psi t = \frac{A}{k}\cos\psi t,\]
!et
showing that $u_c=A/k$ is an appropriate displacement scale.
(Alternatively, we get this scale also from demanding $\gamma=1$ in the ODE.)
The dimensionless numbers $\alpha$, $\beta$, and $\delta$ are as
for the forced vibrations without damping.

=== Choice of $u_c$ when $\omega\ll\psi$ ===

In the limit $\omega\ll\psi$, we should base $t_c$ on the rapid
variations in the excitation: $t_c=1/\psi$.

=== Software ===

It is easy to reuse a solver for a general vibration problem also
in the dimensionless case.
In particular, we may use the `solver` function in the
file "`vib.py`": "${src_scaling}/vib.py":

!bc pycod-t
def solver(I, V, m, b, s, F, dt, T, damping='linear'):
!ec
for solving the ODE problem

!bt
\[ mu'' + f(u') + s(u) = F(t),\quad u(0)=I,\ u'(0)=V,\ t\in (0,T],\]
!et
with time steps `dt`. With `damping='linear'`, we have $f(u')=bu'$, while the
other value is `'quadratic'`, meaning $f(u')=b|u'|u'$.
Given the dimensionless numbers $\alpha$, $\beta$, $\gamma$, $\delta$,
and $Q$,
an appropriate call for solving (ref{sec:scale:vib:undamped:F:model:scaled2}) is

!bc pycod-t
u, t = solver(I=alpha, V=beta, m=1, b=1.0/Q,
              s=lambda u: u, F=lambda t: gamma*cos(delta*t),
	      dt=2*pi/n, T=2*pi*P)
!ec
where `n` is the number of intervals per period and `P` is the number
of periods to be simulated.
We way wrap this call in a `solver_scaled` function and wrap it furthermore
with `joblib` to avoid repeated calls,
as we explained in
Section ref{sec:scale:decay:prog}:

@@@CODE src-scaling/vib_scaled.py fromto: from vib import@import matplotlib
This code is found in "`vib_scaled.py`": "${src_scaling}/vib_scaled.py"
and features an application for running the scaled problem with
options on the command-line for $\alpha$, $\beta$, $\gamma$, $\delta$,
$Q$, number of time steps per period, and number of periods (see
the `main` function). It is an ideal application for exploring
scaled vibration models.


===== Oscillating electric circuits =====

The differential equation for an oscillating electric circuit is
very similar to the equation for forced, damped,
mechanical vibrations, and their
dimensionless form is identical. This fact will now be demonstrated.

The current $I(t)$ in a
circuit with an inductor with inductance $L$, a capacitor with
capacitance $C$, and overall resistance $R$, obeys the equation

!bt
\begin{equation}
\ddot I + \frac{R}{L}\dot I + \frac{1}{LC}I =  V(t),
\end{equation}
!et
where $V(t)$ is the voltage source powering the circuit.
We introduce

!bt
\[ \bar I=\frac{I}{I_c},\quad \bar t = \frac{t}{t_c},\]
!et
and get

!bt
\[ \frac{d^2\bar I}{d\bar t^2} + \frac{t_c R}{L}\frac{d\bar I}{d\bar t}
+ \frac{t_c^2}{LC}\bar I = \frac{t_c^2V_c}{I_c} \bar V(t)\tp\]
!et
Here, we have scaled $V(t)$ according to

!bt
\[ \bar V(\bar t) = \frac{V(t_c\bar t)}{\max_t V(t)}\tp\]
!et

The time scale $t_c$ is chosen to make $\ddot I$ and $I/(LC)$ balance,
$t_c = \sqrt{LC}$.
Choosing $I_c$ to make the coefficient in the source term of unit size,
means $I_c = LCV_c$.
With

!bt
\[ Q^{-1} = R\sqrt{\frac{C}{L}},\]
!et
we get the scaled equation

!bt
\begin{equation}
\frac{d^2\bar I}{d\bar t^2} + Q^{-1}\frac{d\bar I}{d\bar t}
+ \bar I = \bar V(t),
\end{equation}
!et
which is basically the same as we derived for mechanical vibrations.
(Two additional dimensionless variables will arise from the initial
conditions for $I$, just as in the mechanics cases.)

======= Exercises =======

===== Exercise: Perform unit conversion =====
label{sec:scale:exer:US2SI1}
file=density_conversion

Density (mass per volume: $[\hbox{ML}^{-3}]$) of water is
given as 1.05 ounce per fluid ounce. Use the `PhysicalQuantity` object
to convert to $\hbox{kg\,m}^{-3}$.

!bsol
Use `pydoc PhysicalQuantities` to find that `floz` is the name of
the volume ``fluid ounce'' and `oz` is the name of the mass ``ounce''.
Here is an interactive session for the conversion:

!bc pyshell
>>> from PhysicalQuantities import PhysicalQuantity as PQ
>>> d = PQ('1.05 oz/floz')
>>> d.convertToUnit('kg/m**3')
>>> print d
1006.54198946 kg/m**3
!ec
!esol

===== Problem: Scale a simple formula =====
label{sec:scale:exer:ball_y}
file=vertical_motion

The height $y$ of a body thrown up in the air is given by

!bt
\[ y = v_0t - \frac{1}{2}gt^2,\]
!et
where $t$ is time, $v_0$ is the initial velocity of the body at $t=0$,
and $g$ is the acceleration of gravity. Scale this formula. Use
two choices of the characteristic time: the time it takes to reach the
maximum $y$ value and the time it takes to return to $y=0$.

!bsol
We introduce

!bt
\[ \bar y =\frac{y}{y_c},\quad \bar t = \frac{t}{t_c}\tp\]
!et
Inserted in the formula we get

!bt
\[ y_c\bar y = v_0t_c\bar t - \frac{1}{2}gt_c^2\bar t^2\tp\]
!et

1. At the maximum point of $y$, $y'=0$, so $y'=v_0 - gt=0$, which means
$t=v_0/g$ and $y_{\max}=v_0v0/g - \frac{1}{2}gv_0^2/g^2 = \frac{1}{2}v_0^2/g$.
We choose $t_c=v_0/g$ and $y_c=\frac{1}{2}v_0^2/g$.
This gives

!bt
\[ \frac{1}{2}\frac{v_0^2}{g}\bar y = \frac{v_0^2}{g}\bar t -
\frac{1}{2}\frac{v_0^2}{g}\bar t^2\quad\Rightarrow\quad
\bar y = 2\bar t - \bar t^2\tp\]
!et

2. The body is back at $y=0$ for $v_0t - \frac{1}{2}gt^2=0$, which gives
$t_c=2v_0/g$ and $y_c=2y_{\max}=v_0^2/g$. Inserted, we get

!bt
\[ \frac{v_0^2}{g}\bar y = 2\frac{v_0^2}{g}\bar t -
\frac{1}{2}4\frac{v_0^2}{g}\bar t^2\quad\Rightarrow\quad
\bar y = 2\bar t(1 - \bar t)\tp\]
!et
Observe that the physical parameters $v_0$ and $g$ are absent in the
scaled formula.
!esol

===== Exercise: Perform alternative scalings =====
label{sec:scale:exer:decay:cooling:osc}

The problem in Section ref{scale:decay:cooling:osc} applies a
temperature scaling

!bt
\[ \bar T = \frac{T-T_0}{T_m-T_0},\]
!et
which is not always suitable.

!bsubex
Consider the case $T_0=T_m$ and the fact that $|T_m-T_0|$ does not
represent the characteristic temperature scale since it
collapses to zero. Formulate a suitable
scaling in this case. The figure below corresponds to $T_m=25$ C,
$T_0=24.9$ C, and $a=2.5$ C. We clearly see that $\bar T$ is
not of size unity.

FIGURE: [fig-scaling/osc_cooling_wrong_scale, width=500 frac=0.8]

!bsol
The typical temperature variations will now be oscillations of amplitude
$a$ around $T_m=T_0$, so $2a$ is the typical variation of the
surrounding temperature. If the time scale of $T_s$ is sufficiently
large (or more precisely, $\beta$ is small),
the temperature will actually reach amplitudes of size $a$,
but for fast oscillations in $T_s$, there will not be enough time to
transfer heat to/from the body, so the amplitudes of $T$ will be
smaller. Taking $2a$ to be the typical temperature range, we can propose
the scaling

!bt
\[ \bar T = \frac{T-T_m}{2a}\tp\]
!et
Inserted in the differential equation, we get with $t_c=1/k$,

!bt
\[ k2a\frac{\bar T}{d\bar t} = -k(2a\bar T + T_m - (T_m + a\sin(\omega t))),\]
!et
which simplifies to

!bt
\[ \frac{\bar T}{d\bar t} = -(\bar T - \frac{1}{2}\sin(\beta t)),\]
!et
where $\beta = \omega/k$.
The initial condition becomes

!bt
\[ \bar T(0) = -\half\alpha,\]
!et
where $\alpha = a/(T_m-T_0)$ is the dimensionless number that appeared
in the scaled differential equation in Section ref{scale:decay:cooling:osc}.
!esol
!esubex

!bsubex
Consider the case where $a$ is much larger than $|T_m-T_0|$.
What is an appropriate scaling of the temperature?

!bsol
In this case, $T$ will oscillate around $T_m$ and at maximum reach the
amplitude $a$ if $\beta$ is small, see the figure in a).
This is the same situation as in a),
and we can consequently use the same scaling and obtain the same
scaled problem.
!esol
!esubex

===== Problem: A nonlinear ODE for vertical motion with air resistance =====
label{sec:scale:exer:ball_y_wdrag}
file=vertical_motion_with_drag

The velocity $v(t)$
of a body moving vertically through a fluid in the gravity field,
with fluid drag and buoyancy, is governed by ODE

!bt
\[ mv' = -\frac{1}{2}C_D\varrho A |v|v - mg + \varrho V g,\quad v(0)=v_0,\]
!et
where $t$ is time, $m$ is the mass of the body, $C_D$ is a drag coefficient,
$\varrho$ is the density of the fluid, $A$ is the cross-sectional area
perpendicular to the motion, $g$ is the acceleration of gravity,
and $V$ is the volume of the body. Scale this ODE.

!bsol
We introduce as usual

!bt
\[ \bar v = \frac{v}{v_c},\quad \bar t = \frac{t}{t_c},\]
!et
but the main challenge is to find values for $v_c$ and $t_c$.
Inserting the scaled quantities gives

!bt
\[ m\frac{v_c}{t_c}\frac{d\bar v}{d\bar t} =
-\frac{1}{2}C_D\varrho A v_c^2 |\bar v|\bar v
- mg + \varrho V g,\quad v_c v(0)=v_0,\]
!et
It is tempting to set $v_c=v_0$, but $v_0=0$ is a relevant value so
this choice is not good. The motion is of decay type so $t_c$ and $v_c$
should be based on characteristics of the decay. The terminal velocity,
defined by $v'=0$, is

!bt
\[  v_T =  \sqrt{\frac{2(\varrho V - m)g}{C_D\varrho A}},\]
!et
when $\varrho V >m$ such that the buoyancy wins over gravity and
the motion is upwards. Otherwise,

!bt
\[  v_T =  -\sqrt{\frac{2(m-\varrho V)g}{C_D\varrho A}}\tp\]
!et
The two formulas can be combined to

!bt
\[  v_T =  \mbox{sign}(\varrho V - m)\sqrt{\frac{2|\varrho V -m|g}{C_D\varrho A}}\tp\]
!et

We take $v_c = |v_T| = \sqrt{\frac{2|\varrho V - m|g}{C_D\varrho A}}$.
This results in

!bt
\[
\frac{d\bar v}{d\bar t} =
-t_c\frac{1}{2m}C_D \varrho A \sqrt{\frac{2|\varrho V - m|g}{C_D\varrho A}}
|\bar v|\bar v
- t_c\sqrt{\frac{C_D\varrho g A}{2|\varrho V - m|}}(1- \frac{\varrho V}{m}),
\]
!et
and
!bt
\[ v(0)=v_0
\sqrt{\frac{C_D\varrho A}{2g|\varrho V - m|}}\tp\]
!et

A natural choice is to assume $d\bar v/d\bar t$ and $\bar v$ to
be of the same order, which means that coefficient in front of the
nonlinear term $|\bar v|\bar v$ should be unity. This forces $t_c$ to be

!bt
\[ t_c = \frac{2m}{\sqrt{2g|\varrho V - m|C_D\varrho A}}\tp\]
!et
Introducing the dimensionless numbers

!bt
\[ \alpha = \frac{\varrho V}{m}, \quad \beta = v_0\sqrt{\frac{C_D\varrho A}{2g|\varrho V - m|}} = \frac{v_0}{|v_T|},\]
!et
we get the scaled ODE problem

!bt
\[
\frac{d\bar v}{d\bar t} =
- |\bar v|\bar v + \mbox{sign}(1-\alpha),\quad
\bar v(0)=\beta\tp
\]
!et
Note that, as usual, the dimensionless numbers have simple
interpretations:
$\alpha$ is the ratio of the mass of the displaced fluid and
the mass of the body, while $\beta$ is the ratio of the initial and
terminal velocities.
!esol

===== Exercise: Solve a decay ODE with discontinuous coefficient =====
label{sec:scale:exer:decay:jump}
file=decay_jump

Make software for the problem in Section ref{sec:scale:decay:jump}
so that you can produce Figure ref{sec:scale:decay:jump:fig}.

!bhint
Follow the ideas for software in Section ref{sec:scale:decay:body}: use the
"`decay_vc.py`": "${src_scaling}/decay_vc.py" module as computational
engine and modify the
"`falling_body.py`": "${src_scaling}/falling_body.py" code.
!ehint

!bsol
We use `joblib` to avoid unnecessary execution of the scaled problem,
as explained in Section ref{sec:scale:decay:prog}. A potential code is

@@@CODE exer-scaling/decay_jump.py
!esol

===== Exercise: Implement a scaled model for cooling =====
label{sec:scale:exer:decay:cooling}
file=cooling1

Use software for the unscaled problem (ref{scale:decay:cooling:model})
to compute the solution of the
scaled problem (ref{scale:decay:cooling:model:scaled}).
Let $T_s$ be a function of time.

!bhint
You may use the general software "`decay_vc.py`": "${src_scaling}/decay_vc.py"
for computing with the cooling model.
See Section ref{sec:scale:decay:body} for more ideas.
!ehint

!bsol
The problem (ref{scale:decay:cooling:model}) is just a special case
of the general problem $u'=-au + b$ solved by the
`decay_vc` module. We can make an implementation of
(ref{scale:decay:cooling:model:scaled}) in terms of the
model $u'=-au + b$:

@@@CODE exer-scaling/cooling1.py
Simulations for $\alpha=1$ and $\beta=0.1,1,10$ as well as for
$\alpha=0.1$ and $\beta=1$ are shown below.

FIGURE: [fig-scaling/cooling1, width=800 frac=1]

!esol

===== Problem: Decay ODE with discontinuous coefficients =====
label{scale:decay:exer:decay:step}
file=decay_varcoeff

The goal of this exercise is to scale the problem
$u^{\prime}(t) = -a(t)u(t) + b(t)$, $u(0)=I$, when

!bt
\[
a(t) =\left\lbrace\begin{array}{ll}
Q, & t < s,\\
Q - A, & t\geq s,\end{array}\right.
\quad b = \left\lbrace\begin{array}{ll}
\epsilon t, & t < s,\\
0, & t\geq s,\end{array}\right.
\]
!et
Here, $Q,A,\epsilon >0$.

!bsol
We start by scaling the known functions $a$ and $b$. Since $Q,A.\epsilon >0$,
$\max |a(t)| = Q$ and $\max |b(t)| = \epsilon s$. Scaled versions of these
functions are then

!bt
\[ \bar a = \frac{a}{Q},\quad \bar b = \frac{b}{\epsilon s}\tp\]
!et

As usual, we scale $u$ and $t$ as

!bt
\[ \bar u = \frac{u}{u_c},\quad \bar t = \frac{t}{t_c}\tp\]
!et
The scaled ODE reads

!bt
\[ \frac{d\bar u}{d\bar t} = -t_c Q\bar a(\bar t) + u_c^{-1}t_c\epsilon s\bar b\tp\]
!et
A natural choice of $u_c$ is $u_c=I$. The $a$ term will reduce $\bar u$ from 1,
while the $b$ term may have a growth effect.

The time scale is best chosen to reflect the dynamics of the process, i.e.,
the decay with strength $Q$, so we set $t_c=1/Q$. This choice results in

!bt
\[ \frac{d\bar u}{d\bar t} = -\bar a(\bar t) + \alpha\bar b,\]
!et
with

!bt
\[ \bar a(\bar t) = \left\lbrace\begin{array}{ll}
1, & \bar t < \gamma,\\
1 - \beta, & \bar t\geq \gamma,\end{array}\right.
\]
!et
and

!bt
\[ \bar b(\bar t) = \left\lbrace\begin{array}{ll}
\gamma^{-1} \bar t, & \bar t < \gamma,\\
0, & \bar t\geq \gamma,\end{array}\right.
\]
!et
The initial condition is $\bar u(0)=1$.
We have three dimensionless numbers in the problem:

!bt
\[ \alpha = \frac{\epsilon s}{QI},\quad \beta = \frac{A}{Q},
\quad \gamma = Qs\tp\]
!et
We realize that $\alpha$ measures the ratio of the $b$ term ($\epsilon s$)
and the $au$ term ($QI$), $\beta$ reflects the relative jump in $a$,
while $\gamma$ measures the ratio of the
transition point $t=s$ and the characteristic time scale.

!esol


===== Exercise: Alternative scalings of a cooling model =====
label{scale:decay:exer:nonlin:logistic2}
file=growth

Implement the scaled model (ref{sec:scale:decay:nonlinear:model1:scaled})
and produce a plot with curves corresponding to various values of
$\alpha$ and $p$ to summarize how $\bar u(\bar t)$ looks like.

!bhint
A centered Crank-Nicolson-style
scheme for (ref{sec:scale:decay:nonlinear:model1:scaled})
can use an old time value for the nonlinear coefficient:

!bt
\[ \frac{\bar u^{n+1} - \bar u^n}{\Delta t} =
(1 - \alpha\bar u^n)^p\frac{1}{2}(\bar u^n + \bar u^{n+1})\tp\]
!et
!ehint

===== Exercise: Projectile motion =====
label{scale:vib:exer:projectile}
file=projectile

## http://www.physics.arizona.edu/~dpsaltis/Phys205_f06/projectile.pdf

We have the following mathematical model for the motion of a projectile
in two dimensions:

!bt
\[ m\ddot\x + \frac{1}{2}C_D\varrho A|\dot\x|\dot\x
= -mg\jj,\quad \x(0)=\bm{0},\ \dot\x(0)=v_0\cos\theta\ii +
v_0\sin\theta\jj\tp\]
!et
Here, $m$ is the mass of the projectile, $\x=x\ii + y\jj$ is
the position vector of the projectile, $\ii$ and $\jj$
are unit vectors along the $x$ and $y$ axes, respectively,
$\ddot\x$ and $\dot\x$ is the second- and first-order
time derivative of $\x(t)$, $C_D$ is a drag coefficient
depending on the shape of the projectile (can be taken as 0.4 for a sphere),
$\varrho$ is the density of the air, $A$ is the cross section area
(can be taken as $\pi R^2$ for a sphere of radius $R$), $g$ is gravity,
$v_0$ is the initial velocity of the projectile in a direction that makes
the angle $\theta$ with the ground.

!bsubex
Neglect the air resistance term proportional to $\dot\x$ and solve
analytically for $\x(t)$.

!bsol
The vector differential equation reduces to the two component equations

!bt
\[ m\ddot x(t) = 0,\quad m\ddot y(t) = -mg\tp\]
!et
Integrating twice yields

!bt
\[ x(t) = C_1t + C_2,\quad y(t) = -\frac{1}{2}gt^2 + C_3t + C_4\tp\]
!et
The condition $\x(0)=\bm{0}$ forces $C_2=C_4=0$. The condition on
the derivative gives $C_1=v_0\cos\theta$ and $C_3=v_0\sin\theta$.
The result is therefore

!bt
\[ \x(t) = v_0\cos(\theta) t\ii + (v_0\sin(\theta) t - \frac{1}{2}gt^2)\jj\tp\]
!et
!esol
!esubex

!bsubex
Make the model for projectile motion with air resistance non-dimensional.
Use the maximum height from the simplification in a) as length scale.

!bsol
We introduce dimensionless quantities:

!bt
\[ \bar x = \frac{x}{L},\quad \bar y = \frac{y}{L},\quad\bar t = \frac{t}{t_c},\]
!et
where the scales $L$ and $t_c$ must be determined. Inserted in the original
equation:

!bt
\[ \frac{mL}{t_c^2}\frac{d^2\bar\x}{d\bar t^2} +
\frac{1}{2} C_D\varrho A\frac{L^2}{t_c^2}\left\vert\frac{d\bar\x}{d\bar t}
\right\vert = -mg\jj\tp\]
!et
Dividing by $mL/t_c^2$ gives

!bt
\[ \frac{d^2\bar\x}{d\bar t^2} +
\frac{1}{2} C_D\varrho A\frac{L}{m}\left\vert\frac{d\bar\x}{d\bar t}
\right\vert = -\frac{gt_c^2}{L}\jj\tp\]
!et

The maximum height $y_{\max}$ occurs when $\dot y = 0$:

!bt
\[ \dot y = v_0\sin\theta - gt = 0\quad\Rightarrow\quad
t = g^{-1}v_0\sin\theta\tp\]
!et
The corresponding value is

!bt
\[ y_{\max}=g^{-1}v_0^2\sin^2\theta - \frac{1}{2}g^{-1}v_0^2\sin^2\theta =
\frac{1}{2}g^{-1}v_0^2\sin^2\theta\tp\]
!et
We can take $L=y_{\max}$ and let $t_c$ be the corresponding $t$ value:
$t_c=g^{-1}v_0\sin\theta$. Inserted in the scaled problem:

!bt
\[ \frac{d^2\bar\x}{d\bar t^2} +
\frac{1}{2} C_D\varrho A\frac{v_0^2\sin^2\theta}{2mg}
\left\vert\frac{d\bar\x}{d\bar t}
\right\vert = -\jj\tp\]
!et
We can identify a dimensionless parameter

!bt
\[ \alpha = \frac{1}{4} m^{-1}g^{-1} C_D\varrho A v_0^2\sin^2\theta,\]
!et
and write the scaled equation as

!bt
\[ \frac{d^2\bar\x}{d\bar t^2} + \alpha \left\vert\frac{d\bar\x}{d\bar t}
\right\vert = -\jj,\]
!et
with initial conditions

!bt
\[ \bar\x(0)=\bm{0},\quad \frac{d\bar x}{d\bar t}(0) =
\frac{t_c}{L}(v_0\cos\theta\ii + v_0\sin\theta\jj) =
2\cot\theta\ii + 2\jj\tp\]
!et

[hpl: Check that $\alpha$ is dimensionless. Easy: $\varrho$
goes like $m/L^3$, $A$ cancels $L^2$, $v_0^2$ cancels the
remaining dimensions... seems to be correct...]
[hpl: Need to check the final problem. Solve scaled problem without drag.]
!esol
!esubex

!bsubex
Make the model dimensionless again, but this time by demanding that
the scaled initial velocity is unity in $x$ direction.

!bsol
The scaled initial velocity condition is

!bt
\[ \bar x(0) = \frac{t_c}{L}v_0\cos\theta\tp\]
!et
Demanding the scaled velocity to be unity gives

!bt
\[ L = t_cv_0\cos\theta\tp\]
!et
The scaled initial velocity in $y$ direction becomes

!bt
\[ \bar y(0) = \tan\theta\tp\]
!et
The scaled ODE becomes

!bt
\[ \frac{d^2\bar\x}{d\bar t^2} +
\frac{1}{2} C_D\varrho A\frac{L}{m}\left\vert\frac{d\bar\x}{d\bar t}
\right\vert = -\frac{g t_c}{v_0\cos\theta}\jj\tp\]
!et
We can choose $t_c$ such that the source term is unity:

!bt
\[ t_c = g^{-1}v_0\cos\theta,\]
!et
which makes

!bt
\[ L = t_cv_0\cos\theta = g^{-1}v_0^2\cos^2\theta\tp\]
!et
The coefficient in the drag term becomes

!bt
\[ \alpha = \frac{1}{2}m^{-1}g^{-1}C_D\varrho A v_0^2\cos^2\theta\tp\]
!et
!esol
!esubex

!bsubex
A soccer ball has diameter $R=11$ cm and mass 0.43 kg, the density of air
is 1.2 $\hbox{kg}\hbox{m}^{-3}$, a soft kick has velocity 10 km/h,
while a hard kick may have 120 km/h. Estimate the dimensionless parameter
in the scaled problem for a soft and a hard kick with
$\theta$ corresponding to 30 degrees. Solve the scaled
differential equation for these values and plot the trajectory ($y$ versus
$x$) for the two cases.

!bsol
We need to express $R$, $v_0$, and $\theta$ in standard SI units:
$R=0.11$ m, $\theta = 30\cdot pi/180 \approx 0.52$,
$v_0 = 10/3.6 \approx 2.8$ m/s for a soft kick, and
$v_0=120/3.6\approx 33.33$ m/s for a hard kick.
Using $\alpha$ from b), we ...

[hpl: Need to fill in more after $\alpha$ is checked - and solve the
ODE with Odespy.]
!esol
!esubex

===== Problem: A predator-prey model =====
label{scale:decay:exer:predpray}
file=predator_prey

idx{Lotka-Volterra, predator-prey model}

The evolution of animal populations with a predator and a prey (e.g.,
lynx and hares, or foxes and rabbits) can be described by the
Lotka-Volterra ODE system

!bt
\begin{align}
H^{\prime} &= H(a - bL),
label{scale:decay:exer:predprey:eqH}\\
L^{\prime} &= L(dH - c),
label{scale:decay:exer:predprey:eqL}\\
H(0)&=H_0,\\
L(0)&=L_0\tp
\end{align}
!et
Here, $H$ is the number of animals of the prey (say hares)
and $L$ is the corresponding measure of the predator population (say lynx).
There are six parameters: $a$, $b$, $c$, $d$, $H_0$, and $L_0$.

The terms has the following meanings:

 * $aH$ is the exponential
   population growth of $H$ due to births and deaths and is governed by
   the access to nutrition,
 * $-bHL$ is the loss of preys because they are eaten by predators,
 * $dHL$ is the increase of predators because they eat prays (but only
   a fraction of the eaten preys, $bHL$, contribute to population growth
   of the predator and therefore $d < b$),
 * $-cL$ is the exponential decay in the predator population because of
   deaths (the increase is modeled by $dHL$).

Dimensionless independent and dependent variables are introduced as usual
by

!bt
\[ \bar t = \frac{t}{t_c},\quad
\bar H = \frac{H}{H_c},\quad \bar L = \frac{L}{L_c},
\]
!et
where $t_c$, $H_c$, and $L_c$ are scales to be determined. Inserted
in the ODE problem we arrive at

!bt
\begin{align}
\frac{H_0}{t_c}\frac{d\bar H}{d\bar t} &= H_0\bar H(a - bH_0\bar L),
label{scale:decay:exer:predprey:eqH:s}\\
\frac{H_0}{t_c}\frac{d\bar L}{d\bar t} &= H_0\bar L(dH_0\bar H - c),
label{scale:decay:exer:predprey:eqL:s}\\
H_c\bar H(0) &= H_0,
label{scale:decay:exer:predprey:eqH0:s}\\
L_c\bar H(0) &= L_0\tp
label{scale:decay:exer:predprey:eqL0:s}
\end{align}
!et

!bsubex
Consider first a simple, intuitive scaling of $H$ and $L$ based on
initial conditions $H_c=H_0$
and $L_c=H_c$. This means that $\bar H$ starts out at unity and $\bar L$
starts out as the fraction $L_0/H_0$. Find a time scale and identify
dimensionless parameters in the scaled ODE problem.

!bsol
With $H_c=L_c=H_0$ in
(ref{scale:decay:exer:predprey:eqH:s})-(ref{scale:decay:exer:predprey:eqL0:s})
we get

!bt
\begin{align*}
\frac{d\bar H}{d\bar t} &= \frac{a}{bH_0}\bar H  - \bar L\bar H,
\\
\frac{d\bar L}{d\bar t} &= \frac{d}{b}\bar L \bar H - \frac{c}{bH_0}\bar L),
\\
\bar H(0) &= 1,\\
\bar L(0) &=\frac{L_0}{H_0}\tp
\end{align*}
!et
With the dimensionless parameters

!bt
\[ \alpha = \frac{a}{bH_0},\quad\beta = \frac{d}{b},\quad\gamma =
\frac{c}{bH_0},\quad \delta = \frac{H_0}{L_0},\]
!et
we can write the dimensionless problem as

!bt
\begin{align*}
\frac{d\bar H}{d\bar t} &= \alpha\bar H  - \bar L\bar H,\\
\frac{d\bar L}{d\bar t} &= \beta\bar L \bar H - \gamma\bar L),\\
\bar H(0) &= 1,\\
\bar L(0) &= \delta \tp
\end{align*}
!et

The quantity $bH_0$ is the number of eaten preys per predator.
Then $\alpha$ measures the ratio of natural population growth of
the prey, due to nutrition, and the number of eaten preys per predator.
The $\beta$ parameter measures the fraction of the eaten preys and
the amount of this that actually
leads to population growth of the predator.
The number $\gamma$ reflects the ratio of
predator deaths and the eaten preys per predator, and $\delta$ is
the initial fraction of preys and predators.
!esol
!esubex

!bsubex
Try a different scaling where the aim is to adjust the scales such that
the ODEs become as simple as possible, i.e, have as few dimensionless
parameters as possible. Compare with the scaling in a).

!bsol
Dividing by $H_c$ and $L_c$ in
(ref{scale:decay:exer:predprey:eqH:s}) and
(ref{scale:decay:exer:predprey:eqL0:s}),
respectively,
and multiply by $t_c$:

!bt
\begin{align*}
\frac{d\bar H}{d\bar t} &= t_c\bar H(a - bL_c\bar L),\\
\frac{d\bar L}{d\bar t} &= t_c\bar L(dH_c\bar H - c)\tp
\end{align*}
!et
Choosing $t_c=1/a$ and $t_c aL_c=1$, i.e., $L_c=a/b$, makes the
first equation free of parameters: $\bar H^{\prime}=\bar H(1-\bar L)$.
Factoring out $c$ in the equation for $L$ and choosing
$H_c d/c=1$, i.e., $H_c=c/d$, leaves us with the $L$ equation
as $\bar L^{\prime}=(c/a)\bar L(\bar H-1)$. The ratio $c/a$ is
now called $\mu$ and equals
$\gamma/\alpha$ from a).

The initial conditions lead to $\bar H(0) = H_0/H_c=H_0d/c =\beta/\gamma = \nu$,
and $\bar L(0)=L_0/L_c = L_0b/a = \delta/\alpha = \omega$.

The dimensionless problem is now

!bt
\begin{align}
\frac{d\bar H}{d\bar t} &= \bar H(1 - \bar L),\\
\frac{d\bar L}{d\bar t} &= \mu \bar L(\bar H - 1) = \gamma\alpha^{-1} \bar L(\bar H - 1),\\
\bar H(0) &= \nu = \beta/\gamma,\\
\bar L(0) &= \omega = \delta/\alpha,
\end{align}
!et
with

!bt
\[ \mu = \frac{c}{a},\quad \nu = H_0\frac{d}{c},\quad \omega = L_0\frac{b}{a}
\tp\]
!et
The unknowns $\bar H$ and $\bar L$ now has less intuitive scalings,

!bt
\[ \bar H = \frac{Hd}{c},\quad \bar L = \frac{Lb}{a},\]
!et
while time is measured in the units based on the exponential growth
due to births and deaths of preys ($a$). The number of dimensionless parameters
is one less since we have one more scale (for $L_c$) at our
disposal. Simplicity in one initial conditions in a) is
exchanged with more simplicity in the ODEs, which now have
only one dimensionless parameter.

Note that $\nu$ and $\omega$ must be
different from unity to avoid $\bar H\neq 0$ and $\bar L\neq 0$ because
of the factors $1-L$ and $H-1$ in the equations that can make
$\bar H^{\prime}=0$ and $\bar L^{\prime}=0$.
!esol
!esubex

!bsubex
A more mathematical approach to determining suitable scales for $H$ and $L$
consists in finding the stationary points $(H,L)$ of the ODE system,
where $H^{\prime}=L^{\prime}=0$, and use such points as characteristic
sizes of the dependent variables. Show that $H^{\prime}=L^{\prime}=0$
implies $H=L=0$ or $L=a/b$ and $H=c/d$. Use $H_c=a/b$, $L_c=c/d$,
and find a time scale. Compare with the result in b).

!bsol
Setting $H^{\prime}=L^{\prime}=0$ leads to

!bt
\[ H(a-bL)=0,\quad L(dH-c)=0,\]
!et
from which we see that the factors must vanish: $H=L=0$,
$L=a/b$, and $H=c/d$. With Use $H_c=a/b$, $L_c=c/d$, and $t_c=1/a$
we get the same scaling as in b), but with a different motivation.
!esol
!esubex

===== Problem: A model for competing species =====
label{scale:decay:exer:competing_species}
file=competing_species

idx{Lotka-Volterra, competing species model}

Let $N_1(t)$ and $N_2(t)$ be the number of animals in two
competing species. A generalized Lotka-Volterra model
is based on a logistic growth of each specie and a predator-prey like
interaction (cf. Problem ref{scale:decay:exer:predpray}):

!bt
\begin{align}
\frac{dN_1}{dt} &= r_1N_1\left( 1 - \frac{N_1}{M_1} - s_{12}\frac{N_2}{M_1}\right),\\
\frac{dN_2}{dt} &= r_2N_2\left( 1 - \frac{N_2}{M_2} - s_{21}\frac{N_1}{M_2}\right),
\end{align}
!et
where $r_1$, $r_2$, $M_1$, $M_2$, $s_{12}$, and $s_{21}$ are given constants.
The initial conditions specify $N_1$ and $N_2$ at $t=0$.
Find suitable scales and derive a dimensionless ODE problem.

!bsol
As always, we can introduce dimensionless variables,
We use ideas from scaling of ODEs for logistic growth, i.e., we use
the carrying capacities $M_1$ and $M_2$ as characteristic (maximum)
values of $N_1$ and $N_2$, respectively. Time can be scaled from
the initial exponential growth of $N_1$ or $N_2$, i.e., $t_c=1/r_1$
or $t_c=1/r_2$. We choose the former here. Introducing

!bt
\[ \bar t = r_1 t,\quad u_1 = \frac{N_1}{M_1},\quad u_2 = \frac{N_2}{M_2},\]
!et
in the ODE system, leads to

!bt
\begin{align*}
\frac{du_1}{d\bar t} &= u_1\left(1 - u_1 - b_{21}\beta\gamma\right),\\
\frac{du_2}{d\bar t} &= \alpha u_2\left(1 - u_2 - b_{12}\beta^{-1}\gamma^{-1}\right),\\
\end{align*}
!et
where the dimensionless numbers are given by

!bt
\[ \alpha = \frac{r_2}{r_1},\quad \beta=\frac{M_2}{M_1},
\quad \gamma = \frac{b_{12}}{b_{21}}\tp\]
!et
We have introduced to separate numbers $\beta$ and $\gamma$ since they
related to different parameters, but only their product matters.
Alternatively, we could introduce the numbers $\mu = b_{12}\gamma$
and $\nu = b_{21}\gamma^{-1}$ in the last term of the first and second
ODE, respectively.

## See Murray I, page 94.
!esol

===== Problem: Find the period of sinusoidal signals =====
label{scale:decay:exer:sine}
file=sine_period

This exercise aims at investigating various concepts like period, wave length,
and frequency in non-damped and damped sinusoidal signals.

!bsubex
Plot the function

!bt
\[ u(t) = A\sin(\omega t), \]
!et
for $t\in [0, 8\pi/\omega]$. Choose $\omega$ and $A$.

!bsol
Appropriate code is

@@@CODE exer-scaling/sine_period.py fromto: import numpy@def u_damped

FIGURE: [fig-scaling/sine_period_a, width=600 frac=0.9]
!esol
!esubex

!bsubex
The *period* $P$ of $u$ is the shortest distance between two peaks (where
$u=A$). Show mathematically that

!bt
\[ P = \frac{2\pi}{\omega}\tp\]
!et
Frequently, $P$ is also referred to as the *wave length* of $u$.

!bsol
Since the sine function has period $2\pi$, we have that

!bt
\[ \sin(\omega t) = \sin(\omega t + 2\pi)\tp\]
!et
The definition of $P$ is that sine gets its value again after
time $P$:

!bt
\[ \sin(\omega t) = \sin(\omega (t + P))\tp\]
!et
Combing we get that $\sin(\omega t + 2\pi) = \sin(\omega (t + P))$,
so the arguments must be equal:

!bt
\[ \omega t + 2\pi = \omega (t + P),\]
!et
from which it follows that $P=2\pi/\omega$.

An alternative is to find the peaks as the points where $du/dt=0$.
Since $du/dt = \omega\cos (\omega t)$, this function is zero when
$\omega t = n\pi$ for integer $n$. If $n\pi$ corresponds to a maximum,
$(n+1)\pi$ will correspond to a minimum and $(n+2)\pi$ to the next
maximum. The period $P$ is the distance in time between two maxima:

!bt
\[ \omega(t + P) - \omega t = (n+2\pi - n\pi\quad\Rightarrow\quad
P = \frac{2\pi}{\omega}\tp
\]
!et
!esol
!esubex

!bsubex
Plot the damped signal $u(t)=e^{-at}\sin (\omega t)$ over four periods
of $sin(\omega t)$. Choose $\omega$, $A$, and $a$.

!bsol
Code:

@@@CODE exer-scaling/sine_period.py fromto: def u_damped@def d\(

FIGURE: [fig-scaling/sine_period_c, width=600 frac=0.9]
!esol
!esubex

!bsubex
What is the period of $u(t)=e^{-at}\sin (\omega t)$? We define the
period $P$ as the shortest distance between two peaks of the signal.

!bhint
Use that $v = p\cos(\omega t) + q\sin (\omega t)$ can be rewritten
as $v = B\cos(\omega t - \phi)$ with $B=\sqrt{p^2 + q^2}$ and
$\phi = \tan^{-1}(p/q)$. Use such a rewrite of $u'$ to find the peaks of
$u$ and then the period.
!ehint

!bsol
Finding the extrema from $u^{\prime}=0$ leads to

!bt
\[ u^{\prime} = -ae^{-at}\sin(\omega t) + e^{-at}\omega\cos(\omega t) = 0\tp\]
!et
Using the hint to rewrite ($p=\omega$, $q=-a$), we get

!bt
\[ u^{\prime} = e^{-at}B\cos(\omega t - \phi)=0,\quad B=\sqrt{\omega^2 + a^2},\ \phi = \tan^{-1}(-\omega/a)\tp\]
!et
Now, $e^{-at}$ is always positive so only the cosine function can
cross zero, and that happens when the argument is $n\pi$ for integer $n$.
However, all the maxima only occurs for $2n\pi$ ($n$ integer).
Demanding the argument to be $2n\pi$ we get the distance between two
nearby peaks as

!bt
\[ \omega (t + P) - \phi - (\omega t - \phi) = 2(n+1)\pi - 2n\pi,\]
!et
which leads to

!bt
\[ \omega P = 2\pi\quad\Rightarrow\quad P = \frac{2\pi}{\omega}\tp\]
!et
The period of the damped signal is the same; only $\omega$ can alter
the period.
!esol
!esubex

!bremarks
The *frequency* is the number of up and down cycles in one unit time.
Since there is one cycle in a period $P$, the frequency is $f =1/P$,
measured in Hz.
The *angular frequency* $\omega$ is then $\omega = 2\pi/P = 2\pi f$.
!eremarks

===== Problem: Oscillating mass with sliding friction =====
label{scale:vib:exer:sliding}
file=sliding_box

FIGURE: [fig-scaling/oscillator_sliding, width=500 frac=0.7] Body sliding on a surface. label{scale:vib:exer:sliding:fig}

A mass attached to a spring is sliding on a surface and subject to
a friction force, see Figure ref{scale:vib:exer:sliding:fig}.
The spring represents a force $-ku\ii$, where $k$ is the spring stiffness.
The friction force is proportional to the normal force on the surface,
$-mg\jj$, and given by $-f(\dot u)\ii$, where

!bt
\[ f(\dot u) = \left\lbrace\begin{array}{ll}
-\mu mg,& \dot u < 0,\\
\mu mg, & \dot u > 0,\\
0,      & \dot u=0
\end{array}\right.\]
!et
Here, $\mu$ is a friction coefficient. With the signum function

!bt
\[ \mbox{sign(x)} = \left\lbrace\begin{array}{ll}
-1,& x < 0,\\
1, & x > 0,\\
0, & x=0
\end{array}\right.\]
!et
we can simply write $f(\dot u) = \mu mg\,\hbox{sign}(\dot u)$
(the sign function is implemented by `numpy.sign`).

The ODE problem for this one-dimensional oscillatory motion reads

!bt
\begin{equation}
m\ddot u + \mu mg\hbox{sign}(\dot u) + ku = 0,\quad u(0)=I,\ \dot u(0)=V\tp
\end{equation}
!et

!bsubex
Scale the problem.

!bsol
Inserting the dimensionless dependent and independent variables,

!bt
\[ \bar u = \frac{u}{I},\quad \bar t = \frac{t}{t_c},\]
!et
in the problem gives

!bt
\[ \frac{d^2\bar u}{d\bar t^2} + \frac{t_c^2\mu g}{I}\hbox{sign}\left(
\frac{d\bar u}{d\bar t}\right) + \frac{t_c^2k}{m}\bar u
= 0,\quad \bar u(0)=1,\ \frac{d\bar u}{d\bar t}(0)=\frac{Vt_c}{I}\tp
\]
!et
As usual, we base the characteristic time on the friction-free
oscillations, which means a balance of the acceleration term and
the spring term. That is, $t_c^2k/m = 1$, and consequently
$t_c = \sqrt{m/k}$.

!bt
\[ \frac{d^2\bar u}{d\bar t^2} + \frac{\mu mg}{kI}\hbox{sign}\left(
\frac{d\bar u}{d\bar t}\right) + \bar u
= 0,\quad \bar u(0)=1,\ \frac{d\bar u}{d\bar t}(0)=\frac{V\sqrt{mk}}{kI}\tp
\]
!et
Introducing the dimensionless variables

!bt
\[ \alpha = \frac{\mu mg}{kI},\quad
\beta = \frac{V\sqrt{mk}}{kI},\]
!et
the scaled problem can then be written

!bt
\[ \frac{d^2\bar u}{d\bar t^2} + \alpha\hbox{sign}\left(
\frac{d\bar u}{d\bar t}\right) + \bar u
= 0,\quad \bar u(0)=1,\ \frac{d\bar u}{d\bar t}(0)=\beta\tp
\]
!et
The initial set of 6 parameters $(\mu, m, g, k, I, V)$ are
reduced to 2 dimensionless combinations.

Let us check that the dimensionless parameters really are dimensionless.
From the original ODE we know that each term has the dimension of
force, i.e., $[\hbox{MLT}^{-2}]$. Therefore, the friction coefficient
$\mu$ is dimensionless
since $mg$ has dimension $[\hbox{MLT}^{-2}]$, and $k$ has dimension
$[\hbox{MT}^{-2}]$ since $u$ has dimension $[\hbox{L}]$.
Since $I$ has the same dimension as $u$, $kI$ has the dimension of
$[\hbox{MLT}^{-2}]$, which is the dimension of $mg$, and $\alpha$ is
dimensionless. The $\beta$ parameter has dimensions
$[\hbox{LT}^{-1}\hbox{M}^{1/2}\hbox{M}^{-1/2}\hbox{TL}^{-1}=[1]$.
!esol
!esubex

!bsubex
Implement the scaled model. Simulate for $\alpha = 0, 0.05, 0.1$
and $\beta =0$.

!bsol
We can use the package "Odespy": "https://github.com/hplgit/odespy"
to solve the ODE. This requires rewriting the ODE as a system of two
first-order ODEs:

!bt
\begin{align*}
v' &= - \alpha\hbox{sign}(v) - \bar u,
u' &= v,
\end{align*}
!et
with initial conditions $v(0)=\beta$ and $u(0)=1$. Here, $u(t)$ corresponds
to the previous $\bar u(\bar t)$, while $v(t)$ corresponds to
$d\bar u/\bar t (\bar t)$. Appropriate code is

@@@CODE exer-scaling/sliding_box.py fromto: import matplot@raw_input

We find that simulating for 6 periods is relevant for $\alpha=0, 0.05, 0.1$.

FIGURE: [fig-scaling/sliding_box, width=600 frac=0.8]

!esol
!esubex


===== Problem: Pendulum equations =====
label{sec:scale:exer:pendulum}
file=pendulum

The equation for a so-called simple pendulum with a mass $m$ at the end is

!bt
\begin{equation}
mL\ddot\theta + mg\sin\theta = 0,
\end{equation}
!et
where $\theta(t)$ is the angle with the vertical, $L$ is the length of
the pendulum, and $g$ is the acceleration of gravity.

A physical pendulum with moment of inertia $I$ is governed by
a similar equation,

!bt
\begin{equation}
I\ddot\theta + mgL\sin\theta = 0\tp
\end{equation}
!et
Both equations have the initial conditions $\theta(0)=\Theta$ and
$\theta'(0)=0$ (start at rest).

!bsubex
Use $\theta$ as dimensionless unknown, find a proper time scale,
and scale both differential equations.

!bsol
Introducing $\bar t=t/t_c$ gives

!bt
\begin{align*}
mL\frac{1}{t_c^2}\frac{d^2\theta}{d\bar t^2} + mg\sin\theta &= 0,\\
I\frac{1}{t_c^2}\frac{d^2\theta}{d\bar t^2} + mgL\sin\theta &= 0\tp
\end{align*}
!et
or on dimensionless form,

!bt
\begin{align*}
\frac{d^2\theta}{d\bar t^2} + \frac{t_c^2g}{L}\sin\theta &= 0,\\
\frac{d^2\theta}{d\bar t^2} + \frac{t_c^2mgL}{I}\sin\theta &= 0\tp
\end{align*}
!et
An obvious choice to make the terms equal are $t_c=\sqrt{L/g}$
in the first equation and $t_c=\sqrt{I/(mgL)}$ in the second.
These choices are also compatible with the frequencies if the
angle is small: $\ddot\theta + g/L\theta = 0$ has solution
of the type $\sin(\omega t)$ with $\omega = \sqrt{g/L}$, and then
$t_c=1/\omega$ is a natural scale.

The dimensionless equations become equal in this case:

!bt
\[ \frac{d^2\theta}{d\bar t^2} + \sin\theta = 0\tp\]
!et
!esol
!esubex

!bsubex
Some may argue that $\theta$ is not dimensionless since it is measured
in radians. One may introduce a truly dimensionless angle $\bar\theta
\in [0,1]$. Set up the scaled ODE problem in this case.

!bsol
A $\bar\theta
\in [0,1]$ is obtained by
$\bar\theta = \theta/\Theta$.
The resulting equation then becomes

!bt
\[ \frac{d^2\bar\theta}{d\bar t^2} + \Theta^{-1}\sin(\Theta\bar\theta) = 0,\]
!et
with boundary condition $\bar\theta(0)=1$. That is, the only
parameter $\Theta$ either
remains in the ODE or in the initial condition.
!esol
!esubex

!bsubex
Simulate the problem in b) for $\Theta = 1,20,45,60$ measured in degrees.

!bsol
We use "Odespy": "https://github.com/hplgit/odespy"
to solve the ODE, rewritten as system of first-order ODEs:
$\bar\omega ' = -\Theta^{-1}\sin(\Theta\bar\theta)$ and
$\bar\theta' = \bar\omega$. Appropriate code is

@@@CODE exer-scaling/pendulum.py fromto: import matplot@raw_input

FIGURE: [fig-scaling/pendulum, width=600 frac=0.8]

We clearly see that increasing $\Theta$ increases the period of
the oscillations.

__Remark.__ The scaling in b) is more suitable for comparing
graphs than the scaling in a) since all the curves have the
same amplitude, just different frequency/period. With the scaling in
a), we would also get a major difference in amplitudes.
!esol
!esubex

===== Exercise: ODEs for a binary star =====
label{sec:scale:exer:binary_star}
file=binary_star

The equations for a "binary star": "https://en.wikipedia.org/wiki/Binary_star",
or a planet and a moon, are

!bt
\begin{align}
m_A\ddot\x_A &= \F,\\
m_B\ddot\x_B &= -\F,
\end{align}
!et
where $\x_A$ is the position of object (star) A, and $\x_B$ is the position
object B. The corresponding masses are $m_A$ and $m_B$.
The only force is the gravity force

!bt
\[ \F = \frac{Gm_Am_B}{||\rpos||^3}\rpos,\]
!et
where

!bt
\[ \rpos(t) = \x_B(t) - \x_A(t),\]
!et
and $G$ is the gravitational constant: $G=6.674\cdot 10^{-11}\hbox{ Nm}^2/\hbox{kg}^2$. A problem with these equations is that the parameters are very large
($m_A$, $m_B$, $||\rpos||$) or very small ($G$). The rotation time
for binary stars can be very small and large as well.

!bsubex
Scale the equations.

!bsol
A natural length scale could be the initial distance between the objects:
$L=\rpos(0)$. We write the dimensionless quantities as

!bt
\[ \bar\x_A = \frac{\x_A}{L},\quad\bar\x_B = \frac{\x_B}{L},\quad
\bar t = \frac{t}{t_c}\tp\]
!et
The gravity force is transformed to

!bt
\[ \F = \frac{Gm_Am_B}{L^2||\bar\rpos||^3}\bar\rpos,\quad \bar\rpos = \bar\x_B - \bar\x_A,\]
!et
so the first ODE for $\x_A$ becomes

!bt
\[ \frac{d^2 \bar\x_A}{d\bar t^2} =
\frac{Gm_Bt_c^2}{L^3}\frac{\bar\rpos}{||\bar\rpos||^3}\tp\]
!et
Assuming that quantities with a bar and their derivatives are around unity
in size, it is natural to choose $t_c$ such that the fraction $Gm_Bt_c/L^2=1$:

!bt
\[ t_c = \sqrt{\frac{L^3}{Gm_B}}\tp\]
!et
From the other equation for $\x_B$ we get another candidate for $t_c$ with
$m_A$ instead of $m_B$. Which mass we choose play a role if $m_A\ll m_B$ or
$m_B\ll m_A$. One solution is to use the sum of the masses:

!bt
\[ t_c = \sqrt{\frac{L^3}{G(m_A+m_B)}}\tp\]
!et
Taking a look at "Kepler's laws": "https://en.wikipedia.org/wiki/Kepler%27s_laws_of_planetary_motion" of planetary motion, the orbital period for a planet around the star is given by the $t_c$ above, except for a missing factor of $2\pi$,
but that means that $t_c^{-1}$ is just the angular frequency of the motion.
Our characteristic time $t_c$ is therefore highly relevant.
Introducing the dimensionless number

!bt
\[ \alpha = \frac{m_A}{m_B},\]
!et
we can write the dimensionless ODE as

!bt
\begin{align}
\frac{d^2 \bar\x_A}{d\bar t^2} &=
\frac{1}{1+\alpha}\frac{\bar\rpos}{||\bar\rpos||^3},\\
\frac{d^2 \bar\x_B}{d\bar t^2} &=
\frac{1}{1+\alpha^{-1}}\frac{\bar\rpos}{||\bar\rpos||^3}\tp
\end{align}
!et

In the limit $m_A\ll m_B$, i.e., $\alpha\ll 1$,
object B stands still, say $\bar\x_B=0$, and object
A orbits according to

!bt
\[ \frac{d^2 \bar\x_A}{d\bar t^2} = -\frac{\bar\x_A}{||\bar \x_A||^3}\tp\]
!et
To better see the motion, and that our scaling is reasonable,
we introduce polar coordinates $r$ and $\theta$:

!bt
\[ \bar\x_A = r\cos\theta\ii + r\sin\theta\jj,\]
!et
which means $\bar\x_A$ can be written as $\bar\x_A =r\ir$. Since

!bt
\[ \frac{d}{dt}\ir = \dot\theta\ith,\quad \frac{d}{dt}\ith = -\dot\theta\ir,\]
!et
we have

!bt
\[ \frac{d^2 \bar\x_A}{d\bar t^2} =
(\ddot r - r\dot\theta^2)\ir + (r\ddot\theta + 2\dot r\dot\theta)\ith\tp
\]
!et
The equation of motion for mass A is then

!bt
\begin{align*}
\ddot r - r\dot\theta^2 &= -\frac{1}{r^2},\\
r\ddot\theta + 2\dot r\dot\theta &= 0\tp
\end{align*}
!et
The special case of circular motion, $r=1$, fulfills the equations, since
the latter equation then gives $\dot\theta =\hbox{const}$ and
the former then gives $\dot\theta = 1$, i.e., the motion is
$r(t)=1$, $\theta(t)=t$, with unit angular frequency as expected and
period $2\pi$ as expected.
!esol
!esubex

!bsubex
Solve the scaled equations numerically for two cases:

 o a planet around a star:
   $\alpha = 10^{-3}$, $\x_A(0)=(1,0)$, $\dot\x_A(0)=(0,1)$,
   $\x_B(0)=0$, $\dot\x_B(0)=0$
 o two stars:
   $\alpha = \half$, $\x_A(0)=(1,0)$, $\dot\x_A(0)=(0,\half)$,
   $\x_B(0)=0$, $\dot\x_B(0)=(0,-\half)$

An assumption here is that the orbits are co-planar such that they can
be taken to lie in the $xy$ plane.

# #if FORMAT in ('html', 'sphinx')
Here is a movie of two rotating stars (point 2 above):

MOVIE: [mov-scaling/binary_star/movie.mp4]

# #endif

!bsol
Here is an appropriate program
(using "SciTools": "https://github.com/hplgit/scitools"
for simpler animation code than required by Matplotlib):

@@@CODE exer-scaling/binary_star.py

FIGURE: [fig-scaling/planet_circular, width=500 frac=0.7] Planet in circular motion around a star.

FIGURE: [mov-scaling/binary_star/tmp_0100, width=500 frac=0.7] Two rotating stars.

!esol
!esubex

===== Problem: Duffing's equation =====
label{scale:vib:exer:Duffing}
file=Duffing_eq

Duffing's equation is a vibration equation with linear and cubic
spring terms:

!bt
\[ mu'' + k_0u + k_1u^3 = 0,\quad u(0)=U_0,\ u'(0)=0\tp\]
!et
Scale this problem.

!bsol
We introduce $\bar t = t/t_c$ and $\bar u = u/u_c$:

!bt
\[ mt_c^{-2}u_c\bar u'' + k_0u_c\bar u + k_1u_c^3\bar u^3=,\quad
u_c\bar u(0)=U_0,\ u_c\bar u'(0)=0\tp\]
!et
Choosing $t_c$ as in a linear vibration problem, $t_c = \sqrt{m/k_0}$,
and $u_c=U_0$, we get

!bt
\[ \bar u'' + \bar u + \alpha u^3 = 0,\quad \bar u(0)=1,\ \bar u'(0)=0,\]
!et
where

!bt
\[ \alpha = U_0^2\frac{k_1}{k_0},\]
!et
is a dimensionless parameter reflecting the ratio of the
cubic spring term $k_1U_0^3$ and the linear spring term $k_0U_0$
at maximum displacement.
!esol

===== Problem: Vertical motion in a varying gravity field =====
label{scale:vib:exer:rocket}
file=varying_gravity

A body (e.g., projectile or rocket) is launched at the earth's surface
at velocity $V$. The body's distance (height) from the earth's surface
at time $t$ is represented by the function $h(t)$.
Unless $h$ is very much smaller than the earth's radius $R$, the motion
takes place in a varying gravity field. The governing ODE problem for
$h(t)$ is then

!bt
\begin{equation}
h''(t) = -\frac{R^2g}{(h+R)^2},\quad h(0)=0,\ h'(0)=V,\quad t\in (0,T],
\end{equation}
!et
where $g$ is the acceleration of gravity at the earth's surface.

The goal is to discuss three scalings of this problem. First we introduce

!bt
\[ \bar h = \frac{h}{h_c},\quad \bar t = \frac{t}{t_c},\]
!et
which gives the dimensionless ODE

!bt
\[
\frac{d^2\bar h}{d\bar t^2} = -\frac{t_c^2}{h_c}\frac{R^2g}{(h_c\bar h+R)^2}
= -\frac{t_c^2}{h_c^3}\frac{R^2g}{\left(\bar h+ R/h_c\right)^2}
\]
!et
and the dimensionless initial condition

!bt
\[ \frac{d\bar h}{d\bar t}(0) = \frac{t_cV}{h_c}\tp\]
!et
The key dimensionless variable in this problem turns out to be

!bt
\[ \epsilon = \frac{V}{\sqrt{Rg}}\tp\]
!et

!bsubex
Assume we study the motion over long distances such that
$h$ may be of the same size as $R$. In this case, $h_c=R$ is a
reasonable choice. Determine $t_c$ from requiring the initial velocity
to be unity. Set up the dimensionless ODE problem.

!bsol
The suggested requirement leads to

!bt
\[ \frac{t_cV}{h_c} = \frac{t_cV}{R} = 1\quad\Rightarrow\quad
t_c = \frac{R}{V}\tp\]
!et
Inserting this $t_c$ in the ODE gives the scaled ODE problem

!bt
\[
\frac{d^2\bar h}{d\bar t^2} =
-\frac{1}{\epsilon^{2}\left(1 + \bar h\right)^2},
\quad \bar h(0)=0,\ \frac{d\bar h}{d\bar t}(0)=1\tp\]
!et
!esol
!esubex

!bsubex
As a), but determine $t_c$ by demanding both terms in the scaled ODE to
have unit coefficients.

!bsol
We set

!bt
\[ \frac{t_c^2}{h_c^3}R^2g = \frac{t_c^2g}{R}=1\quad\Rightarrow\quad
t_c = \sqrt{\frac{R}{g}}\tp\]
!et
The initial condition then becomes

!bt
\[ \frac{d\bar h}{d\bar t}(0) = \frac{V}{\sqrt{Rg}} = \epsilon\tp\]
!et
The scaled ODE problem is now

!bt
\[ \frac{d^2\bar h}{d\bar t^2} = -\frac{1}{\left(1 + \bar h\right)^2},
\quad \bar h(0)=0,\ \frac{d\bar h}{d\bar t}(0)=\epsilon\tp\]
!et
!esol
!esubex

!bsubex
For small initial velocity $V$, $h$ will be small compared to $R$.
In the limit $h/R\rightarrow 0$,
the governing equation simplifies to the well-known motion in a
constant gravity field: $h''=-g$. Use this model to suggest a time and
length scale, and derive a dimensionless ODE problem.

!bsol
The solution of $h''=-g$ with $h(0)$ and $h'(0)=V$ is easily obtained
by integrating twice: $h=-\half gt^2 +Vt$. The maximum height reached
by the body is found by setting $h'(t)=0$: $V-gt=0$, which suggests
a corresponding characteristic time $t_c = V/g$. The responding maximum height
$h(t_c)=\half V^2/g$ can be used as characteristic height: $h_c=\half V^2/g$.
The factor $\half$ is not important, and the ODE problem looks nicer without
it, so we simply set $h_c=V^2/g$.
Inserted in the initial condition, we get

!bt
\[ \frac{d\bar h}{d\bar t}(0) = \frac{Vt_c}{h_c}= 1\tp\]
!et
The scaled ODE takes the form

!bt
\[
\frac{d^2\bar h}{d\bar t^2}
= -\frac{\epsilon^{-4}}{\left(\bar h+2\epsilon^{-2}\right)^2}
= -\frac{1}{\left(1 + \epsilon^2\bar h\right)^2}\tp
\]
!et
!esol
!esubex

!bsubex
Give an interpretation of the dimensionless parameter $\epsilon$.

!bsol
We know from c) that the characteristic height in the constant gravity
limit is $V^2/g$. We can therefore write

!bt
\[ \epsilon^2 = \frac{V^2/g}{R},\]
!et
which shows that $\epsilon^2$
is the ratio of the height for small $V$, i.e., motion in a constant gravity
field, and the earth's radius. A small $\epsilon$ means that we can
neglect varying gravity.
!esol
!esubex

!bsubex
Solve numerically for $\bar h(\bar t)$ in each of the three scalings in
a), b), and c), with $\epsilon^2 =0.01, 0.1, 0.5, 1, 2$.
When are the various scalings appropriate? (That is, when are $\bar t$
and $\bar h$ of size unity or at least not very small or big?)

!bsol
For numerical solution we rewrite the ODE as a system of two first-order
ODEs by introducing a new variable $\bar v$ (velocity): $\bar h'=\bar v$,
$\bar v' = ...$.
Here is a code that employs "Odespy": "https://github.com/hplgit/odespy"
to solve the system of first-order ODEs:

@@@CODE exer-scaling/varying_gravity.py fromto: import odespy@if __name

Recall from d) that $\epsilon^2$ is the ratio of the height reached
in a constant gravity field and the earth's radius.
The figures below shows the results for $\epsilon^2=0.01,0.1,0.5, 1, 2$,
respectively.

FIGURE: [fig-scaling/varying_gravity_0_01, width=800 frac=1]

FIGURE: [fig-scaling/varying_gravity_0_1, width=800 frac=1]

FIGURE: [fig-scaling/varying_gravity_0_5, width=800 frac=1]

FIGURE: [fig-scaling/varying_gravity_1, width=800 frac=1]

FIGURE: [fig-scaling/varying_gravity_2, width=800 frac=1]

For $\epsilon$ small ($\epsilon^2 =0.01, 0.1$), we see that the scaling in
c) is most relevant since the scalings in a) and b) give small
$\bar h$ and $\bar t$.  For $\epsilon=1$, all
three scalings are equal.  For larger $\epsilon$, the body does not
return to the earth. The scalings in a) and c) become equal in the
limit $\epsilon\rightarrow\infty$, but they are already quite similar
for $\epsilon = \sqrt{2}$ according to the bottom figure above.
The scaling in c) is therefore the most appealing one since it works
for small as well as large $\epsilon$ and become close to the others
for $\epsilon$ around unity.

__Remark.__
The present problem is one of the few problems that is
discussed at length in the literature, see
Logan cite{Logan_1987} and Lin and Segel cite{Lin_Segel}.
The standard argument is that the scaling in c) is favorable since
it is the only scaling that is valid as $\epsilon\rightarrow 0$. However,
that it is robust also for the larger relevant values of $\epsilon$ is
something that is only clear when we solve the three problems
numerically.
!esol
!esubex

===== Problem: Schroedinger's equation =====
label{scale:vib:exer:quantum}
file=Schroedinger

A simplified stationary
Schroedinger's equation for one electron, assuming radial symmetry, reads

!bt
\begin{equation}
-\frac{\hbar^2}{2m}
\left(\frac{1}{r^2}\frac{d}{dr}\left(r^2\frac{d}{dr}\right)\right) R
+ V(r)R = ER,
label{scale:vib:exer:quantum:Req}
\end{equation}
!et
where $r$ is the radial coordinate, $R$ is the wave function,
$\hbar$ is Planck's constant, $m$ is the mass of the electron,
$V=\half kr^2$ is the potential for some constant $k$, and $E$ is
the eigenvalue, for the energy, to be determined along with $R(r)$.

Show that the scaled version of (ref{scale:vib:exer:quantum:Req}) can be written

!bt
\begin{equation}
- \left(\frac{1}{r^2}\frac{d}{dr}\left(r^2\frac{d}{dr}\right)\right)
\bar R + \bar r^2\bar R = \lambda\bar R,
label{scale:vib:exer:quantum:barReq}
\end{equation}
!et
where $\lambda$ is a dimensionless eigenvalue

!bt
\[ \lambda = \frac{2E}{\hbar}\sqrt{\frac{m}{k}}\tp\]
!et
The symbol $\bar r$ is the scaled coordinate, and $\bar R$ is a scaled
version of $R$ (the scaling factor drops out of the equation).

!bsol
We introduce

!bt
\[ \bar r = \frac{r}{r_c},\quad\bar R = \frac{R}{R_c},\]
!et
and insert these expressions in the differential equation.
Multiplying with $2mr_c^2/\hbar^2$ we get

!bt
\[
-\left(\frac{1}{\bar r^2}\frac{d}{d\bar r}\left(\bar r^2\frac{d}{d\bar r}
\right)\right) \bar R
+ \frac{kmrc^4}{\hbar^2}\bar r^2\bar R = \frac{2Emr_c^2}{\hbar^2}R\tp
\]
!et
Note that all the $R_c$ factors cancel.

Balance of the two terms on the left-hand side suggests that the
length scale $r_c$ can be determined from requiring

!bt
\[ \frac{kmrc^4}{\hbar^2} = 1,\]
!et
i.e.,

!bt
\[ r_c = \left(\frac{\hbar^2}{km}\right)^{\frac{1}{4}}\tp\]
!et
A bit of rewriting in the right-hand side term gives the
given expression for $\lambda$. We then end up with
(ref{scale:vib:exer:quantum:barReq}).
!esol

!bremarks
Introducing $u=rR$ and renaming $\bar r$ to $x$,
(ref{scale:vib:exer:quantum:barReq}) can be recast to the simple form

!bt
\[ -u'' + x^2u = \lambda u,\]
!et
which is an easier eigenvalue problem to solve numerically (the boundary
conditions are $u(0)=0$ and $\lim_{x\rightarrow\infty}u(x)=0$).
!eremarks


!split
========= Basic PDE models =========

This chapter extends the scaling technique to well-known partial differential
equation (PDE) models for waves, diffusion, and transport.
We start out with the simplest 1D models of the PDEs and then progress
with additional terms, different types of boundary and initial conditions,
and generalizations to 2D and 3D.

======= The wave equation =======
label{sec:scale:wave}

A standard, linear, one-dimensional wave equation problem
in a homogeneous medium may be written as

!bt
\begin{equation}
\frac{\partial^2 u}{\partial t^2} =
c^2 {\partial^2 u\over\partial x^2}, \quad  x\in (0,L),\ t\in (0,T],
label{scale:wave:pde1}
\end{equation}
!et
where $c$ is the constant wave velocity of the medium.
With a briefer notation, where subscripts indicate derivatives,
the PDE (ref{scale:wave:pde1}) can be written
$u_{tt}=c^2u_{xx}$. This subscript notation will occasionally be
used later.

In multi dimensions in heterogeneous media we have the generalization

!bt
\begin{equation}
\frac{\partial^2 u}{\partial t^2} =
\nabla\cdot\left(c^2 \nabla u\right) + f, \quad  x,y,z\in \Omega,\ t\in (0,T],
label{scale:wave:pde1:3D}
\end{equation}
!et
where $f$ represents a forcing.
How to scale time depends on the PDE, the spatial scale depends on
the domain, and the scale of $u$ usually depends on $f$ or the
boundary or initial condition.

===== Simple homogeneous Dirichlet conditions =====

Let us first start with (ref{scale:wave:pde1}),
homogeneous Dirichlet conditions in space, and
no initial velocity $u_t$:

!bt
\begin{align}
u(x,0) &= I(x), \quad &x\in [0,L],
label{scale:wave:pde1:ic:u}\\
{\partial\over\partial t}u(x,0) &= 0, \quad & x\in [0,L],
label{scale:wave:pde1:ic:ut}\\
u(0,t) & = 0, \quad  & t\in (0,T],
label{scale:wave:pde1:bc:0}\\
u(L,t) & = 0, \quad  & t\in (0,T].
label{scale:wave:pde1:bc:L}
\end{align}
!et
The independent variables are $x$ and $t$, while $u$ is the dependent
variable.
The rest of the parameters, $c$, $L$, $T$, and $I(x)$, are given data.

We start with introducing dimensionless versions of the independent and
dependent variables:

!bt
\[
\bar x = \frac{x}{x_c},\quad \bar t=\frac{t}{t_c},\quad\bar u=\frac{u}{u_c}
\tp
\]
!et
Inserting the $x=x_c\bar x$, etc., in (ref{scale:wave:pde1}) and
(ref{scale:wave:pde1:ic:u})-(ref{scale:wave:pde1:bc:L}) gives

!bt
\begin{align*}
\frac{\partial^2 \bar u}{\partial \bar t^2} &=
\frac{t_c^2c^2}{x_c^2}{\partial^2 \bar u\over\partial x^2}, \quad & \bar x\in (0,L/x_c),\ \bar t\in (0,T/t_c],
\\
\bar u(\bar x,0) &= \frac{I(x_c\bar x)}{u_c},
\quad &\bar x\in [0,L/x_c],
\\
\frac{\partial}{\partial \bar t}\bar u(\bar x,0) &= 0,
\quad & \bar x\in [0,L/x_c],
\\
\bar u(0,\bar t) & = 0,
\quad  & \bar t\in (0,T/t_c],
\\
\bar u(L/x_c,\bar t) & = 0,
\quad &\bar t\in (0,T/t_c].
\end{align*}
!et

The key question is how to define the scales.
A natural choice is $x_c=L$ since this makes $\bar x\in [0,1]$.
For the spatial scale and the problem governed by
(ref{scale:wave:pde1}) we
have some analytical insight that can help.
The solution behaves like

!bt
\begin{equation}
u(x,t) = f_R(x-ct) + f_R(x+ct),
label{scale:wave:pde:sol:general}
\end{equation}
!et
i.e., a right- and left-going wave with velocity $c$. The initial
conditions constrain the choices of $f_R$ and $f_L$ to $f_L + f_R=I$
and $-cf_L' + cf_R' = 0$. The solution is $f_R = f_L = \frac{1}{2}$,
and consequently

!bt
\[
u(x,t) = \frac{1}{2}I(x-ct) + \frac{1}{2}I(x+ct),
\]
!et
which tells that the initial condition splits in two, half of it moves
to the left and half to the right.
This means in particular that we can choose $u_c=\max_x |I(x)|$
and get $|\bar u|\leq 1$, which is a goal. It must be added that
boundary conditions may result in reflected waves, and the solution is
then more complicated than indicated in the formula above.

Regarding the time scale, we may look at the two terms in the scaled
PDE and argue that if $|u|$ and its derivatives are to be of order unity,
then the size of the second-order derivatives should be the same, and
$t_c$ can be chosen to make the coefficient $t_c^2 c^2 /x_c^2$ unity,
i.e., $t_c=L/c$.
Another reasoning may set $t_c$ as the time it takes the wave
to travel through the domain $[0,L]$. Since the wave has constant
speed $c$, $t_c = L/c$.

With the described choices of scales,
we end up with the dimensionless initial-boundary value problem

!bt
\begin{align}
\frac{\partial^2 \bar u}{\partial \bar t^2} &=
{\partial^2 \bar u\over\partial x^2}, \quad & \bar x\in (0,1),\ \bar t\in (0,\bar T],
label{scale:wave:pde1:d}\\
\bar u(\bar x,0) &= \frac{I(\bar x L)}{\max_{x\in(0,L)} |I(x)|},
\quad &\bar x\in [0,1],
label{scale:wave:pde1:ic:u:d}\\
{\partial\over\partial \bar t}\bar u(\bar x,0) &= 0,
\quad & \bar x\in [0,1],
label{scale:wave:pde1:ic:ut:d}\\
\bar u(0,\bar t) & = 0,
\quad  &\bar t\in (0,\bar T],
label{scale:wave:pde1:bc:0:d}\\
\bar u(1,\bar t) & = 0,
\quad  &\bar t\in (0,\bar T].
label{scale:wave:pde1:bc:L:d}
\end{align}
!et
Here, $\bar T = Tc/L$.

The striking feature of
(ref{scale:wave:pde1:d})-(ref{scale:wave:pde1:bc:L:d})
is that there are *no physical parameters* involved! Everything we need
to specify is the shape of the initial condition and then scale it
such that it is less than or equal to 1.

The physical solution with dimension is recovered from $\bar u(\bar x,\bar t)$
through

!bt
\begin{equation}
u(x,t) = \max_{x\in(0,L)}I(x)\,\bar u(\bar x L, \bar t L/c)
\end{equation}
!et

===== Implementation of the scaled wave equation =====

How do we implement (ref{scale:wave:pde1:d})-(ref{scale:wave:pde1:bc:L:d})?
As for the simpler mathematical models, we suggest to implement the model
with dimensions and observe how to set parameters to obtain the scaled
model. In the present case, one must choose $L=1$, $c=1$, and scale $I$ by its
maximum value. That's all!

Several implementations of 1D wave equation models with different
degree of mathematical and software complexity come along with this
book. The simplest
version is "`wave1D_u0.py`": "${src_scaling}/wave1D_u0.py"
that implements (ref{scale:wave:pde1}) and
(ref{scale:wave:pde1:ic:u})-(ref{scale:wave:pde1:bc:L}).
This is the code to be used in the following. It is described
in ref[Sections ref{wave:pde1:impl}][ in cite{Langtangen_Linge_fdm}][in
the book "Finite difference computing with PDEs":
"http://tinyurl.com/Langtangen-Linge-FDM-book"
cite{Langtangen_Linge_fdm}].
[Geir: section reference not active]

=== Waves on a string ===

As example, we may let the original initial-boundary value problem
(ref{scale:wave:pde1})-(ref{scale:wave:pde1:bc:L}) model vibrations of
a string on a string instrument. With $u$ as the displacement of the
string, the boundary conditions $u=0$ at the ends are relevant, as
well as the zero velocity condition $\partial u/\partial t=0$ at
$t=0$.  The initial condition $I(x)$ has typically a triangular shape
for a picked guitar string.  The physical problem needs parameters for
the amplitude of $I(x)$, the length $L$ of the string, and the value
of $c$ for the string. Only the latter is challenging as it involves
relating $c$ to the pitch (i.e., time frequency) of the string. In the
scaled problem, we can forget about all this. We simply set $L=1$,
$c=1$, and let $I(x)$ have a peak of unity at $x=x_0\in(0,1)$:

!bt
\[
\frac{I(x)}{\max_x I(x)} = \left\lbrace
\begin{array}{ll}
x/x_0, & x < x_0,\\
(1-x)/(1-x_0), & \hbox{otherwise}
\end{array}\right.
\]
!et
The dimensionless coordinate of the peak, $x_0$, is the only
dimensionless parameter in the problem. For fixed $x_0$,
one single simulation will capture all possible solutions with such
a triangular shape.


=== Detecting an already computed case ===

The file "`wave1D_u0_scaled.py`": "${src_scaling}/wave1D_u0_scaled.py"
has functionality for detecting whether a simulation corresponds to
a previously run scaled case, and if so, the solution is retrieved from
file. The implementation technique makes use of `joblib`, but is more
complicated than showed previously in this book since some of the
arguments to the function that computes the solution are functions,
and one must recognized if the function has been used as argument
before or not. There is documentation in the `wave1D_u0_scaled.py`
file how this is done.


===== Time-dependent Dirichlet condition =====
label{scale:wave:pde2}

A generalization of (ref{scale:wave:pde1})-(ref{scale:wave:pde1:bc:L})
is to allow for a time-dependent Dirichlet condition at one end, say
$u(0,t)=U_L(t)$. At the other end we may still have $u=0$.  This new
condition at $x=0$ may model a specified wave that enters the
domain. For example, if we feed in a monochromatic wave
$A\sin(k(x-ct))$ from the left end, $U_L(t)=A\sin (kct)$.  This
forcing of the wave motion has its own amplitude and time scale that
could affect the choice of $u_c$ and $t_c$.

The main difference from the previous initial-boundary value problem
is the condition at $x=0$, which now reads

!bt
\[ \bar u(0,\bar t) = \frac{U_L(\bar t t_c)}{u_c}\]
!et
in scaled form.

=== Scaling ===

Regarding the characteristic time scale, it is natural to base this
scale on the wave propagation velocity, together with the length
scale, and not on the time scale of $U_L(t)$, because the time scale
of $U_L$ basically determines whether short or long waves are fed in
at the boundary. All waves, long or short, propagate with the same
velocity $c$. We therefore continue to use $t_c=L/c$.

The solution $u$ will have one wave contribution from the initial
condition $I$ and one from the feeding of waves at $x=0$. This gives
us three choices of $u_c$: $\max_x |I| + \max_t |U_L|$, $\max_x |I|$,
or $\max_t |U_L|$. The first seems relevant if the size of $I$ and
$U_L$ are about the same, but then we can choose either $\max_x |I|$
or $\max_t |U_L|$ as characteristic size of $u$ since a factor of 2 is
not important. If $I$ is much less than $U_L$, $u_c=\max_t |u_L|$ is
relevant, while $u_c=\max_x|I|$ is the choice when $I$ has much bigger
impact than $U_L$ on $u$.

With $u_c=\max_t |U_L(t)|$, we get the scaled problem

!bt
\begin{align}
\frac{\partial^2 \bar u}{\partial \bar t^2} &=
{\partial^2 \bar u\over\partial \bar x^2},
\quad & \bar x\in (0,1),\ \bar t\in (0,\bar T],
label{scale:wave:pde2:d}\\
\bar u(\bar x,0) &= \frac{I(x_c\bar x)}{\max_t |U_L(t)|},
\quad &\bar x\in [0,1],
label{scale:wave:pde2:ic:u:d}\\
{\partial\over\partial \bar t}\bar u(\bar x,0) &= 0,
\quad & \bar x\in [0,1],
label{scale:wave:pde2:ic:ut:d}\\
\bar u(0,\bar t) & = \frac{U_L(\bar tt_c)}{\max_t |U_L(t)|},
\quad  &\bar t\in (0,\bar T],
label{scale:wave:pde2:bc:0:d}\\
\bar u(1,\bar t) & = 0,
\quad &\bar t\in (0,\bar T].
label{scale:wave:pde2:bc:L:d}
\end{align}
!et
Also this problem is free of physical parameters like $c$ and $L$.
The input is completely specified by the shape of $I(x)$ and $U_L(t)$.

=== Software ===

Software for the original problem with dimensions can be reused for
(ref{scale:wave:pde2:d})-(ref{scale:wave:pde2:bc:L:d}) by
setting $L=1$, $c=1$, and scaling $U_L(t)$ and $I(x)$ by
$\max_t |U_L(t)|$.

=== Specific case ===

As an example, consider

!bt
\begin{align*}
U_L(t) &= a\sin(\omega t)\hbox{ for } 0\leq t\leq 2\frac{\omega}{2\pi},
\hbox{ else } 0,\\
I(x)   & = Ae^{-(x-L/2)^2/\sigma^2}\tp
\end{align*}
!et
That is, we start with a Gaussian peak-shaped wave in the center of the
domain and feed in a sinusoidal wave at the left end for two periods.
The solution will be the sum of three waves: two parts from the initial
condition, plus the wave fed in from the left.

Since $\max_t |U_L|=a$ we get

!bt
\begin{align}
\bar u(\bar x,0) &= \frac{A}{a}e^{-(L/\sigma)^2(\bar x -\frac{1}{2})^2},
label{scale:wave:oscbc:I}\\
\bar u(0,\bar t) &= \sin(\bar t\omega L/c)\tp
label{scale:wave:oscbc:u0}
\end{align}
!et
Here, $U_L$ models an incoming wave $a\sin(k(x-ct)$, with $k$ specified.
The result is incoming
waves of length $\lambda = 2\pi/k$. Since $\omega =kc$,
$\bar u(0,\bar t)=\sin(kL\bar t) = \sin(2\pi\bar t L/\lambda)$.
(This formula demonstrates the previous assertion that the time scale
of $U_L$, i.e., $1/\omega$, determines the wave length $1/\omega = \lambda/(2\pi)$ in space.)
We realize from the formulas (ref{scale:wave:oscbc:I}) and
(ref{scale:wave:oscbc:u0})
that there are three key dimensionless parameters related
to these specific choices of initial and boundary conditions:

!bt
\[ \alpha = \frac{A}{a},\quad\beta = \frac{L}{\sigma},\quad\gamma = kL
=2\pi\frac{L}{\lambda}\tp\]
!et
With $\alpha$, $\beta$, and $\gamma$ we can write the dimensionless
initial and boundary conditions as

!bt
\begin{align*}
\bar u(\bar x,0) &= \alpha e^{-\beta^2(\bar x -\frac{1}{2})^2},\\
\bar u(0,\bar t) &= \sin(\gamma\bar t)\tp
\end{align*}
!et
The dimensionless parameters have the following interpretations:

 * $\alpha$: ratio of initial condition amplitude and amplitude of incoming wave
   at $x=0$
 * $\beta$: ratio of length of domain and width of initial condition
 * $\gamma$: ratio of length of domain and wave length of incoming wave

Again, these dimensionless parameters tell a lot about the interplay of
the physical effects in the problem. And only some ratios count!

We can simulate two special cases:

 o $\alpha=10$ (large) where the
   incoming wave is small and the solution is dominated by the two waves
   arising from $I(x)$,
 o $\alpha=0.1$ (small) where the incoming waves
   dominate and the solution has the initial condition just
   as a small perturbation of the wave shape.

We may choose a peak-shaped initial condition: $\beta = 10$,
and also a relatively short incoming wave compared to the domain size:
$\gamma = 6\pi$ (i.e., wave length of incoming wave is $L/6$).
A function `simulate_Gaussian_and_incoming_wave` in
the file "`session.py`": "${src_scaling}/session.py"
applies the general unscaled
solver in "`wave1D_dn.py`": "${src_scaling}/wave1D_dn.py"
for solving the wave equation with constant $c$,
and any time-dependent function or $\partial u/\partial x=0$ at the
end points. This solver is trivially adapted to the present case.
#@@@CODE src-scaling/session.py fromto: def simulate_Gaussian_and@import odespy
# #if FORMAT in ('latex', 'pdflatex')
Figures ref{scale:wave:pde2:fig:alpha10} and ref{scale:wave:pde2:fig:alpha01}
shows snapshots of how $\bar u(\bar x,\bar t)$ evolves due to a
large/small initial condition and small/large incoming wave at the left
boundary.

FIGURE: [fig-scaling/gaussian_plus_incoming_alpha10, width=800 frac=1] Snapshots of solution with large initial condition and small incoming wave ($\alpha=10$). label{scale:wave:pde2:fig:alpha10}

FIGURE: [fig-scaling/gaussian_plus_incoming_alpha01, width=800 frac=1] Snapshots of solution with small initial condition and large incoming wave ($\alpha=0.1$). label{scale:wave:pde2:fig:alpha01}

MOVIE: [https://github.com/hplgit/scaling-book/raw/master/doc/pub/book/html/mov-scaling/gaussian_plus_incoming/alpha10.mp4] $\alpha=10$.

MOVIE: [https://github.com/hplgit/scaling-book/raw/master/doc/pub/book/html/mov-scaling/gaussian_plus_incoming/alpha01.mp4] $\alpha=0.1$.

# #else

MOVIE: [mov-scaling/gaussian_plus_incoming/alpha10.mp4] $\alpha=10$.

MOVIE: [mov-scaling/gaussian_plus_incoming/alpha01.mp4] $\alpha=0.1$.

# #endif

===== Velocity initial condition =====
label{scale:wave:pde2:Vcond}

Now we change the initial condition from $u=I$ and $\partial u/\partial t = 0$ to

!bt
\begin{align}
u(x,0) &= 0,\\
\frac{\partial}{\partial t} u(x,0) &= V(x)\tp
\end{align}
!et
Impact problems are often of this kind.
The scaled version of $u_t(x,0)=V(x)$ becomes

!bt
\[ \frac{\partial}{\partial \bar t} \bar u(\bar x,0) =
\frac{t_c}{u_c}V(\bar x x_c)\tp
\]
!et

=== Analytical insight ===

From (ref{scale:wave:pde:sol:general}) we now get $f_L + f_R =0$ and
$cf_L' - cf_R' = V$. Introducing $W(x)$ such that $W'(x)=V(x)$, a solution
is $f_L=\frac{1}{2}W/c$ and $-f_R=\frac{1}{2}W/c$. We can express this
solution through the formula

!bt
\begin{equation}
u(x,t) = \frac{1}{2c}\int_{x-ct}^{x+ct} V(\xi) d\xi
 = \frac{1}{2c}(W(x+ct) - W(x-ct))\tp
 label{scale:wave:pde2:Vcond:usol}
 \end{equation}
!et

=== Scaling ===

Since $V$ is the time-derivative of $u$, the characteristic size of
$V$, call it $V_c$, is typically $u_c/t_c$.  If we, as usual, base
$t_c$ on the wave speed, $t_c = L/c$, we get $u_c = V_cL/c$.  Looking
at the solution (ref{scale:wave:pde2:Vcond:usol}), we see that $u_c$
has size $\hbox{mean}(V)L/(2c)$, where $\hbox{mean}(V)$ is the mean
value of $V$ ($W\sim\hbox{mean}(V)L$). This result suggests
$V_c=\hbox{mean}(V)$ and $u_c = \hbox{mean}(V)L/(2c)$. One may argue
that the factor 2 is not important, but if we want $|\bar u|\in [0,1]$
it is convenient to keep it.

The scaled initial condition becomes

!bt
\[ \frac{\partial}{\partial \bar t} \bar u(\bar x,0) =
\frac{t_c}{u_c}V(\bar x x_c) =
\frac{V(\bar x x_c)}{\half\hbox{mean}(V)}\tp
\]
!et


=== Nonzero initial shape ===

Suppose we change the initial condition $u(x,0)=0$ to $u(x,0)=I(x)$.
The scaled version of this condition with the above $u_c$
based on $V$ becomes

!bt
\begin{equation}
\bar u(\bar x, 0) = \frac{2cI(\bar x x_c)}{L\,\hbox{mean}(V)}\tp
label{scale:wave:pde2:Vcond:eq}
\end{equation}
!et

!bnotice Check that dimensionless numbers are dimensionless!
Is a dimensionless number really dimensionless?
It is easy to make errors when scaling equations, so checking that
such fractions are dimensionless is wise.
The dimension of $I$ is the same as $u$, here taken to be displacement:
[L].
Since $V$ is $\partial u/\partial t$, its dimension is
$[\hbox{LT}^{-1}]$. The dimensions of $c$ and $L$ are
$[\hbox{LT}^{-1}]$ and $[\hbox{L}]$. The dimension of the right-hand side
of (ref{scale:wave:pde2:Vcond:eq}) is then

!bt
\[ \frac{[\hbox{LT}^{-1}][L]}{[L][L\hbox{T}^{-1}]}
= 1,\]
!et
demonstrating that the fraction is indeed dimensionless.
!enotice

One may introduce a dimensionless initial
shape, $\bar I (\bar x)= I(\bar xL)/\max_x |I|$. Then

!bt
\[ \bar u(\bar x, 0) = \alpha\bar I(\bar x),\]
!et
where $\alpha$ the dimensionless number

!bt
\[ \alpha = \frac{2c}{L}\frac{\max_x |I(x)|}{\hbox{mean}(V)}\tp\]
!et

idx{dimensionless number}

If $V$ is much larger than $I$, one expects that the influence of $I$
is small. However, it takes time for the initial velocity $V$ to
influence the wave motion, so the speed of the waves $c$ and the length
of the domain $L$ also play a role. This is reflected in $\alpha$, which is the
important parameter.
Again, the scaling and the resulting dimensionless parameter(s)
teach us much about the interaction of the various physical effects.

#A large $\alpha$ means that the
#initial wave shape $I$
#travels quickly through the domain before the effect of $V$ becomes
#visible. The impact of $I$ may therefore be significant for small $t$
#(the numerical value of $c/L$ is very large and $\max |I|/\max |V|$ may still
#be somewhat small).
#With $\alpha$ small, not much happens before the effect of $V$ becomes
#visible. Recall that the dimensionless initial velocity is about unity
#regardless of other parameters.
#See exer-scaling/wave1D_small_I_big_V.py for experiments.

===== Variable wave velocity and forcing =====
label{scale:wave:pde2:cvar}

The next generalization regards wave propagation in
a non-homogeneous medium where the wave velocity $c$ depends on the
spatial position: $c=c(x)$. To simplify the notation we introduce
$\lambda (x) = c^2(x)$. We introduce homogeneous Neumann conditions
at $x=0$ and $x=L$. In addition, we add a force term $f(x,t)$
to the PDE, modeling wave generation in the interior of
the domain. For example, a moving slide at the bottom of a fjord
will generate surface waves and is modeled by such an $f(x,t)$ term
(provided the length of the waves is much larger than the depth so
that a simple wave equation like (ref{scale:wave:pde3}) applies).
The initial-boundary value problem
can be then expressed as

!bt
\begin{align}
\frac{\partial^2 u}{\partial t^2} &=
\frac{\partial}{\partial x}\left(
\lambda(x) {\partial u\over\partial x}\right) + f(x,t),
\quad & x\in (0,L),\ t\in (0,T],
label{scale:wave:pde3}\\
u(x,0) &= I(x),
\quad &x\in [0,L],
label{scale:wave:pde3:ic:u}\\
{\partial\over\partial t}u(x,0) &= 0,
\quad & x\in [0,L],
label{scale:wave:pde3:ic:ut}\\
\frac{\partial}{\partial x}u(0,t) & = 0,
\quad  &t\in (0,T],
label{scale:wave:pde3:bc:0}\\
\frac{\partial}{\partial x}u(L,t) & = 0,
\quad  &t\in (0,T].
label{scale:wave:pde3:bc:L}
\end{align}
!et

=== Non-dimensionalization ===

We make the coefficient $\lambda$ non-dimensional by

!bt
\begin{equation}
\bar\lambda(\bar x) = \frac{\lambda(\bar xx_c)}{\lambda_c},
\end{equation}
!et
where one normally chooses the characteristic size of $\lambda$, $\lambda_c$,
to be the maximum value such that $|\lambda|\leq 1$:

!bt
\[ \lambda_c = \max_{x\in(0,L)}\lambda(x)\tp\]
!et
Similarly, $f$ has a scaled version

!bt
\[ \bar f(\bar x,\bar t) = \frac{f(\bar x x_c, \bar t t_c)}{f_c},\]
!et
where normally we choose

!bt
\[ f_c=\max_{x,t}|f(x,t)|\tp\]
!et
Inserting dependent and independent variables expressed by their
non-dimensional counterparts yields

!bt
\begin{align*}
\frac{\partial^2 \bar u}{\partial \bar t^2} &=
\frac{t_c^2\lambda_c}{L^2}\frac{\partial}{\partial \bar x}\left(
\bar\lambda(\bar x) {\partial\bar u\over\partial\bar x}\right)
+ \frac{t_c^2f_c}{u_c}\bar f(\bar x,\bar t),
\quad & \bar x\in (0,1),\ \bar t\in (0,\bar T],\\
\bar u(\bar x,0) &= \frac{I(x)}{u_c},
\quad &\bar x\in [0,1],\\
{\partial\over\partial \bar t}\bar u(\bar x,0) &= 0,
\quad & \bar x\in [0,1],\\
\frac{\partial}{\partial \bar x}\bar u(0,\bar t) & = 0,
\quad  &\bar t\in (0,\bar T],\\
\frac{\partial}{\partial \bar x}\bar u(1,\bar t) & = 0,
\quad  &\bar t\in (0,\bar T],
\end{align*}
!et
with $\bar T = Tc/L$.


=== Choosing the time scale ===

The time scale is, as before, chosen as $t_c
=L/\sqrt{\lambda_c}$. Note that the previous (constant) wave velocity
$c$ now corresponds to $\sqrt{\lambda (x)}$.  Therefore,
$\sqrt{\lambda_c}$ is a characteristic wave velocity.

One could wonder if the time scale of the force term, $f(x,t)$,
should influence $t_c$, but as we reasoned for the boundary condition
$u(0,t)=U_L(t)$, we let the characteristic time be governed by the
signal speed in the medium, i.e., by $\sqrt{\lambda_c}$ here and not
by the time scale of the excitation $f$ which dictates the
length of the generated waves and not their propagation speed.

=== Choosing the spatial scale ===

We may choose $u_c$ as $\max_x |I(x)|$, as before,
or we may fit $u_c$ such that the coefficient in the source term
is unity, i.e., all terms balance each other.
This latter idea leads to

!bt
\[ u_c = \frac{L^2 f_c}{\lambda_c} \]
!et
and a PDE without parameters,

!bt
\[
\frac{\partial^2 \bar u}{\partial \bar t^2} =
\frac{\partial}{\partial \bar x}\left(
\bar\lambda(\bar x) {\partial\bar u\over\partial\bar x}\right)
+ \bar f(\bar x,\bar t)\tp
\]
!et
The initial condition $u(x,0)=I(x)$ becomes in dimensionless form

!bt
\[ \bar u(\bar x, 0) = u_c^{-1} \max_x |I(x)|\bar I(\bar x) =
\beta^{-1}\bar I(\bar x),\]
!et
where

!bt
\[ \beta = \frac{L^2}{\lambda_c}\frac{\max_{x,t} |f(x,t)|}{\max_x|I(x)|}\tp\]
!et

# #ifdef EXTRA
The condition $u_t(x,0)=V(x)$ becomes

!bt
\[
\frac{\partial\bar u}{\partial\bar t} = \frac{t_c}{u_c}\max_x |V(x)|\bar V
= \gamma \bar V,
\]
!et
with

!bt
\[ \gamma =
\frac{\sqrt{\lambda_c}}{L}
\frac{\max_x |V(x)|}{\max_{x,t} |f(x,t)|}\tp\]
!et
# #endif
In the case $u_c=\max_x|I(x)|$, $\bar u(\bar x,0)=\bar I(\bar x)$ and
the $\beta$ parameter appears in the PDE instead:

!bt
\[
\frac{\partial^2 \bar u}{\partial \bar t^2} =
\frac{\partial}{\partial \bar x}\left(
\bar\lambda(\bar x) {\partial\bar u\over\partial\bar x}\right)
+ \beta \bar f(\bar x,\bar t)\tp
\]
!et
With $V=0$, and $u=0$ or $u_x=0$ on the boundaries $x=0,L$, this scaling normally gives
$|\bar u|\leq 1$, since initially $|I|\leq 1$, and no boundary condition
can increase the amplitude.
[Geir: added text below. I am not shure baout mentioning retrogressive slides.
We should rather not go into details on such issues, anyhow.]
However, the forcing, $\bar f$, may inherit spatial and temporal scales of its
own that may complicate the matter. The forcing may, for instance, be
some disturbance moving with a velocity close to the propagation velocity of
the free waves. This will have an effect akin to the resonance for the vibration problem discussed in 
section ref{sec:scale:vib:undamped:mg} and the waves produced by the forcing may be much larger than 
indicated by $\beta$. On the other hand, the forcing may also consist
of alternating positive and negative parts (example: retrogressive slides). These may interfere to 
reduce the wave generation by an order of magnitude.  
=== Scaling the velocity initial condition ===

The initial condition $u_t(x,0)=V(x)$ has its dimensionless variant as

!bt
\[ \bar V(\bar x) = \frac{t_c}{u_c}\frac{V(L\bar x)}{\max_x|V(x)|},\]
!et
which becomes

!bt
\[ \frac{\partial\bar u}{\partial\bar t}(\bar x, 0) =
\frac{L}{\sqrt{\lambda_c}}\frac{\max_{x}|V(x)|}{\max_{x}|I(x)|}\bar V(\bar x),
\hbox{ if } u_c=\max_x|I(x)|,\]
!et
or

!bt
\[ \frac{\partial\bar u}{\partial\bar t}(\bar x, 0) =
\frac{\sqrt{\lambda_c}}{L}\frac{\max_{x}|V(x)|}{\max_{x,t}|f(x,t)|}
\bar V(\bar x),
\hbox{ if } u_c=t_c^2f_c=\frac{L^2}{\lambda_c}\max_{x,t}|f(x,t)|\tp\]
!et
Introducing the dimensionless number $\alpha$ (cf. Section
ref{scale:wave:pde2:Vcond}),

!bt
\[ \alpha^{-1} = \frac{\sqrt{\lambda_c}}{L}\frac{\max_{x}|V(x)|}{\max_{x,t}|f(x,t)|},
\]
!et
we can write

!bt
\[
\frac{\partial\bar u}{\partial\bar t}(\bar x, 0) =
\left\lbrace \begin{array}{ll}
\alpha^{-1}\bar V(\bar x),& u_c=\max_x|I|\\
\alpha^{-1}\beta^{-1}\bar V(\bar x), & u_c=t_c^2f_c
\end{array}\right.
\]
!et

===== Damped wave equation =====
label{scale:wave:pde2:damped}

A linear damping term $b\,\partial u/\partial t$ is often added to
the wave equation to model energy dissipation and amplitude reduction.
Our PDE now reads

!bt
\begin{equation}
\frac{\partial^2 u}{\partial t^2}
+ b\frac{\partial u}{\partial t} =
\frac{\partial}{\partial x}\left(
\lambda(x) {\partial u\over\partial x}\right) + f(x,t)\tp
\end{equation}
!et
The scaled equation becomes

!bt
\[
\frac{\partial^2 \bar u}{\partial \bar t^2}
+ \frac{t_c} b\frac{\partial \bar u}{\partial \bar t} =
\frac{t_c^2\lambda_c}{L^2}\frac{\partial}{\partial \bar x}\left(
\bar \lambda(\bar x) {\partial \bar u\over\partial \bar x}\right) +
\frac{t_c^2f_c}{u_c}\bar f(\bar x,\bar t)\tp
\]
!et

The damping term is usually much smaller than the two other terms involving
$\bar u$. The time scale is therefore chosen as in the undamped case,
$t_c=L/\sqrt{\lambda_c}$. As in Section ref{scale:wave:pde2:cvar},
we have two choices of $u_c$: $u_c=\max_x|I|$ or $u_c=t_c^2f_c$.
The former choice of $u_c$ gives a PDE with two dimensionless numbers,

!bt
\begin{equation}
\frac{\partial^2 \bar u}{\partial \bar t^2}
+ \gamma\frac{\partial \bar u}{\partial \bar t} =
\frac{\partial}{\partial \bar x}\left(
\bar \lambda(\bar x) {\partial\bar u\over\partial\bar x}\right) +
\beta\bar f(\bar x,\bar t),
\end{equation}
!et
where

!bt
\[ \gamma = \frac{bL}{\sqrt{\lambda_c}}, \]
!et
measures the size of the damping, and $\beta$ is as given
in Section ref{scale:wave:pde2:cvar}.
With $u_c=t_c^2f_c$ we get a PDE where only $\gamma$ enters,

!bt
\begin{equation}
\frac{\partial^2 \bar u}{\partial \bar t^2}
+ \gamma\frac{\partial \bar u}{\partial \bar t} =
\frac{\partial}{\partial \bar x}\left(
\bar \lambda(\bar x) {\partial\bar u\over\partial\bar x}\right) +
\bar f(\bar x,\bar t)\tp
\end{equation}
!et
The scaled initial conditions are as in
Section ref{scale:wave:pde2:cvar}, so in this latter case
$\beta$ appears in the initial condition for $u$.

To summarize, the effects of $V$, $f$, and damping are reflected in
the dimensionless numbers $\alpha$, $\beta$, and $\gamma$,
respectively.

===== A three-dimensional wave equation problem =====

To demonstrate how the scaling extends to and looks like in
three spatial dimensions, we consider

!bt
\begin{equation}
\frac{\partial^2 \bar u}{\partial \bar t^2} =
\frac{\partial}{\partial x}\left(\lambda\frac{\partial u}{\partial x}\right)+
\frac{\partial}{\partial y}\left(\lambda\frac{\partial u}{\partial y}\right)+
\frac{\partial}{\partial z}\left(\lambda\frac{\partial u}{\partial z}\right)\tp
\end{equation}
!et
We introduce

!bt
\[ \bar x = \frac{x}{x_c},\quad \bar y = \frac{y}{y_c},
   \quad \bar z = \frac{z}{z_c},
   \quad \bar t = \frac{t}{t_c}, \quad \bar u =\frac{u}{u_c}\tp\]
!et
With $\bar\lambda = \lambda(\bar xx_c, \bar y y_c, \bar z z_c)/\lambda_c$,
we get

!bt
\[
\frac{\partial^2 \bar u}{\partial \bar t^2} =
\frac{t_c^2\lambda_c}{x_c^2}\frac{\partial}{\partial \bar x}\left(\bar\lambda\frac{\partial \bar u}{\partial \bar x}\right)+
\frac{t_c^2\lambda_c}{y_c^2}\frac{\partial}{\partial \bar y}\left(\bar\lambda\frac{\partial \bar u}{\partial \bar y}\right)+
\frac{t_c^2\lambda_c}{z_c^2}\frac{\partial}{\partial \bar z}\left(\bar\lambda\frac{\partial \bar u}{\partial \bar z}\right)\tp
\]
!et
Often, we will set $x_c=y_c=z_c=L$ where $L$ is some characteristic
size of the domain.
As before, $t_c = L/\sqrt{\lambda_c}$, and these choices lead to a
dimensionless wave equation without physical parameters:

!bt
\begin{equation}
\frac{\partial^2 \bar u}{\partial \bar t^2} =
\frac{\partial}{\partial \bar x}\left(\bar\lambda\frac{\partial \bar u}{\partial \bar x}\right)+
\frac{\partial}{\partial \bar y}\left(\bar\lambda\frac{\partial \bar u}{\partial \bar y}\right)+
\frac{\partial}{\partial \bar z}\left(\bar\lambda\frac{\partial \bar u}{\partial \bar z}\right)\tp
\end{equation}
!et
The initial conditions remain the same as in the previous one-dimensional
examples.

!split
======= The diffusion equation =======
label{sec:scale:diffu}

The diffusion equation in a one-dimensional homogeneous medium reads

!bt
\begin{equation}
\frac{\partial u}{\partial t} =
\dfc\frac{\partial^2 u}{\partial x^2}, \quad  x\in (0,L),\ t\in (0,T],
label{sec:scale:diffu:pde1}
\end{equation}
!et
where $\dfc$ is the diffusion coefficient. The
multi-dimensional generalization to a heterogeneous medium
and a source term takes the form

!bt
\begin{equation}
\frac{\partial u}{\partial t} =
\nabla\cdot\left(\dfc \nabla u\right) + f, \quad  x,y,z\in \Omega,\ t\in (0,T]\tp
label{sec:scale:diffu:pde1:3D}
\end{equation}
!et
We first look at scaling the PDE itself, and thereafter we discuss
some types of boundary conditions and how to scale the complete
initial-boundary value problem.


===== Homogeneous 1D diffusion equation =====
label{sec:scale:diffu:homo1D}

To make (ref{sec:scale:diffu:pde1}) dimensionless,
we introduce as usual dimensionless dependent and independent variables:

!bt
\[ \bar x = \frac{x}{x_c},
\quad \bar t = \frac{t}{t_c}, \quad \bar u =\frac{u}{u_c}\tp\]
!et
Inserting the dimensionless quantities in the one-dimensional
PDE (ref{sec:scale:diffu:pde1}) results in

!bt
\[
\frac{\partial \bar u}{\partial \bar t} =
\frac{t_c\dfc}{L^2}
\frac{\partial^2 \bar u}{\partial \bar x^2}, \quad  \bar x\in (0,1),\ \bar t\in (0,\bar T = T/t_c]\tp
label{sec:scale:diffu:pde1:d0}
\]
!et
Arguing as for the wave equation that the scaling should result in

!bt
\[ \frac{\partial \bar u}{\partial \bar t}\hbox{ and }
\frac{\partial^2 \bar u}{\partial \bar x^2}\]
!et
of the same size (about unity),
implies $t_c\dfc/L^2=1$ and therefore $t_c = L^2/\dfc$.

Insight through an analytical solution can alternatively
help with choosing $t_c$.
One can show that $u=Ae^{-pt}\sin (kx)$ is a solution of
(ref{sec:scale:diffu:pde1}) if $p=\dfc k^2$, for any $k$.
This is the typical solution arising from separation of variables
and reflects the dynamics of the space and time in the PDE.
Exponential decay in
time is a characteristic feature of diffusion processes, and
the e-folding time can then be taken as a time scale. This means
$t_c = 1/p \sim k^{-2}$. Since $k$ is related to the spatial
wave length $\lambda$
through $k=2\pi/\lambda$, it means that $t_c$ depends strongly on the wave
length of the sine term $\sin(kx)$.
In particular, short waves (as found in noisy signals) with
large $k$ decay very rapidly.
For the overall solution we are interested in how the longest meaningful
wave decays and use that time scale for $t_c$. The longest wave
typically has half a wave length over the domain $[0,L]$:
$u = Ae^{-pt}\sin(\pi x/L)$ ($k=\pi/L$), provided $u(0,t)=u(L,t)=0$
(with $u_x(L,t)=0$, the longest wave is $L/4$, but we look at the
case with the wave length $L/2$). Then $t_c=L^2/\dfc \pi^{-2}$,
but the factor $\pi^{-2}$ is not important and we simply choose
$t_c=L^2/\dfc$, which equals the time scale we arrived at above.
We may say that $t_c$ is the time it takes for the diffusion to
significantly change the solution in the entire domain.

Another fundamental solution of the diffusion equation is the
diffusion of a Gaussian function: $u(x,t)=K(4\pi\dfc
t)^{-1/2}\exp{(-x^2/(4\dfc t))}$, for some constant $K$ with
the same dimension as $u$. For the diffusion to be significant
at a distance $x=L$, we may demand the exponential factor to have a
value of $e^{-1}\approx 0.37$, which implies $t=L^2/(4\dfc)$, but the
factor 4 is not of importance, so again, a relevant time scale is
$t_c=L^2/\dfc$.

The scale $u_c$ is chosen according to the initial condition:
$u_c=\max_{x\in(0,L)}|I(x)|$. For a diffusion equation $u_t=\dfc u_{xx}$
with $u=0$ at the boundaries $x=0,L$, the solution is bounded by
the initial condition $I(x)$. Therefore, the listed choice of $u_c$
implies that
$|u|\leq 1$. (The solution $u=Ae^{-pt}\sin (kx)$ is such an example
if $k=n\pi/L$ for integer $n$ such that $u=0$ for $x=0$ and $x=L$.)

The resulting dimensionless PDE becomes

!bt
\begin{equation}
\frac{\partial \bar u}{\partial \bar t} =
\frac{\partial^2 \bar u}{\partial \bar x^2}, \quad  \bar x\in (0,1),\ \bar t\in (0,\bar T],
label{sec:scale:diffu:pde1:d}
\end{equation}
!et
with initial condition

!bt
\[ \bar u(\bar x, 0) = \bar I(\bar x) = \frac{I(x_c\bar x)}{\max_x |I(x)|}\tp\]
!et
Notice that (ref{sec:scale:diffu:pde1:d}) is without physical parameters,
but there may be parameters in $I(x)$.

===== Generalized diffusion PDE =====

Turning the attention to (ref{sec:scale:diffu:pde1:3D}), we introduce
the dimensionless diffusion coefficient

!bt
\[ \bar\dfc(\bar x,\bar y,\bar z) =
\dfc_c^{-1}\dfc (x_c\bar x, y_c\bar y, z_c\bar z),\]
!et
typically with

!bt
\[ \dfc_c = \max_{x,y,z}\dfc(x,y,z)\tp\]
!et
The length scales are

!bt
\[ \bar x = \frac{x}{x_c},\quad \bar y = \frac{y}{y_c},\quad
\bar z = \frac{z}{z_c}\tp
\]
!et
We scale $f$ in a similar fashion:

!bt
\[ \bar f(\bar x, \bar y, \bar z, \bar t)
= f_c^{-1}f(\bar xx_c, \bar yy_c \bar zz_c, \bar tt_c),\]
!et
with

!bt
\[ f_c = \max_{x,y,z,t}|f(x,y,z,t)|\tp\]
!et
Also assuming
that $x_c=y_c=z_c=L$, and $u_c=\max_{x,y,z}(I(x,y,z)$,
we end up with the scaled PDE

!bt
\begin{equation}
\frac{\partial \bar u}{\partial \bar t} =
\nabla\cdot\left(\bar\dfc \bar\nabla \bar u\right) + \beta\bar f, \quad  \bar x,\bar y,\bar z\in \bar \Omega,\ \bar t\in (0,\bar T]\tp
label{sec:scale:diffu:pde1:3D:d}
\end{equation}
!et
Here, $\bar\nabla$ means differentiation with respect to dimensionless
coordinates $\bar x$, $\bar y$, and $\bar z$. The dimensionless parameter
$\beta$ takes the form

!bt
\[ \beta = \frac{t_cf_c}{u_c} = \frac{L^2}{\dfc}
\frac{\max_{x,y,z,t}|f(x,y,z,t)|}{\max_{x,y,z}|I(x,y,z)|}\tp\]
!et
The scaled initial condition is $\bar u = \bar I$ as in the 1D case.

An alternative choice of $u_c$ is to make the coefficient $t_cf_c/u_c$
in the source term unity. The scaled PDE now becomes

!bt
\begin{equation}
\frac{\partial \bar u}{\partial \bar t} =
\nabla\cdot\left(\bar\dfc \bar\nabla \bar u\right) + f,
label{sec:scale:diffu:pde1:3D:d2}
\end{equation}
!et
but the initial condition features the $\beta$ parameter:

!bt
\[ \bar u(\bar x, \bar y, \bar z, 0) = \frac{I}{t_cf_c} =
\beta^{-1}\bar I(\bar x,\bar y,\bar z)\tp
\]
!et

The $\beta$ parameter can be interpreted as the ratio of the source
term and the terms with $u$:

!bt
\[ \beta = \frac{f_c}{u_c/t_c}\sim \frac{|f|}{|u_t|},\quad
\beta = \frac{f_c}{u_c/t_c} = \frac{f_c}{L^2/t_c u_c/L^2}\sim
\frac{|f_c|}{|\dfc\nabla^2 u|}\tp
\]
!et

We may check that $\beta$ is really non-dimensional. From the PDE,
$f$ must have the same dimensions as $\partial u/\partial t$, i.e.,
$[\Theta\hbox{T}^{-1}]$.
The dimension of $\dfc$ is more intricate, but from the term
$\dfc u_{xx}$ we know that $u_{xx}$ has dimensions $[\Theta\hbox{L}^{-2}]$,
and then $\dfc$ must have dimension $[\hbox{L}^2\hbox{T}^{-1}]$
to match the target $[\Theta\hbox{T}^{-1}]$.
In the expression for $\beta$ we get
$[\hbox{L}^2\Theta\hbox{T}^{-1}(\hbox{L}^2\hbox{T}^{-1}\Theta)^{-1}]$,
which equals 1 as it should.


===== Jump boundary condition =====

A classical one-dimensional heat conduction problem goes as
follows. An insulated rod at some constant temperature $U_0$ is
suddenly heated from one end ($x=0$), modeled as a constant Dirichlet
condition $u(0,t)=U_1\neq U_0$ at that end. That is, the boundary
temperature jumps from $U_0$ to $U_1$ at $t=0$. All the other surfaces
of the rod are insulated such that a one-dimensional model is
appropriate, but we must explicitly demand $u_x(L,t)=0$ to incorporate
the insulation condition in the one-dimensional model at the end
of the domain $x=L$.  Heat cannot
escape, and since we supply heat at $x=0$, all of the material will
eventually be warmed up to the temperature $U_1$: $u\rightarrow U_1$
as $t\rightarrow\infty$.

The initial-boundary value problem reads

!bt
\begin{align}
\frac{\partial u}{\partial t} &=
\dfc \frac{\partial^2 u}{\partial x^2},
\quad &  x\in (0,L),\ t\in (0, T],
label{scale:heat:pde3}\\
u(x,0) &= U_0,
\quad & x\in [0,L],
label{scale:heat:pde3:ic:u}\\
u(0, t) & = U_1,
\quad  & t\in (0, T],
label{scale:heat:pde3:bc:0}\\
\frac{\partial}{\partial x} u(L, t) & = 0,
\quad & t\in (0, T].
label{scale:heat:pde3:bc:L}
\end{align}
!et
The diffusion coefficient is related to heat transfer parameters
by $\dfc = k/(\varrho c)$, where $k$ is the heat conduction coefficient,
$\varrho$ is the density, and $c$ is a specific heat capacity parameter.
[Geir: does this paragraph naturally belong here ?]

The natural dimensionless temperature for this problem is

!bt
\[ \bar u = \frac{u - U_0}{U_1 - U_0},\]
!et
since this choice makes $\bar u\in [0,1]$. The reason is that $u$ is bounded by
the initial and boundary conditions (in the absence of a source term in
the PDE),
and we have
$\bar u(\bar x,0)=0$, $\bar u(\bar x,\infty)=1$, and $
\bar u(0,\bar t)=1$.

The choice of $t_c$ is as in the previous cases. We arrive at
the dimensionless initial-boundary value problem

!bt
\begin{align}
\frac{\partial \bar u}{\partial \bar t} &=
\frac{\partial^2 \bar u}{\partial \bar x^2},
\quad &  \bar x\in (0,1),\ \bar t\in (0, \bar T],
label{scale:heat:pde3:d}\\
\bar u(\bar x,0) &= 0,
\quad & \bar x\in [0,1],
label{scale:heat:pde3:ic:u:d}\\
\bar u(0, \bar t) & = 1,
\quad  & \bar t\in (0, \bar T],
label{scale:heat:pde3:bc:0:d}\\
\frac{\partial}{\partial \bar x} u(1, \bar t) & = 0,
\quad & \bar t\in (0, \bar T].
label{scale:heat:pde3:bc:L:d}
\end{align}
!et
The striking feature is that there are no physical parameters left in
this problem. One simulation can be carried out for $\bar u(\bar x,\bar t)$,
and the temperature in a rod of any material and any constant initial and
boundary temperature can be retrieved by

!bt
\[ u(x,t) = U_0 + (U_1-U_0)\bar u(x/L, t\dfc/L^2)\tp\]
!et

[hpl: Include simulation results.]

===== Oscillating Dirichlet condition =====

[hpl: Do we need paragraph headings here?]
[Geir: yes]

Now we address a heat equation problem where the temperature is
oscillating on the boundary $x=0$:

!bt
\begin{align}
\frac{\partial u}{\partial t} &=
\dfc \frac{\partial^2 u}{\partial x^2},
\quad &  x\in (0,L),\ t\in (0, T],
label{scale:heat:pde2}\\
u(x,0) &= U_0,
\quad & x\in [0,L],
label{scale:heat:pde2:ic:u}\\
u(0, t) & = U_0 + A\sin(\omega t),
\quad  & t\in (0, T],
label{scale:heat:pde2:bc:0}\\
\frac{\partial}{\partial x} u(L, t) & = 0,
\quad & t\in (0, T].
label{scale:heat:pde2:bc:L}
\end{align}
!et
One important physical application is temperature oscillations in the
ground, either day and night variations
at a short temporal and spatial scale, or seasonal variations in the
Earth's crust.
An important modeling assumption is (ref{scale:heat:pde2:bc:L}),
which means that the boundary $x=L$ is placed sufficiently far from $x=0$
such that the solution is much damped and basically constant so
$u_x=0$ is a reasonable condition.

=== Scaling ===

Since the boundary temperature is oscillating around the initial
condition, we expect $u\in [U_0-A,U_0+A]$.
The dimensionless temperature is therefore taken as

!bt
\[ \bar u = \frac{u-U_0}{2A},\]
!et
such that $\bar u\in [-1,1]$.

What is an appropriate time scale? There will be two time scales involved,
the oscillations $\sin(\omega t)$ with period $P=2\pi/\omega$ at
the boundary and the ``speed of diffusion'', or more specifically
the ``speed of heat conduction'' in the present context,
where $t_c=x_c^2/\dfc$ is the appropriate scale, $x_c$ being
the length scale.

As usual, investigating the exact solution of the model problem can
illuminate the involved scales. For this particular initial-boundary
value problem the exact solution as $t\rightarrow\infty$
(such that
the initial condition $u(x,0)=U_0$ is forgotten)
and $L\rightarrow\infty$ (such that (ref{scale:heat:pde2:bc:L})
is certainly valid) can be shown to be

!bt
\begin{equation}
u(x,t) = U_0 - Ae^{-bx}\sin (bx - \omega t),\quad b =\sqrt{\frac{\omega}{2\dfc}}\tp
label{scale:heat:daynight:sol}
\end{equation}
!et
This solution is of the form $e^{-bx}g(x-ct)$, i.e., a damped wave that
moves to the right with velocity $c$ and a damped amplitude $e^{-bx}$.
This is perhaps more easily seen if we make a rewrite

!bt
\[ u(x,t) = U_0 - Ae^{-bx}\sin\left(b(x - ct)\right),\quad
c=\omega/b = \sqrt{2\dfc\omega},\  b =\sqrt{\frac{\omega}{2\dfc}}\tp\]
!et

The boundary oscillations lead to the time scale $t_c=1/\omega$.
The speed of the wave suggests another time scale: the time it
takes to propagate through the domain, which is $L/c$, and
hence $t_c = L/c = L/\sqrt{2\dfc\omega}$.

One can argue that $L$ is not the appropriate length scale, because
$u$ is damped by $e^{-bx}$ so for $x > 4/b$, $u$ is close to zero.
We may instead use $1/b$ as length scale, which is the e-folding distance of the
damping factor, and base
$t_c$ on the time it takes a signal to propagate one length scale,
$t_c^{-1}=bc=\omega$. Similarly, the time scale based on
the ``speed of diffusion'' changes to
$t_c^{-1}= b^2\dfc = \half\omega$ if we employ $1/b$ as length scale.

To summarize, we have three candidates for the time scale:
$t_c=L^2/\dfc$ (diffusion through the entire domain), $t_c=2/\omega$
(diffusion through a distance $1/b$ where $u$ is significantly
different from zero), and $t_c=1/\omega$ (wave movement over a
distance $1/b$).

Let us look at the dimensionless exact solution to see if it can help
with the choice of scales.  We introduce the dimensionless parameters

!bt
\[ \beta = bx_c = x_c\sqrt{\frac{\omega}{2\dfc}},\quad
\gamma = \omega t_c\tp\]
!et
The scaled solution becomes

!bt
\[ \bar u(\bar x, \bar t; \beta,\gamma) = e^{-\beta\bar x}\sin(\beta\bar x - \gamma\bar t)\tp\]
!et
The three choices of $\gamma$, implied by the three choices of $t_c$, are

!bt
\begin{equation}
\gamma = \left\lbrace\begin{array}{ll}
1, & t_c=1/\omega,\\
2, & t_c = 2/\omega,\\
2\beta^2, & t_c = L^2/\dfc,\ x_c=L
\end{array}\right.
label{scale:heat:daynight:gamma3}
\end{equation}
!et
The former two choices leaves only $\beta$ as parameter in $\bar u$,
and with $x_c=1/b$ as length scale, $\beta$ becomes unity, and there
are no parameters in the dimensionless solution:

!bt
\begin{equation}
\bar u(\bar x, \bar t) = e^{-\bar x}\sin(\bar x - \bar t)\tp
label{scale:heat:daynight:xcb}
\end{equation}
!et
Therefore, $x_c=1/b$ and $t_c=1/\omega$ (or $t_c=2/\omega$, but the
factor 2 is of no importance) are the most appropriate scales.

To further argue why (ref{scale:heat:daynight:xcb}) demonstrates
that these scales are
preferred, think of
$\omega$ as large. Then the wave is damped over a short
distance and there will be a thin boundary layer of temperature
oscillations near $x=0$ and little changes in $u$ in the rest of
the domain. The scaling (ref{scale:heat:daynight:xcb}) resolves
this problem by using $1/b \sim \omega^{-1/2}$ as length scale,
because then the boundary layer thickness is independent of
$\omega$. The length of the domain can be chosen as, e.g., $4/b$
such that $\bar u\approx 0$ at the end $x=L$. The length scale $1/b$
helps us to zoom in on the part of $u$ where significant changes
take place.

In the other limit, $\omega$ small, $b$ becomes small, and the wave is
hardly damped in the domain $[0,L]$ unless $L$ is large enough.  The
imposed boundary condition on $x=L$ in fact requires $u$ to be
approximately constant so its derivative vanishes, and this property
can only be obtained if $L$ is large enough to ensure that the wave
becomes significantly damped.  Therefore, the length scale is dictated
by $b$, not $L$, and $L$ should be adapted to $b$, typically $L\geq
4/b$.

The resulting scaled problem becomes

!bt
\begin{align}
\frac{\partial \bar u}{\partial \bar t} &=
\frac{1}{2}\frac{\partial^2 u}{\partial x^2},
\quad & \bar x\in (0,4/b),\ \bar t\in (0,\bar T],
label{scale:heat:pde2:d}\\
\bar u(\bar x,0) &= 0,
\quad &\bar x\in [0,1]
label{scale:heat:pde2:ic:u:d}\\
\bar u(0,\bar t) & = \sin(\bar t),
\quad  &\bar t\in (0,\bar T],
label{scale:heat:pde2:bc:0:d}\\
\frac{\partial}{\partial\bar x}\bar u(1,\bar t) & = 0,
\quad &\bar t\in (0,\bar T].
label{scale:heat:pde2:bc:L:d}
\end{align}
!et
The coefficient in front of the second-derivative is $\half$ because

!bt
\[ \frac{t_c\dfc}{1/b^2} = \frac{b^2\dfc}{\omega}
= \frac{1}{2}\tp\]
!et
We may, of course, choose $t_c=2/\omega$ and get rid of the $\half$ factor,
if desired, but then it turns up in (ref{scale:heat:pde2:bc:0:d}) instead,
as $\sin (2\bar t)$.

# #ifdef OLD
## Already covered!
===== Diffusion equation with source term =====
label{sec:scale:diffu:source}

Let us add a source term $f(x,t)$ to the diffusion equation,

!bt
\begin{equation}
\frac{\partial u}{\partial t} =
\dfc\frac{\partial^2 u}{\partial x^2} + f(x,t), \quad  x\in (0,L),\ t\in (0,T]
\tp
label{sec:scale:diffu:pde1f}
\end{equation}
!et
As always, we introduce

!bt
\[ \bar x = \frac{x}{x_c},\quad
\ \bar t = \frac{t}{t_c}, \quad\bar u =\frac{u}{u_c},\]
!et
and a scaling of $f$,

!bt
\[ \bar f(\bar x,\bar t) = \frac{f(x,t)}{f_c},\quad f_c=\max_{x,t}f(x,t)\tp\]
!et
Inserting the dimensionless quantities in (ref{sec:scale:diffu:pde1f})
and making each term dimensionless results in

!bt
\begin{equation}
\frac{\partial \bar u}{\partial \bar t} =
\frac{t_c\dfc}{x_c^2}
\frac{\partial^2 u}{\partial x^2} + \frac{t_cf_c}{u_c}
\bar f(\bar x,\bar t), \quad  \bar x\in (0,L/x_c),\ \bar t\in (0,T/t_c]
\tp
label{sec:scale:diffu:pde1f:nondim0}
\end{equation}
!et

The magnitude of $u$ is governed by $f$ as well as by
initial and boundary conditions. Suppose initial and boundary conditions
are zero.
The length scale $x_c$ is naturally chosen as $L$ such that $\bar x\in[0,1]$.
It is also natural to choose $t_c$ to be the time scale
of diffusion, as before, $t_c=x_c^2/\dfc = L^2/\dfc$. The source term can match
the unit size of the two other terms by choosing its coefficient to be
unity, i.e.,

!bt
\[ u_c=t_cf_c=\frac{L^2 \max_{x,t} f}{\dfc}\tp\]
!et
The scaled equation then becomes free of physical parameters:

!bt
\begin{equation}
\frac{\partial \bar u}{\partial \bar t} =
\frac{\partial^2 u}{\partial x^2} +
\bar f(\bar x,\bar t), \quad  \bar x\in (0,L/x_c),\ \bar t\in (0,T/t_c]
\tp
label{sec:scale:diffu:pde1f:nondim}
\end{equation}
!et

With an initial condition $u=I$, we get a scaled initial condition

!bt
\[ \bar u(\bar x, 0) = \beta \bar I(L\bar x),\]
!et
where $\bar I = I/\max_x I(x)$ is a scaled version of $I$, and $\beta$
is a dimensionless number

!bt
\[ \beta = \frac{\max_xI(x)}{\max_{x,t}f(x,t)}\frac{\dfc}{L^2}\tp\]
!et
It measures the ratios of $I$ and $f$ per unit
characteristic time.

Suppose now that we choose $u_c=\max_x I(x)$ because $f$ is small compared
to $I$. The initial condition then reads $\bar u(\bar x,0)=\bar I(\bar x)$,
and the differential equation becomes

!bt
\[
\frac{\partial \bar u}{\partial \bar t} =
\frac{\partial^2 u}{\partial x^2} +
\beta^{-1} \bar f(\bar x,\bar t)
\tp
\]
!et
This is the relevant scaling for a small $f$ and large $\beta$,
indicating that $\beta^{-1} \bar f$ can be neglected from the
PDE. A major influence of $f$ leads to a balance between all
three terms in the PDE, but the initial condition has a small
$\beta$, and one can set $\bar u(\bar x, 0)\approx 0$.
Exercise ref{scale:vib:exer:Couette_wpressure} explores a similar
stationary problem.
# #endif


======= Reaction-diffusion equations =======
label{sec:scale:diffu:Fisher}

===== Fisher's equation =====

Fisher's equation is essentially the logistic equation at each point
for population dynamics (see Section ref{sec:scale:decay:nonlinear})
combined with spatial movement through ordinary diffusion:

!bt
\begin{equation}
\frac{\partial u}{\partial t} =
\dfc\frac{\partial^2 u}{\partial x^2} + \varrho u(1-u/M)
\tp
label{sec:scale:diffu:Fisher:pde}
\end{equation}
!et
This PDE is also known as the KPP equation after
Kolmogorov, Petrovsky, and Piskynov (who introduced the equation
independently of Fisher).

Setting

!bt
\[ \bar x = \frac{x}{x_c},\quad
\ \bar t = \frac{t}{t_c}, \quad\bar u =\frac{u}{u_c},\]
!et
results in

!bt
\[
\frac{\partial \bar u}{\partial \bar t} =
\frac{t_c\dfc}{x_c^2}
\frac{\partial^2 u}{\partial x^2} + t_c \varrho \bar u (1 - u_c\bar u/M)\tp
\]
!et

=== Balance of all terms ===

If all terms are equally important, the scales can be determined from
demanding the coefficients to be unity.
Reasoning as for the logistic ODE in Section ref{sec:scale:decay:nonlinear},
we may choose $t_c=1/\varrho$. Then
the coefficient in the diffusion term dictates the length scale $x_c =
\sqrt{t_c\dfc}$.
A natural scale for $u$ is $M$, since $M$ is the upper limit of $u$ in
the model (cf. the logistic term). Summarizing,

!bt
\[ u_c=M,\quad t_c = \frac{1}{\varrho},\quad x_c = \sqrt{\frac{\dfc}{\varrho}},
\]
!et
and the scaled PDE becomes

!bt
\begin{equation}
\frac{\partial \bar u}{\partial \bar t} =
\frac{\partial^2 \bar u}{\partial x^2} + \bar u (1 - \bar u)\tp
\end{equation}
!et
With this scaling, the length scale $x_c=\sqrt{\dfc/\varrho}$
is not related to the domain size, so the scale is particularly relevant for
infinite domains.

An open question is whether the time scale should be based on
the diffusion process rather than the initial exponential growth
in the logistic term. The diffusion time scale means $t_c = x_c^2/\dfc$,
but demanding the logistic term then to have a unit coefficient
forces $x_c^2\varrho /\dfc = 1$, which implies $x_c=\sqrt{\dfc/\varrho}$
and $t_c=1/\varrho$. That is, equal balance of the three
terms gives a unique choice of the time and length scale.

=== Fixed length scale ===

Assume now that we fix the length scale to be $L$, either the
domain size or some other naturally given length. With
$x_c=L$, $t_c=\varrho^{-1}$,
$u_c=M$, we get

!bt
\begin{equation}
\frac{\partial \bar u}{\partial \bar t} =
\beta
\frac{\partial^2 \bar u}{\partial x^2} + \bar u (1 - \bar u),
\end{equation}
!et
where $\beta$ is a dimensionless number

!bt
\[ \beta = \frac{\dfc}{\varrho L^2} = \frac{\varrho^{-1}}{L^2/\dfc}\tp\]
!et
The last equality demonstrates
that $\beta$ measures the ratio of the time scale
for exponential growth in the beginning of the logistic process
and the time scale of diffusion $L^2/\dfc$ (i.e., the time it takes
to transport a signal by diffusion through the domain).
For small $\beta$ we can neglect the diffusion and spatial movements,
and the PDE is essentially a logistic ODE at each point, while for
large $\beta$, diffusion dominates, and $t_c$ should in that case be
based on the diffusion time scale $L^2/\dfc$. This leads to the
scaled PDE

!bt
\begin{equation}
\frac{\partial \bar u}{\partial \bar t} =
\frac{\partial^2 \bar u}{\partial x^2} + \beta^{-1}\bar u (1 - \bar u),
\end{equation}
!et
showing that a large $\beta$ encourages omission of the logistic term,
because the point-wise growth takes place over long time intervals while
diffusion is rapid. The effect of diffusion is then more prominent
and it suffices to solve $\bar u_{\bar t} = \bar u_{\bar x\bar x}$.
The observant reader will in this latter case notice that $u_c=M$
is an irrelevant scale for $u$, since logistic growth with its limit is
not of importance, so we implicitly assume that another scale $u_c$
has been used, but that scale cancels anyway in the simplified PDE
$\bar u_{\bar t} = \bar u_{\bar x\bar x}$.


===== Nonlinear reaction-diffusion PDE =====

A general, nonlinear reaction-diffusion equation in 1D looks like

!bt
\begin{equation}
\frac{\partial u}{\partial t} = \dfc\frac{\partial^2 u}{\partial x^2} + f(u)
\tp
\end{equation}
!et
By scaling the nonlinear reaction term $f(u)$ as $f_c\bar f(u_c\bar u)$,
where $f_c$ is a characteristic size of $f(u)$, typically the maximum
value, one gets a non-dimensional PDE like

!bt
\[
\frac{\partial\bar u}{\partial\bar t} = \frac{t_c\dfc}{x_c^2}
\frac{\partial^2\bar u}{\partial\bar x^2} +
\frac{t_cf_c}{u_c}\bar f(u_c\bar u)\tp
\]
!et
The characteristic size of $u$ can often be derived so we first assume
that $u_c$ is given. This fact uniquely determines the space and time
scales by demanding that all three terms are equally important and
of unit size:

!bt
\[ t_c = \frac{u_c}{f_c},\quad x_c = \sqrt{\frac{\dfc u_c}{f_c}}\tp\]
!et
The corresponding PDE reads

!bt
\begin{equation}
\frac{\partial\bar u}{\partial\bar t} =
\frac{\partial^2\bar u}{\partial\bar x^2} + \bar f(u_c\bar u)\tp
\end{equation}
!et

If $x_c$ is based on some known length scale $L$, balance of all three
terms can be used to determine $u_c$ and $t_c$:

!bt
\[ t_c = \frac{L^2}{\dfc},\quad u_c = \frac{L^2 f_c}{\dfc}\tp\]
!et
This scaling only works if $f$ is nonlinear, otherwise $u_c$ cancels
and there is no freedom to constrain this scale.

With given $L$ and $u_c$, there are two choices of $t_c$ since it can
be based on the diffusion or the reaction time scales. With
the reaction scale, $t_c = u_c/f_c$, one arrives a the PDE

!bt
\begin{equation}
\frac{\partial\bar u}{\partial\bar t} =
\beta\frac{\partial^2\bar u}{\partial\bar x^2} + \bar f(u_c\bar u),
\end{equation}
!et
where

!bt
\[ \beta = \frac{\dfc u_c}{L^2 f_c} = \frac{u_c/f_c}{L^2/\dfc}\]
!et
is a dimensionless number reflecting the ratio of the reaction time
scale and the diffusion time scale. On the contrary,
with the
diffusion time scale, $t_c=L^2/\dfc$, the scaled PDE becomes

!bt
\begin{equation}
\frac{\partial\bar u}{\partial\bar t} =
\frac{\partial^2\bar u}{\partial \bar x^2} + \beta^{-1}\bar f(u_c\bar u)\tp
\end{equation}
!et
The size of $\beta$ in an application will determine which of the scalings
that is most appropriate.


!split
======= The convection-diffusion equation =======
label{scale:convdiff}

===== Convection-diffusion without a force term =====

idx{Peclet number}

We now add a convection term $\bm{v}\cdot\nabla u$ to the diffusion
equation to obtain the well-known convection-diffusion equation:

!bt
\begin{equation}
\frac{\partial u}{\partial t} + \v\cdot\nabla u =
\dfc\nabla^2 u,
\quad  x,y, z\in \Omega,\ t\in (0, T]\tp
label{scale:convdiff:pde1}
\end{equation}
!et
The velocity field $\v$ is prescribed, and its characteristic size $V$
is normally clear from the problem description. In the sketch below,
we have some given flow over a bump, and $u$ may be the concentration
of some substance in the fluid. Here, $V$ is typically $\max_y v(y)$.
The characteristic length $L$ could be the entire domain, $L=c+\ell$,
or the height of the bump, $L=D$. (The latter is the important length
scale for the flow.)

<linebreak>
<linebreak>

FIGURE: [fig-scaling/flow_over_gaussian, width=500 frac=0.9]

<linebreak>
<linebreak>

Inserting

!bt
\[ \bar x = \frac{x}{x_c},\ \bar y = \frac{y}{y_c},\ \bar z = \frac{z}{z_c},
\ \bar t = \frac{t}{t_c}, \ \bar\v = \frac{\v}{V},
\ \bar u =\frac{u}{u_c}\]
!et
in (ref{scale:convdiff:pde1}) yields

!bt
\[
\frac{u_c}{t_c}
\frac{\partial \bar u}{\partial \bar t} +
\frac{u_c V}{L}\bar\v\cdot\bar\nabla\bar u =
\frac{\dfc u_c}{L^2}\bar\nabla^2\bar u,
\quad \bar x,\bar y,\bar z\in \Omega,\ \bar t\in (0,\bar T]\tp
\]
!et
For $u_c$ we simply introduce the symbol $U$, which we may estimate
from an initial condition. It is not critical here since it vanishes
from the scaled equation anyway as long as there is no source term
present.
With some velocity measure $V$ and length measure $L$, it is
tempting to just let $t_c = L/V$. This is the characteristic time it takes to
transport a signal by convection through the domain.
The alternative is to use the
diffusion length scale $t_c=L^2/\dfc$. Very often in these kind of
problems, the convection term $\v\cdot\nabla u$ dominates over the
diffusion term $\dfc\nabla^2 u$, so the time scale for convection,
which is $L/V$,
is most appropriate of the two. Only when
the diffusion term is very much larger than the convection
term (corresponding to very small Peclet numbers, see below)
we would apply $t_c=L^2/\dfc$.

The non-dimensional form of the PDE with $t_c=L/V$ becomes

!bt
\begin{equation}
\frac{\partial \bar u}{\partial \bar t} +
\bar\v\cdot\bar\nabla\bar u =
\hbox{Pe}^{-1}\bar\nabla^2\bar u,
\quad \bar x,\bar y,\bar z\in \Omega,\ \bar t\in (0,\bar T],
label{scale:convdiff:pde1:d}
\end{equation}
!et
where Pe is the *Peclet number*,

!bt
\[ \hbox{Pe} = \frac{LV}{\dfc}\tp\]
!et
Estimating the size of the convection term $\v\cdot\nabla u$ as
$VU/L$ and the diffusion term $\dfc\nabla^2 u$ as $\dfc U/L^2$,
we see that the Peclet number measures the ratio of the convection
and the diffusion terms:

!bt
\[ \hbox{Pe} = \frac{\hbox{convection}}{\hbox{diffusion}} =
\frac{VU/L}{\dfc U/L^2}= \frac{LV}{\dfc}\tp
\]
!et

In case we use the diffusion time scale
$t_c=L^2/\dfc$, we get the non-dimensional PDE

!bt
\begin{equation}
\frac{\partial \bar u}{\partial \bar t} +
\hbox{Pe}\,\bar\v\cdot\bar\nabla\bar u =
\bar\nabla^2\bar u,
\quad \bar x,\bar y,\bar z\in \Omega,\ \bar t\in (0,\bar T]\tp
label{scale:convdiff:pde1:d2}
\end{equation}
!et

!bnotice Discussion of scales and balance of terms in the PDE
We see that (ref{scale:convdiff:pde1:d}) and (ref{scale:convdiff:pde1:d2})
are not equal, and they are based on two different time scales.
For moderate Peclet numbers around 1, all terms have the same size
in (ref{scale:convdiff:pde1:d}), i.e., a size around unity.
For large Peclet numbers,
(ref{scale:convdiff:pde1:d}) expresses a balance
between the time derivative term and the convection term, both of size
unity, and then there is a very small term
$\hbox{Pe}^{-1}\bar\nabla^2\bar u$ term because Pe is large and
$\bar\nabla^2\bar u$ should be of size unity.
That the convection term dominates over the diffusion term is
consistent with the time scale $t_c=L/V$ based on convection transport.
In this case, we can neglect the diffusion term as Pe goes to infinity
and work with a pure convection (or advection) equation

!bt
\[
\frac{\partial \bar u}{\partial \bar t} +
\bar\v\cdot\bar\nabla\bar u = 0\tp
\]
!et

For small Peclet numbers, $\hbox{Pe}^{-1}\bar\nabla^2\bar u$ becomes
very large and can only be balanced by two terms that are supposed to
be unity of size.  The time-derivative and/or the convection term must
be much larger than unity, but that means we use suboptimal scales,
since right scales imply that $\partial\bar u/\partial\bar t$ and
$\bar v\cdot\bar\nabla\bar u$ are of order unity. Switching to a time
scale based on diffusion as the dominating physical effect gives
(ref{scale:convdiff:pde1:d2}).  For very small Peclet numbers this
equation tells that the time-derivative balances the diffusion, while
the convection $\bar\v\cdot\bar\nabla\bar\u$ is around
unity, but multiplied by a very small coefficient Pe, so this term is
negligible in the PDE. An approximate PDE for small Peclet numbers is
therefore

!bt
\[
\frac{\partial \bar u}{\partial \bar t}
= \bar\nabla^2\bar u\tp
\]
!et

Scaling can with the above type of reasoning be used
to neglect terms from a differential equation under precise mathematical
conditions.
!enotice

===== Stationary PDE =====

Suppose the problem is stationary and that there is no need for
any time scale. How is this type of convection-diffusion problem
scaled? We get

!bt
\[
\frac{VU}{L}\bar\v\cdot\bar\nabla\bar u =
\frac{\dfc U}{L^2}\bar\nabla^2\bar u,
\]
!et
or

!bt
\begin{equation}
\bar\v\cdot\bar\nabla\bar u =
\hbox{Pe}^{-1}\bar\nabla^2\bar u\tp
label{scale:convdiff:pde1:d3}
\end{equation}
!et
This scaling only ``works'' for moderate Peclet numbers. For very small or
very large Pe, either the convection term $\bar\v\cdot\bar\nabla\bar u$
or the diffusion term $\bar\nabla^2\bar u$ must deviate significantly
from unity.

Consider the following 1D example to illustrate the point: $\v = v\ii$,
$v>0$ constant, a domain $[0,L]$, with boundary conditions $u(0)=0$ and
$u(L)=U_L$. (The vector $\ii$ is a unit vector in $x$ direction.)
The problem with dimensions is now

!bt
\[ vu^{\prime} = \dfc u^{\prime\prime},\quad u(0)=0,\ u(L)=U_L\tp\]
!et
Scaling results in

!bt
\[ \frac{d\bar u}{d\bar x} = \hbox{Pe}^{-1}\frac{d^2\bar u}{d\bar x^2},\quad
\bar x\in (0,1),\quad \bar u(0)=0,\ \bar u(1) = 1,\]
!et
if we choose $U=U_L$. The solution of the scaled problem is

!bt
\[ \bar u(\bar x) = \frac{1 - e^{\bar x\hbox{Pe}}}{1 - e^{\hbox{Pe}}}\tp\]
!et
Figure ref{scale:convdiff:fig:scaled} indicates how $\bar u$ depends on
Pe: small Pe values give approximately a straight line while large Pe
values lead to a *boundary layer* close to $x=1$, where the solution
changes very rapidly.

FIGURE: [fig-scaling/boundary_layer1D, width=600 frac=0.9] Solution of scaled problem for 1D convection-diffusion. label{scale:convdiff:fig:scaled}

We realize that for large Pe,

!bt
\[ \max_{\bar x}\frac{d\bar u}{d\bar x} \approx \hbox{Pe},\quad
\max_{\bar x}\frac{d^2\bar u}{d\bar x^2} \approx \hbox{Pe}^{2},\]
!et
which are consistent results with the PDE since the double derivative term
is multiplied by $\hbox{Pe}^{-1}$.
For small Pe,

!bt
\[ \max_{\bar x}\frac{d\bar u}{d\bar x}\approx 1,\quad
   \max_{\bar x}\frac{d^2\bar u}{d\bar x^2} \approx 0,\]
!et
which is also consistent with the PDE
since an almost vanishing second-order derivative
is multiplied by a very large coefficient $\hbox{Pe}^{-1}$.
However, we have a problem with very large
derivatives of $\bar u$ when Pe is large.

To arrive at a proper scaling for large Peclet numbers,
we need to remove the Pe coefficient
from the differential equation. There are only two scales at our
disposals: $u_c$ and $x_c$ for $u$ and $x$, respectively.
The natural value for $u_c$ is the boundary value $U_L$ at $x=L$.
The scaling of $Vu_x = \dfc u_{xx}$ then results in

!bt
\[ \frac{d\bar u}{d\bar x} = \frac{\dfc}{Vx_c}\frac{d^2\bar u}{d\bar x^2},
\quad \bar x\in (0,\bar L),\quad \bar u(0)=0,\ \bar u(\bar L)=1,\]
!et
where $\bar L = L/x_c$. Choosing the coefficient $\dfc/(Vx_c)$ to
be unity results in the scale $x_c=\dfc/V$, and $\bar L$ becomes Pe.
The final, scaled boundary-value
problem is now

!bt
\[ \frac{d\bar u}{d\bar x} = \frac{d^2\bar u}{d\bar x^2},
\quad \bar x \in (0, \hbox{Pe}), \quad \bar u(0)=0,\ \bar u(\hbox{Pe})=1,\]
!et
with solution

# #if FORMAT in ("latex", "pdflatex")
!bt
\[ \bar u(\bar x) = \frac{1 - e^{\bar x}}{1 - e^{\hbox{\footnotesize Pe}}}\tp\]
!et
# #else
!bt
\[ \bar u(\bar x) = \frac{1 - e^{\bar x}}{1 - e^{\small\mbox{Pe}}}\tp\]
!et
# #endif
Figure ref{scale:convdiff:fig:rescaled} displays $\bar u$ for some
Peclet numbers, and we see that the shape of the graphs are the same
with this scaling. For large Peclet numbers we realize that $\bar u$
and its derivatives are around unity
# #if FORMAT in ("latex", "pdflatex")
($1-e^{\hbox{Pe}}\approx -e^{\hbox{\footnotesize Pe}}$),
# #else
($1-e^{\hbox{Pe}}\approx -e^{\small\hbox{Pe}}$),
# #endif
but for small Peclet numbers $d\bar u/d\bar x \sim \hbox{Pe}^{-1}$.

FIGURE: [fig-scaling/boundary_layer1D_scale2, width=600 frac=0.9] Solution of scaled problem where the length scale depends on the Peclet number. label{scale:convdiff:fig:rescaled}

The conclusion is that for small Peclet numbers, $x_c=L$ is an
appropriate length scale.
The scaled equation $\hbox{Pe}\,\bar u' = \bar u''$ indicates that $\bar
u''\approx 0$, and the solution is close to a straight line.  For
large Pe values, $x_c=\dfc/V$ is an appropriate length scale, and the
scaled equation $\bar u' = \bar u''$
expresses that the terms $\bar u'$ and $\bar u''$ are
equal and of size around unity.


idx{dimensionless number}
idx{Reynolds number}

===== Convection-diffusion with a source term =====
label{scale:convdiff:f}

Let us add a force term $f(\x,t)$ to the convection-diffusion equation:

!bt
\begin{equation}
\frac{\partial u}{\partial t} + \v\cdot\nabla u =
\dfc\nabla^2 u + f\tp
label{scale:convdiff:pde2}
\end{equation}
!et
The scaled version reads

!bt
\[
\frac{\partial u}{\partial t} + \frac{t_cV}{L}\bar\v\cdot\bar\nabla \bar u =
\frac{t_c\dfc}{L^2}\bar\nabla^2 \bar u + \frac{t_cf_c}{u_c}\bar f\tp
\]
!et
We can base $t_c$ on convective transport: $t_c = L/V$. Now,
$u_c$ could be chosen to make the coefficient in the source term unity:
$u_c = t_cf_c = Lf_c/V$.
This leaves us with

!bt
\[ \frac{\partial u}{\partial t} + \bar\v\cdot\bar \nabla\bar u =
\hbox{Pe}^{-1}\bar \nabla^2 \bar u + \bar f\tp
\]
!et

In the diffusion limit, we base $t_c$ on the diffusion time scale:
$t_c=L^2/\dfc$, and the coefficient of the source term set to unity
determines $u_c$ according to

!bt
\[ \frac{L^2 f_c}{\dfc u_c} = 1\quad\Rightarrow\quad u_c = \frac{L^2 f_c}{\dfc}\tp\]
!et
The corresponding PDE reads

!bt
\[ \frac{\partial u}{\partial t} + \hbox{Pe}\,\bar\v\cdot\bar \nabla\bar u =
\bar\nabla^2 \bar u + \bar f,
\]
!et
so for small Peclet numbers, which we have, the convective term can
be neglected and we get a pure diffusion equation with a source term.

What if the problem is stationary?
Then there is no time scale and we get

!bt
\[
\frac{V u_c}{L}\bar\v\cdot\bar \nabla \bar u =
\frac{u_c \dfc}{L^2}\bar\nabla^2 \bar u + f_c\bar f,
\]
!et
or

!bt
\[
\bar\v\cdot\bar \nabla \bar u =
\hbox{Pe}^{-1}\bar\nabla^2 \bar u + \frac{f_c L}{V u_c}\bar f,
\]
!et
Again, choosing $u_c$ such that the source term coefficient is unity leads
to $u_c= f_c L/V$.
Alternatively, $u_c$ can be based on the initial condition, with similar
results as found in the sections on the wave and diffusion PDEs.

======= Exercises =======


===== Problem: Stationary Couette flow =====
label{scale:vib:exer:stationary_Couette}
file=stationary_Couette

A fluid flows between two flat plates, with one plate at rest while
the other moves with velocity $U_0$. This classical flow case is known as
stationary "Couette flow": "https://en.wikipedia.org/wiki/Couette_flow".

!bsubex
Directing the $x$ axis in the flow direction and letting $y$ be
a coordinate perpendicular to the walls, one can assume that
the velocity field simplifies to $\u = u(y)\ii$.
Show from the Navier-Stokes equations that the boundary-value problem
for $u(y)$ is

!bt
\[ u^{\prime\prime}(u) = 0,\quad u(0)=0,\ u(H)=U_0\tp\]
!et
We have here assumed at $y=0$ corresponds to the plate at rest and
that $y=H$ represents the plate that moves. There are no pressure
gradients present in the flow.
!esubex

!bsubex
Scale the problem in a) and show that the result has no physical parameters
left in the model:

!bt
\[ \frac{d^2\bar u}{d\bar y^2} = 0,\quad \bar u(0)=0,\ \bar u(1)=1\tp\]
!et
!esubex

!bsubex
We can compute $\bar u(\bar y)$ from one numerical simulation (or a
straightforward integration of the differential equation). Set up
the formula that finds $u(y; H, u_0)$ from $\bar u(\bar y)$ for any
values of $H$ and $U_0$.
!esubex

!bremarks
The problem for $u$ is a classical two-point boundary-value problem
in applied mathematics and arises in a number of applications, where
Couette flow is just one example. Heat conduction is another
example: $u$ is temperature, and the heat conduction equation for
an insulated rod reduces to $u^{\prime\prime}=0$ under stationary
conditions and no heat source.
Controlling the end $x=0$ at 0 degrees Celsius the other end $x=L$
at $U_0$ degrees
Celsius, gives the same boundary conditions as in the above flow problem.
The scaled problem is of course the same whether we have flow of
fluid or heat.
!eremarks


===== Exercise: Couette-Poiseuille flow =====
label{scale:vib:exer:Couette_wpressure}
file=Couette_wpressure

Viscous fluid flow between two infinite flat plates $z=0$ and $z=H$
is governed by

!bt
\begin{align}
\mu u''(z) &= -\beta\\
u(0) &= 0,\\
u(H) &= U_0\tp
\end{align}
!et
Here, $u(z)$ is the fluid velocity in $x$ direction (perpendicular to the
$z$ axis), $\mu$ is the dynamic viscosity of the fluid, $\beta$ is
a positive constant pressure gradient, and $U_0$ is the
constant velocity of the upper
plate $z=H$ in $x$ direction. The model represents
"Couette flow": "https://en.wikipedia.org/wiki/Couette_flow" for $\beta=0$
and "Poiseuille flow": "https://en.wikipedia.org/wiki/Hagen-Poiseuille_equation"
for $U_0=0$.

!bsubex
Find the exact solution $u(z)$. Point out how $\beta$ and $U_0$
influence the magnitude of $u$.

!bsol
SymPy can integrate the differential equation twice and fit the
integration constants to the boundary conditions:

@@@CODE exer-scaling/Couette_wpressure.py fromto: import sympy@print u
The result becomes

!bt
\[ u(z) =
\frac{z}{2 H \mu} \left(H \beta \left(H - z\right) + 2 U_{0} \mu\right)\tp \]
!et

The maximum value of $u$ is found by

@@@CODE exer-scaling/Couette_wpressure.py fromto: # Find max u@print umax
and reads

!bt
\[ \max_z u =
\frac{H^{2} \beta}{8 \mu} + \frac{U_{0}}{2} +
\frac{U_{0}^{2} \mu}{2 H^{2} \beta}\tp
\]
!et
If the pressure gradient is the domining driving force, we can neglect
the $U_0$ terms: $\max_z u = H^2\beta/(8\mu)$. In case the movement
of the upper plate is much more important than the pressure gradient
for driving the flow, we can neglect the $\beta$ terms. However, we must
then resort to the $u(z)$ expression for $\beta=0$, $u(z)=zU_0/H$,
and realize that the maximum then is obtained at the boundary for
$z=H$: $\max_z h=U_0$ (as intuitively obvious).
!esol
!esubex

!bsubex
Scale the problem.

!bsol
Introducing

!bt
\[ \bar z = \frac{z}{z_c}, \quad \bar u (\bar z) = \frac{u(z_c\bar z)}{u_c},\]
!et
in the equation gives

!bt
\[ \frac{d^2\bar u}{d\bar z^2} = -\frac{z_c^2\beta}{\mu u_c}\tp\]
!et
The natural scale for $z_c$ is $H$ since that makes $\bar z\in [0,1]$.
For the two terms in the differential equation to be of order unity
(with a correct scaling, the left-hand side should be of order unity),
we must have

!bt
\[ u_c = \frac{H^2\beta}{\mu}\tp\]
!et
The boundary value problem is

!bt
\begin{align*}
\frac{d^2\bar u}{d\bar z^2} &= -1,\quad &\bar z\in (0,1),\\
\bar u(0) &= 0,\\
\bar u(1) &= \alpha,
\end{align*}
!et
where $\alpha$ is a dimensionless number

!bt
\[ \alpha = \frac{\mu U_0}{H^2\beta}\tp\]
!et
This is meaningful only for $\beta\neq 0$.

Looking at the exact solution, we see that $\max_z u =
H^2\beta/(8\mu)$, and with this $\max_z u$ as $u_c$ we get a
differential equation $\bar u'' = -8$ instead, and $\bar u\in [0,1]$
(if $U_0=0$). However, the factor $1$ or $8$ on the right-hand side is
not significant, neither if $\bar u\in [0,1]$ or $\bar u\in [0,8]$.

The scale $u_c$ used above is relevant if the pressure gradient is the
dominating force. If $U_0$ is more important than $\beta$, or $\beta =0$,
we choose $u_c=U_0$ and get instead

!bt
\begin{align}
\frac{d^2\bar u}{d\bar z^2} &= -\alpha^{-1},\quad &\bar z\in (0,1),\\
\bar u(0) &= 0,\\
\bar u(1) &= 1\tp
\end{align}
!et
!esol
!esubex

## Could extend to time-dependent case, but this will involve three time
## scales...

===== Exercise: Pulsatile pipeflow =====
label{scale:exer:pipeflow:pulsatile}
file=pipeflow

The flow of a viscous fluid in a straight pipe with circular
cross section with radius $R$ is governed by

!bt
\begin{align}
\varrho\frac{\partial u}{\partial t} &= \frac{\mu}{r}\frac{\partial}{\partial r}
\left(r\frac{\partial u}{\partial r}\right) - P(t), & r\in (0,R),\ t\in (0,T],\\
\frac{\partial u}{\partial r}(0,t) &= 0, & t\in (0,T],\\
u(R,t) &= 0, & t\in (0,T],\\
u(r,0) &= 0, & r\in [0,R].
\end{align}
!et
The quantity $u(r,t)$ is the fluid velocity, $P(t)$ is a given
pressure gradient, $\varrho$ is the fluid density, and $\mu$ is the
dynamic viscosity.

Assume $P(t) = A\cos\omega t$. Scale the problem and identify
appropriate dimensionless numbers. The assume $P(t)$ is a more
complicated function, but still period with period $p$.
Discuss how the scaling can be extended to this case.

!bsol
We introduce dimensionless quantities:

!bt
\[ \bar r = \frac{r}{R},\quad \bar t = \frac{t}{t_c},\quad \bar u = \frac{u}{u_c}\tp\]
!et
The function $P(t)$ can be scaled as

!bt
\[ \bar P(\bar t) = \frac{P(t_c\bar t)}{A} = \sin (t_c\omega \bar t)\tp\]
!et
Inserted in the PDE, we get

!bt
\[ \frac{\partial\bar u}{\partial\bar t} = \frac{t_c \nu }{R^2}\frac{1}{\bar r}\frac{\partial}{\partial\bar r}
\left(\bar r\frac{\partial\bar u}{\partial\bar r}\right) - \frac{t_c A}{\varrho u_c}\sin (t_c\omega\bar t),\]
!et
where $\mu = \mu/\varrho$.

The scale for $u$ can be explored by seeking an analytical solution
of the problem. Such solutions do exist, they are typically series
expansions of Bessel functions, and it is not so easy to extract
a simple expression for the maximum value of $|u(r,t)|$.
A simpler approach is to estimate $u_c$ be demanding the coefficient
in the pressure term to be of unit size:

!bt
\[ u_c = \frac{t_cA}{\varrho}\tp\]
!et
There are two choices of time scales: the pressure time scale $t_c=1/\omega$
and the viscosity (or diffusion) time scale $t_c=R^2/nu$. With the latter
we get $u_c = R^2 A/\mu$ and

!bt
\[ \frac{\partial\bar u}{\partial\bar t} = \frac{1}{\bar r}\frac{\partial}{\partial\bar r}
\left(\bar r\frac{\partial\bar u}{\partial\bar r}\right) - \sin (\alpha\bar t),\]
!et
where

!bt
\[ \alpha = \frac{R^2\omega}{\nu} = \frac{R^2/\nu}{1/\omega},\]
!et
showing that $\alpha$ is the ratio of the viscosity time scale and
the pressure oscillation time scale.

With the pressure time scale we have

!bt
\[ u_c = \frac{\varrho A}{\omega},\]
!et
and the scaled PDE becomes

!bt
\[ \frac{\partial\bar u}{\partial\bar t} = \alpha^{-1}\frac{1}{\bar r}\frac{\partial}{\partial\bar r}
\left(\bar r\frac{\partial\bar u}{\partial\bar r}\right) - \sin (\bar t)\tp\]
!et
In both cases the scaled boundary conditions become

!bt
\[ \frac{\partial\bar u}{\partial\bar t} = 0,\quad
\bar u(1,\bar t) = 0,\]
!et
for $t\in (0,T/t_c]$, and $\bar u(\bar r, 0)=0$ for $\bar r\in [0,1]$.

If $P(t)$ is not sinusoidal but periodic with period $p$, we have that
$P$ is a function of $\omega t$ as above, with $\omega = 2\pi/p$.
Everything in the scaling remains the same, just the $\sin$ term changes
to $P(\alpha\bar t)$ if the time scale is based on viscosity (diffusion),
and $P(\bar t)$ if the time scale is based on the pressure oscillations.
!esol


===== Exercise: The linear cable equation =====
label{scale:exer:cable_eq}
file=cable_eq

A key PDE in neuroscience is the "cable equation": "https://en.wikipedia.org/wiki/Cable_theory", here given in its simplest linear form:

!bt
\begin{equation}
\tau\frac{\partial u}{\partial t} = \lambda^2\frac{\partial^2 u}{\partial x^2}
-u\tp
label{scale:exer:cable_eq:PDE}
\end{equation}
!et
The unknown $u$ is the voltage (measured in volt) associated with
an electric current along one-dimensional dendrites (``cables'')
in neural networks, while $\tau$ and $\lambda$ are given parameters.

Scale (ref{scale:exer:cable_eq:PDE}) in three ways: 1) let all terms in
the scaled equation have unit coefficients, 2) use the domain size
$L$ as spatial scale and base the time scale on diffusion, 3) use the
domain size $L$ as spatial scale and base the time scale on
reaction, i.e., the $-u$ term.

!bsol
Straightforward scaling, with scales $u_c$, $t_c$, and $x_c$,
leads in the first step to

!bt
\[ \frac{\partial\bar u}{\partial\bar t} =
\frac{t_c\lambda^2}{\tau x_c^2}\frac{\partial^2\bar u}{\partial\bar x^2}
- \frac{t_c}{\tau}\bar u\tp\]
!et
Assuming that all terms are equally important and of unit size
in the scaled PDE, we get a uniquely determined length and space scale:

!bt
\[ t_c = \tau,\quad x_c = \lambda\tp\]
!et
The scaled cable equation is then

!bt
\[
\frac{\partial\bar u}{\partial\bar t} =
\frac{\partial^2\bar u}{\partial\bar x^2}
- \bar u\tp
\]
!et

Let now the spatial scale be fixed as $x_c=L$.  Basing $t_c$ on
diffusion means $t_c = \tau (L/\lambda)^2$, and the scaled PDE becomes

!bt
\[ \frac{\partial\bar u}{\partial\bar t} =
\frac{\partial^2\bar u}{\partial\bar x^2}
- \beta\bar u,\]
!et
where

!bt
\[ \beta = \left(\frac{L}{\lambda}\right)^2\tp\]
!et

Basing $t_c$ on the reaction scale, i.e., the balance of the time
derivative and the reaction term, gives $t_c=\tau$ and the scaled PDE

!bt
\[ \frac{\partial\bar u}{\partial\bar t} =
\beta^{-1}\frac{\partial^2\bar u}{\partial\bar x^2}
- \bar u\tp\]
!et

In neuroscience applications of the cable equation to dendrites, it
appears that $\lambda$ is about 1 mm and of the same order of
magnitude as the cable length, so $\beta$ is around 1 in size.
Then there are not big differences in these scalings, and the first
one is to be preferred. The two others are more suitable when
$\beta$ is small or large, e.g., such that the term with $\beta$ can be
left out of the PDE.
!esol

===== Exercise: Heat conduction with discontinuous initial condition =====
label{scale:exer:twometal}
file=metal_pieces

Two pieces of metal at different temperature are brought in contact
at $t=0$. The following initial-boundary value problem governs the
temperature evolution in the two pieces:

!bt
\begin{align}
\frac{\partial u}{\partial t} &= \dfc\nabla^2 u,\ & \x\in\Omega,\ t\in (0,T],\\
u(\x,0)&=I(x), & \x\in \Omega,\\
-\dfc\frac{\partial u}{\partial n} &= h(u-u_S),
& x\in\partial\Omega,\ t\in (0,T].
\end{align}
!et
Here, $u(\x,t)$ is the temperature, $\dfc$ the effective heat diffusion
coefficient (assuming both pieces are homogeneous and of the same type of
metal), and $u_S$ is the surrounding temperature.
The domain $\Omega$ consists of the two pieces $\Omega_1$ and $\Omega_2$:
$\Omega = \Omega_1\cup\Omega_2$. The initial condition can be specified as

!bt
\[ I(x) = \left\lbrace\begin{array}{ll}
U_1, & \x\in\Omega_1,\\
U_2, & \x\in\Omega_2,
\end{array}\right.
\]
!et
where $U_1$ and $U_2$ are the constant initial temperatures in each piece.

Thinking of two identical pieces $\Omega_1$ and $\Omega_2$ with shapes
as bricks, it is tempting to develop a one-dimensional model, especially
if the pieces are somewhat slender. We then expect the main temperature
variations to take place in the $x$ direction, where the $x$ axis is
perpendicular to the contact surface between the pieces.
[Geir: Hm??]
The idea is
to integrate the governing PDE in the two other directions, use the
Gauss divergence theorem on
$\dfc\nabla^2u$, and apply the cooling boundary condition. Let $A$ be
the cross section of the bricks. Integrating over $A$ gives

!bt
\begin{align*}
\int\limits_A \frac{\partial u}{\partial t}dydz &=
\int\limits_A \dfc\left(
\frac{\partial^2 u}{\partial x^2} +
+\frac{\partial^2 u}{\partial y^2} +
+\frac{\partial^2 u}{\partial z^2}
\right)dydz \\
&=\int\limits_A \dfc
\frac{\partial^2 u}{\partial x^2}
dydz +
\int\limits_A \dfc\left(
\frac{\partial^2 u}{\partial y^2} +
+\frac{\partial^2 u}{\partial z^2}
\right)dydz \\
& =
\int\limits_A \dfc
\frac{\partial^2 u}{\partial x^2}
dydz +
\dfc\int\limits_{\partial A}\frac{\partial u}{\partial n}ds\\
& = \int\limits_A \dfc
\frac{\partial^2 u}{\partial x^2}
dydz -h(v(x,t) -u_S)\tp
\end{align*}
!et
The function $v(x,t)$ means $u(\x,t)$ evaluated at the boundary $\partial A$.
[Geir: Hm??]
Assuming $u$ to vary little across the cross section $A$, we can
approximate the integrals by $u$ evaluated at $\partial A$ as $v$:

!bt
\[ \int\limits_A \frac{\partial u}{\partial t}dydz\approx A
\frac{\partial}{\partial t} v(x,t),
\quad
\int\limits_A \dfc
\frac{\partial^2 u}{\partial x^2}
dydz \approx A \dfc \frac{\partial^2 v}{\partial x^2},
\]
!et
where $A$ now is the cross-section area.
The result is the 1D initial-boundary value problem

!bt
\begin{align}
\frac{\partial v}{\partial t} &=
\dfc \frac{\partial^2 v}{\partial x^2}
-\frac{h}{A}(v(x,t) -u_S),\ & x\in (0,L),\ t\in (0,T],\\
v(x,0)&=I(x), & x\in (0,L),\\
 \dfc\frac{\partial v}{\partial x} &= h(v(x,t)-u_S), & x=0,\ t\in (0,T],\\
-\dfc\frac{\partial v}{\partial x} &= h(v(x,t)-u_S), & x=L,\ t\in (0,T],
\end{align}
!et
with

!bt
\[
I(x) = \left\lbrace\begin{array}{ll}
U_1, & x\in [0,L/2),\\
U_2, & x\in [L/2, L]\tp
\end{array}\right.
\]
!et
Scale this problem.

!bsol
We expect the temperature to start from the discontinuous state with
$U_1$ and $U_2$ and approach the surrounding temperature $u_S$ in
the cooling law as $t\rightarrow\infty$. A suitable scaling is
then

!bt
\[ \bar v = \frac{v - \min (U_1,U_2)}{u_S-\min (U_1, U_2)},\]
!et
since this implies that $u$ varies from 0 to 1. Without loss of
generality we assume $U_1 < U_2$, so

!bt
\[ \bar v = \frac{v - U_1}{u_S-U_1}\tp\]
!et
Furthermore,

!bt
\[ \bar x = \frac{x}{L},\quad \bar t = \frac{t}{t_c}\tp\]
!et
Inserted in the governing PDE, we have

!bt
\[
\frac{\partial\bar v}{\partial\bar t} =
\frac{t_c\dfc}{L^2}\frac{\partial^2\bar v}{\partial\bar x^2}
-\frac{t_c h}{A(u_S-U_1)}
(U_1 + (u_S-U_1) \bar v(x,t) - u_S),\]
!et
which simplifies to

!bt
\[
\frac{\partial\bar v}{\partial\bar t} =
\frac{t_c\dfc}{L^2}\frac{\partial^2\bar v}{\partial\bar x^2}
-\frac{t_c h}{A}
(\bar v(x,t) - 1)\tp\]
!et
The natural time scale is that of diffusion: $t_c = L^2/dfc$.
This choice results in the scaled PDE

!bt
\[
\frac{\partial\bar v}{\partial\bar t} =
\frac{\partial^2\bar v}{\partial\bar x^2}
-\beta (\bar v(x,t) - 1),\]
!et
with the dimensionless number

!bt
\[ \beta = \frac{L^2 h}{A\dfc}\tp\]
!et

The scaled initial condition becomes

!bt
\[
\bar v(\bar x,0)=0
\hbox{ if } 0\leq x < 1/2\hbox{ else } \frac{U_2 - U_1}{U_s - U_1}\tp\]
!et
The scaled boundary conditions take the form

!bt
\[
 \frac{\partial}{\partial\bar x}\bar v(0,t) = \frac{Lh}{\dfc}
 (\bar v(0,t)-1),\quad
-{\partial}{\partial\bar x}\bar v(L,t) = \frac{Lh}{\dfc}
(\bar v(L,t)-1)\tp
\]
!et

!esol

!split
========= Advanced PDE models =========

This final chapter addresses more complicated PDE models, including
linear elasticity, viscous flow, heat transfer, porous media flow,
gas dynamics, and electrophysiology. A range of
classical dimensionless numbers are discussed in terms of the scaling.

======= The equations of linear elasticity =======
label{scale:elasticity}

To the best of the authors' knowledge, it seems that mathematical
models in elasticity and structural analysis are almost never
non-dimensionalized. This is probably due to tradition, but the
following sections will demonstrate the usefulness of scaling also in
this scientific field.

We start out with the general, time-dependent elasticity PDE with
variable material properties. Analysis based on scaling is used to
determine with the acceleration term can be neglected. The stationary
elasticity PDE is then discussed, including the simplification to
homogeneous media. Scaling of different types of boundary conditions is
also treated.  At the end, we scale the equations of coupled
thermo-elasticity. All the models make the assumption of small
displacement gradients.

===== The general time-dependent elasticity problem =====
label{scale:elasticity:timedep}

The following vector PDE governs deformation and stress in purely elastic
materials, under the assumption of small displacement gradients:

!bt
\begin{equation}
\varrho\frac{\partial^2\u}{\partial t^2} =
\nabla ((\lambda + \mu)\nabla\cdot\u) + \nabla\cdot(\mu\nabla\u) +
\varrho\f\tp
label{scale:elasticity:PDE1}
\end{equation}
!et
Here, $\u$ is the displacement vector,
$\varrho$ is the density of the material, $\lambda$ and $\mu$ are
the Lame elasticity parameters, and $\f$ is a body force (gravity,
centrifugal force, or similar).

We introduce dimensionless variables:

!bt
\[ \bar\u = u_c^{-1}\u,\quad \bar x = \frac{x}{L},\quad \bar t = \frac{f}{t_c},\]
!et
where $L$ is some length scale we used to scale $y$ and $z$ as well.
Also the elasticity parameters and the density can be scaled, if they
are not constants,

!bt
\[ \bar\lambda = \frac{\lambda}{\lambda_c},\quad
\bar\mu = \frac{\mu}{\mu_c},\quad
\bar\varrho = \frac{\varrho}{\varrho_c},\]
!et
where the characteristic quantities are typically spatial maximum values of
the functions:

!bt
\[ \lambda_c = \max_{x,y,z}\lambda,\quad
\mu_c = \max_{x,y,z}\mu,\quad
\varrho_c = \max_{x,y,z}\varrho\tp\]
!et
Finally, we scale $\f$ too (if not constant):

!bt
\[ \bar\f = f_c^{-1}\f,\quad f_c = \max_{x,y,z,t}||\f||\tp\]
!et

Inserting the dimensionless quantities in the governing vector PDE results in

!bt
\[
\frac{\varrho_c u_c}{t_c^2}
\frac{\partial^2\bar \u}{\partial \bar t^2} =
L^{-2}u_c\bar \nabla ((\lambda_c\bar\lambda +
\mu_c\bar\mu)\bar \nabla\cdot\bar \u) +
L^{-2}u_c\mu_c\bar \nabla\cdot(\bar \mu\bar \nabla\bar \u) +
\varrho_cf_c\bar\varrho\bar\f\tp
\]
!et
Making the terms non-dimensional gives the equation

!bt
\begin{equation}
\bar\varrho\frac{\partial^2\bar \u}{\partial \bar t^2} =
\frac{t_c^2\lambda_c}{L^2\varrho_c}
\bar \nabla (\bar\lambda\bar\nabla\cdot\bar u) +
\frac{t_c^2\mu_c}{L^2\varrho_c}
\bar\nabla(\bar\mu \bar\nabla\cdot\bar \u) +
\frac{t_c^2\mu_c}{L^2\varrho_c}\bar \nabla\cdot(\bar \mu\bar \nabla\bar \u) +
\frac{t_c^2f_c}{u_c}\bar\varrho\bar\f\tp
\end{equation}
!et
We may choose $t_c$ to make the coefficient in front of any of the spatial
derivative terms equal unity. Here we choose the $\mu$ term, which implies

!bt
\[ t_c = L\sqrt{\frac{\varrho_c}{\mu_c}}\tp\]
!et
The scale for $\u$ can be chosen from an initial displacement or by
making the coefficient in front of the $\bar\f$ term unity. The latter
means

!bt
\[ u_c = \mu_c^{-1}f_cL^2\varrho_c\tp\]
!et
The resulting dimensionless PDE becomes

!bt
\begin{equation}
\bar\varrho\frac{\partial^2\bar \u}{\partial \bar t^2} =
\bar \nabla ((\beta\bar\lambda + \bar\mu)\bar\nabla\cdot\bar u) +
\bar \nabla\cdot(\bar \mu\bar \nabla\bar \u) +
\bar\varrho\bar\f\tp
\end{equation}
!et
The only dimensionless parameter is

!bt
\[ \beta = \frac{\lambda_c}{\mu_c}\tp\]
!et
If the source term is absent, we must use the initial condition or
a known boundary displacement to
determine $u_c$.

=== Software ===

Given software for (ref{scale:elasticity:PDE1}),
we can simulate the dimensionless problem by setting $\varrho =\bar\varrho$,
$\lambda =\beta\bar\lambda$, and $\mu = \bar\mu$.

[hpl: What about setting boundary conditions?]

===== Dimensionless stress tensor =====
label{scale:elasticity:PDE1:stress}

The stress tensor $\stress$ is a key quantity in elasticity and is given by

!bt
\[ \stress = \lambda\nabla\cdot\u\I + \mu(\nabla\u + (\nabla\u)^T)\tp\]
!et
This $\stress$ can be computed as soon as the PDE problem for $\u$
has been solved.
Inserting dimensionless variables on the right-hand side of the above
relation gives

!bt
\begin{align*}
\stress &= \lambda_cu_cL^{-2}\bar\lambda\bar\nabla\cdot\bar\u
+ \mu_cu_cL^{-1}\bar\mu(\bar\nabla\bar\u + (\bar\nabla\bar\u)^T)\\
&= \mu_c u_cL^{-1}\left(\beta\bar\lambda\bar\nabla\cdot\bar\u +
\bar\mu(\bar\nabla\bar\u + (\bar\nabla\bar\u)^T)\right)\tp
\end{align*}
!et
The coefficient on the right-hand side, $\mu_c u_cL^{-1}$, has dimension
of stress, since (according to the second table in
Section ref{scale:dimunit:tables}) $[\hbox{M}\hbox{T}^{-2}\hbox{L}^{-1})(\hbox{L})(\hbox{L}^{-1})]
=[\hbox{M}\hbox{T}^{-2}\hbox{L}^{-1}]$, which is the dimension of stress.
The quantity $\mu_c u_cL^{-1}$ is therefore the natural scale of the
stress tensor:

!bt
\[ \bar\stress = \frac{\stress}{\sigma_c},\quad \sigma_c = \mu_c u_c L^{-1},\]
!et
and we have the dimensionless stress-displacement relation

!bt
\begin{equation}
\bar\stress =
\beta\bar\lambda\bar\nabla\cdot\bar\u +
\bar\mu(\bar\nabla\bar\u + (\bar\nabla\bar\u)^T)\tp
\end{equation}
!et

===== When can the acceleration term be neglected? =====
label{scale:elasticity:waves}

A lot of applications of the elasticity equation involves static or
quasi-static deformations where the acceleration term
$\varrho\u_{tt}$ is neglected. Now we shall see under which conditions
the quasi-static approximation holds.

The further discussion will need to look into the time scales of
elastic waves, because it turns out that the chosen $t_c$ above is
closely linked to the propagation speed of elastic waves in a
homogeneous body without body forces.  A relevant model for
such waves has constant
$\varrho$, $\lambda$, and $\mu$, and no force term:

!bt
\begin{equation}
\varrho\frac{\partial^2\u}{\partial t^2} =
(\lambda + \mu)\nabla \nabla\cdot\u + \mu\nabla^2\u\tp
label{scale:elasticity:waves:eq}
\end{equation}
!et

=== S waves ===

Let us take the curl of this PDE and notice
that the curl of a  gradient vanishes. The result is

!bt
\[\frac{\partial^2}{\partial t^2}\nabla\times\u = c_S^2\nabla^2\nabla\times\u,\]
!et
i.e., a wave equation for $\nabla\times\u$. The wave velocity is

!bt
\[ c_S = \sqrt{\frac{\mu}{\varrho}}\tp\]
!et
The corresponding waves are called
"S waves": "https://en.wikipedia.org/wiki/S-wave". The curl of a
displacement field is closely related to rotation of continuum elements.
S waves are therefore rotation waves, also sometimes referred to as
shear waves.

The divergence of a displacement field can be interpreted as the
volume change of continuum elements. Suppose this volume change vanishes,
$\nabla\cdot\u = 0$, which means that the material is incompressible.
The elasticity equation then simplifies to

!bt
\[\frac{\partial^2 \u}{\partial t^2} = c_S^2\nabla^2\u,\]
label{scale:elasticity:waves:Sweq}
!et
so each component of
the displacement field in this case also propagates as a wave
with speed $c_S^2$.
The time it takes for such a wave to travel one characteristic length
$L$ is $L/c_S$, i.e., $L\sqrt{\varrho/\mu}$, which is nothing but
our characteristic time $t_c$.

=== P waves ===

We may take the divergence of the PDE instead and notice that $\nabla\cdot\nabla
=\nabla^2$ so

!bt
\[\frac{\partial^2}{\partial t^2}\nabla\cdot\u = c_P^2\nabla^2\nabla\cdot\u,\]
!et
with wave velocity

!bt
\[ c_P = \sqrt{\frac{\lambda +2\mu}{\varrho}}\tp\]
!et
That is, the volume change (expansion/compression)
propagates as a wave with speed $c_P$.
These type of waves are called "P waves": "https://en.wikipedia.org/wiki/P-wave". Other names are pressure and expansion/compression waves.

Suppose now that $\nabla\times\u =0$, i.e., there is no rotation (``shear'') of
continuum elements. Mathematically this condition implies that
$\nabla^2\u = \nabla(\nabla\cdot\u)$ (see any book on vector calculus
or "Wikipedia": "https://en.wikipedia.org/wiki/Vector_calculus_identities").
Our model equation (ref{scale:elasticity:waves:eq}) then reduces to

!bt
\[ \frac{\partial^2\u}{\partial t^2} = c_P^2\nabla^2\u,\]
label{scale:elasticity:waves:Pweq}
!et
which is nothing but a wave equation for the expansion component of the
displacement field, just as (ref{scale:elasticity:waves:Sweq}) is for the
shear component.


=== Time-varying load ===

Suppose we have some time-varying boundary condition on $\u$ or the
stress vector (traction) that has time scale $\omega$ (some
oscillating movement that goes like $\sin\omega t$ is an example). We
choose $t_c=1/\omega$.  The scaling now leads to

!bt
\[
\gamma
\frac{\partial^2\bar \u}{\partial \bar t^2} =
\bar \nabla ((\beta\bar\lambda +
\bar\mu)\bar \nabla\cdot\bar \u) +
\bar \nabla\cdot(\bar \mu\bar \nabla\bar \u) +
\bar\varrho\bar\f\tp
\]
!et
where we have set

!bt
\[ u_c = \mu_c^{-1}f_cL^2\varrho_c,\]
!et
as before, and $\gamma$ is a new dimensionless number,

!bt
\[ \gamma = \frac{\varrho_cL^2 \omega^2}{\mu_c} =
\left(\frac{L\sqrt{\varrho_c/\mu_c}}{1/\omega}\right)^2\tp\]
!et
The last rewrite shows that $\sqrt{\gamma}$ is the ratio of
the time scale for S waves and the time scale for the forced
movement on the boundary. The acceleration term can therefore
be neglected when $\gamma\ll 1$, i.e., when the time scale
for movement on the boundary is much larger than the time it
takes for the S waves to travel through the domain.
Since the velocity of S waves in solids is very large and
the time scale correspondingly small, $\gamma\ll 1$
is very often the case in applications involving structural analysis.
Exercise ref{scale::exer:elasticity:vibmodels} explores related
models and asks for comparisons of time scales for waves and
mechanical vibrations in structures.


===== The stationary elasticity problem =====
label{scale:elasticity:stationary}

=== Scaling of the PDE ===

We now look at the stationary version of
(ref{scale:elasticity:PDE1}) where the $\varrho\u_{tt}$ term is
removed. The first step in the scaling is just inserting the
dimensionless variables:

!bt
\[
0 =
L^{-2}u_c\bar \nabla ((\lambda_c\bar\lambda +
\mu_c\bar\mu)\bar \nabla\cdot\bar \u) +
L^{-2}u_c\mu_c\bar \nabla\cdot(\bar \mu\bar \nabla\bar \u) +
\varrho_cf_c\bar\varrho\bar\f\tp
\]
!et
Dividing by $L^2u_c\mu_c$ gives

!bt
\[
0 =
\bar \nabla ((\beta\bar\lambda +
\bar\mu)\bar \nabla\cdot\bar \u) +
\bar \nabla\cdot(\bar \mu\bar \nabla\bar \u) +
\frac{L^2\varrho_cf_c}{u_c\mu_c}\bar\varrho\bar\f\tp
\]
!et
Choosing $u_c = \varrho L^2f_c/\mu_c$ as before leads to

!bt
\begin{equation}
\bar \nabla ((\beta\bar\lambda +
\bar\mu)\bar \nabla\cdot\bar \u) +
\bar \nabla\cdot(\bar \mu\bar \nabla\bar \u) +
\bar\varrho\bar\f = 0\tp
\end{equation}
!et

A homogeneous material with constant $\lambda$, $\mu$, and $\varrho$
is an interesting case (this corresponds to $\mu_c=\mu$, $\lambda_c=\lambda$,
$\varrho_c=\varrho$, $\bar\varrho=\bar\lambda=\bar\mu=1$):

!bt
\begin{equation}
(1+\beta)\bar \nabla(\bar \nabla\cdot\bar \u) +
\bar \nabla^2\bar \u) +
\bar\f = 0\tp
\end{equation}
!et
Now $\beta$ is defined as

!bt
\[ \beta = \frac{\lambda}{\mu} = \left(\frac{c_p}{c_s}\right)^2 - 2\tp\]
!et
It shows that in standard, stationary elasticity, $\lambda/\mu$ is the
only significant physical parameter.

=== Scaling of displacement boundary conditions ===

A typical boundary condition on a part of the boundary is a prescribed
displacement. For simplicity we set $\u = \U_0$ for a constant vector
$\U_0$ as boundary condition. With $u_c=\varrho L^2f_c/\mu$, we get
the dimensionless condition

!bt
\[ \bar\u = \frac{\U_0}{u_c} = \frac{\mu \U_0}{\varrho L^2f_c}\tp\]
!et
In the absence of body forces, the expression for $u_c$ has no
meaning ($f_c=0$), so then $u_c = |\U_0|$ is a better choice.
This gives the dimensionless boundary condition

!bt
\[ \bar u = \frac{\U_0}{|\U_0|},\]
!et
which is the unit vector in the direction of $\U_0$. The new $u_c$
changes the coefficient in front of the body force term, if that term
is present, to the dimensionless number

!bt
\[ \delta = \frac{L^2\varrho f_c}{\mu |\U_0|}\tp\]
!et

=== Scaling of traction boundary conditions ===

The other type of common boundary condition in elasticity is a
prescribed traction (stress vector) on a part of the boundary:

!bt
\[ \stress\cdot\normalvec = \bm{T}_0,\]
!et
where for simplicity we take $\bm{T}_0$ as a constant vector.
From Section ref{scale:elasticity:PDE1:stress} we have a stress scale
$\sigma_c = \mu u_c/L$, but we may alternatively use $|\bm{T}_0|$
as stress scale. In that case,

!bt
\[ \bar\stress\cdot\normalvec = \frac{\bm{T}_0}{|\bm{T}_0|},\]
!et
which is a unit vector in the direction of $\bm{T}_0$.
Many applications involve large traction free areas on the boundary, on
which we simply have $\bar\stress\cdot\normalvec = 0$.


===== Quasi-static thermo-elasticity =====
label{scale:elasticity:thermo}

idx{thermo-elasticity}

Heating solids give rise to expansion, i.e., strains, which may cause
stress if displacements are constrained. The time scale of temperature
changes are usually much larger than the time scales of elastic waves,
so the stationary equations of elasticity can be used, but a term
depends on the temperature, so the equations must be coupled to
a PDE for heat transfer in solids. The resulting system of PDE is
known as the equations of *thermo-elasticity* and reads

!bt
\begin{align}
\nabla((\lambda + \mu)\nabla\cdot\u) + \nabla\cdot(\mu\nabla\u) &= \alpha\nabla T -\varrho\f,\\
\varrho c \frac{\partial T}{\partial t} &= \nabla\cdot(\kappa\nabla T) + \varrho \f_T,
\end{align}
!et
where $T$ is the temperature, $\alpha$ is a coefficient of thermal expansion,
$c$ is a heat capacity, $\kappa$ is the heat conduction coefficient,
and $\f_T$ is some heat source. The density $\varrho$ is strictly speaking
a function of $T$ and the stress state, but a widely used approximation
is to consider $\varrho$ as a constant.
Most thermo-elasticity applications have
$\f_T=0$ so we drop this term. Most applications also involve some heating
from a temperature level $T_0$ to some level $T_0 +\Delta T$.
A suitable scaling for $T$ is therefore

!bt
\[ \bar T = \frac{T-T_0}{\Delta T},\]
!et
so that $\bar T\in [0,1]$. The elasticity equation has already been scaled
and so has the diffusion equation for $T$. We base the time scale on
the diffusion, i.e., the thermal conduction process:

!bt
\[ t_c = \varrho c L^2/\kappa_c\tp\]
!et
We imagine that $\kappa$ is scaled as $\bar\kappa = \kappa/\kappa_c$.
The dimensionless PDE system then becomes

!bt
\begin{align}
\bar \nabla((1+\beta)\bar\mu\bar\nabla\cdot\bar\u) + \bar\nabla\cdot(\bar\mu\bar\nabla\bar\u) &= \bar\nabla\bar T
-\epsilon\bar\varrho\bar\f,\\
\frac{\partial \bar T}{\partial \bar t} &= \bar \nabla\cdot(\bar\kappa\bar\nabla\bar T)\tp
\end{align}
!et
Here we have chosen $u_c$ such that
the ``heating source term'' has a unit coefficient, acknowledging that
this thermal expansion balances the stress terms with $\bar\u$. The
corresponding displacement scale is

!bt
\[ u_c = \frac{\alpha L\Delta T}{\mu_c}\tp\]
!et
The dimensionless number in the body force term is therefore

!bt
\[ \epsilon = \frac{L\varrho_c f_c}{\alpha \Delta T},\]
!et
which measures the ratio of the body force term and the ``heating source
term''.

A homogeneous body with constant $\varrho$, $\lambda$, $\mu$, $c$, and $\kappa$
is common. The PDE system reduces in this case to

!bt
\begin{align}
\bar \nabla((1+\beta)\bar\nabla\cdot\bar\u) + \bar\nabla^2\bar\u) &= \bar\nabla\bar T -\epsilon\bar\f,\\
\frac{\partial \bar T}{\partial \bar t} &= \bar \nabla^2\bar T\tp
\end{align}
!et
In the absence of body forces, $\beta$ is again the key parameter.

The boundary conditions for thermo-elasticity consist of the conditions
for elasticity and the conditions
for diffusion. Scaling of such conditions are discussed in
Section ref{sec:scale:diffu} and ref{scale:elasticity:stationary}.


======= The Navier-Stokes equations =======
label{sec:scale:ns}

idx{Navier-Stokes equations}

This section presents scalings of various versions of the
equations governing incompressible viscous fluid flow. We start
with the plain Navier-Stokes equations without body forces and
progress with adding the gravity force and a free surface. We
also look at scaling low Reynolds number flow and oscillating flows.

===== The momentum equation without body forces =====

idx{dimensionless number}
idx{Reynolds number}

The Navier-Stokes equations for incompressible viscous fluid flow
without body forces take the form

!bt
\begin{align}
\varrho\left(\frac{\partial \u}{\partial t} + \u\cdot\nabla\u\right)
&= -\nabla p + \mu\nabla^2\u,
label{scale:fluid:NS:eq:momentum}\\
\nabla\cdot\u & = 0\tp
label{scale:fluid:NS:eq:cont}
\end{align}
!et
The primary unknowns are the
velocity $\u$ and the pressure $p$. Moreover,
$\varrho$ is the fluid density, and $\mu$ is the dynamic viscosity.

=== Scaling ===

We introduce as usual dimensionless independent and dependent variables:

!bt
\[ \bar x = \frac{x}{L},\quad \bar y = \frac{y}{L},\quad
\bar z= \frac{z}{L},\quad \bar t = \frac{t}{t_c},\quad
\bar\u = \frac{\u}{u_c},\quad \bar p = \frac{p}{p_c},\]
!et
where $L$ is some characteristic distance,
$t_c$ is some characteristic time, $u_c$ is a characteristic
velocity, and $p_c$ is a characteristic pressure.
Inserted in the equations,

!bt
\begin{align}
\varrho\left(\frac{u_c}{t_c}\frac{\partial \bar\u}{\partial \bar t} + \frac{u_c^2}{L}\bar\u\cdot\bar\nabla\bar\u\right)
&= -\frac{p_c}{L}\bar\nabla\bar p + \frac{u_c}{L^2}\mu\bar \nabla^2\bar\u,
label{scale:fluid:NS:eq:momentum_d0}\\
\frac{u_c}{L}\bar\nabla\cdot\bar\u & = 0\tp
label{scale:fluid:NS:eq:cont_d0}
\end{align}
!et
For the velocity it is common to just introduce some $U$ for
$u_c$. This $U$ is normally implied by the problem description.  For
example, in the flow configuration below, with flow over a bump, we
have some incoming flow with a profile $v(y)$ and $U$ can typically be
chosen as $U=\max_y v(y)$. The height of the bump influences the wake
behind the bump, and is the length scale that really impacts the flow,
so it is natural to set $L=D$. For numerical simulations in a domain
of finite extent, $[0,c+\ell]$, $c$ must be large enough to avoid
feedback on the inlet profile, and $\ell$ must be large enough for the
type of outflow boundary condition used.  Ideally,
$c,\ell\rightarrow\infty$, so none of these parameters are useful as
length scales.

<linebreak>
<linebreak>

FIGURE: [fig-scaling/flow_over_gaussian, width=500 frac=0.9]

<linebreak>
<linebreak>

For flow in a channel or tube, we also have some inlet profile, e.g.,
$v(r)$ in a tube, where $r$ is the radial coordinate, and a natural
choice of characteristic velocity is $U=v(0)$ or the average flow

!bt
\[ U = \frac{1}{\pi R^2}\int_0^R 2\pi v(r)rdr,\]
!et
if $R$ is the radius of the tube. Other examples may be flow around
a body, where there is some distant constant inlet flow $\u = U_0\ii$,
for instance, and $U=U_0$ is an obvious choice. We therefore
assume that the flow problem comes with a natural candidate for $U$.

Having a characteristic distance $L$ and velocity $U$, an obvious
time measure is $L/U$ so we set $t_c=L/U$. Dividing by the
coefficient in front of the time derivative term, creates a pressure
term

!bt
\[ \frac{p_c}{\varrho U^2}\bar\nabla\bar p\tp\]
!et
The coefficient suggest a choice $p_c=\varrho U^2$ if the pressure
gradient term is to have the same size as the acceleration terms.
This $p_c$ is a very common pressure scale in fluid mechanics,
arising from Bernoulli's equation $p + \frac{1}{2}\varrho \u\cdot\u =
\hbox{const}$ for stationary flow.

idx{Reynolds number}

=== Dimensonless PDEs and the Reynolds number ===

The discussions so far results in the following dimensionless form of
(ref{scale:fluid:NS:eq:momentum}) and (ref{scale:fluid:NS:eq:cont}):

!bt
\begin{align}
\frac{\partial \bar\u}{\partial \bar t} +
\bar\u\cdot\bar\nabla\bar\u
&= -\bar\nabla\bar p + \hbox{Re}^{-1}\bar\nabla^2\bar\u,
label{scale:fluid:NS:eq:momentum_d1}\\
\bar\nabla\cdot \bar\u &= 0,
\end{align}
!et
where Re is the famous *Reynolds number*,

!bt
\[ \hbox{Re}= \frac{\varrho UL}{\mu} = \frac{UL}{\nu}\tp\]
!et
The latter expression makes use of the kinematic viscosity $\nu = \mu/\varrho$.
For viscous fluid flows without body forces there is hence only one
dimensionless number, Re.

The Reynolds number can be interpreted as the ratio of convection and
viscosity:

!bt
\[ \frac{\hbox{convection}}{\hbox{viscosity}} =
\frac{|\varrho\u\cdot\nabla\u|}{|\mu\nabla^2\u|}\sim
\frac{\varrho U^2/L}{\mu U/L^2} =
\frac{UL}{\nu} = \hbox{Re}\tp\]
!et
(We have here used that $\nabla\u$ goes like $U/L$ and $\nabla^2\u$
goes like $U/L^2$.)

idx{low Reynolds number flow}
idx{Stokes problem}

===== Scaling of time for low Reynolds numbers =====

As we discussed in Section ref{scale:convdiff} for the convection-diffusion
equation, there is not just one scaling that fits all problems.
Above, we used $t_c=L/U$, which is appropriate if convection is
a dominating physical effect. In case the convection term
$\varrho\u\cdot\nabla\u$
is much smaller
than the viscosity term $\mu\nabla^2\u$, i.e., the Reynolds number
is small, the viscosity term is dominating. However,
if the scaling is suitable, the other terms are of order unity, and
$\hbox{Re}^{-1}\nabla^2\bar\u$ must then also be of unit size,
implying that $\nabla^2\bar\u$ is small, but then the scaling is
not suitable. In the low-Reynolds number regime, the diffusion effect
of $\nabla^2\bar\u$ is dominating, and we should use a time scale
based on diffusion rather than convection. Such a time scale is
$t_c = L^2/(\mu/\varrho) = L^2/\nu$.
With this time scale, the dimensionless Navier-Stokes equations look like

!bt
\begin{align}
\frac{\partial \bar\u}{\partial \bar t} +
\hbox{Re}\,\bar\u\cdot\bar\nabla\bar\u
&= -\bar\nabla p + \bar\nabla^2\bar\u,
label{scale:fluid:NS:eq:momentum_d2}\\
\bar\nabla\cdot\bar\u &= 0\tp
\end{align}
!et
As stated in the box in Section ref{scale:convdiff}, (ref{scale:fluid:NS:eq:momentum_d2}) is the appropriate PDE for very low Reynolds number flow and
suggests neglecting the convection term.
If the flow is also steady, the time derivative term can be neglected,
and we end up with the so-called *Stokes problem* for steady, slow, viscous
flow:

!bt
\begin{align}
-\bar\nabla p + \bar\nabla^2\bar\u &= 0,
label{scale:fluid:NS:eq:momentum_d3}\\
\bar\nabla\cdot\bar\u &= 0\tp
\end{align}
!et
This flow regime is also known as *Stokes' flow* or *creeping flow*.

idx{Stokes' flow}
idx{Froude number}
idx{creeping flow}

===== Shear stress as pressure scale =====

Instead of using the kinetic energy $\varrho U^2$ as pressure scale,
one can use the shear stress $\mu U/L$ ($U/L$ reflects the spatial
derivative of the velocity, which enters the shear stress expression
$\mu\partial u/\partial y$). Using $U$ as velocity scale, $L/U$ as
time scale, and $\mu U/L$ as pressure scale, results in

!bt
\begin{equation}
\hbox{Re}\left(\frac{\partial \bar\u}{\partial \bar t} +
\bar\u\cdot\bar\nabla\bar\u\right)
= -\bar\nabla\bar p + \bar\nabla^2\bar\u\tp
\end{equation}
!et
Low Reynolds number flow now suggests neglecting both acceleration terms.


===== Gravity force and the Froude number =====

We now add a gravity force to the momentum equation
(ref{scale:fluid:NS:eq:momentum}):

!bt
\begin{equation}
\varrho\left(\frac{\partial \u}{\partial t} + \u\cdot\nabla\u\right)
= -\nabla p + \mu\nabla^2\u - \varrho g\kk,
label{scale:fluid:NS:eq:momentum_g}
\end{equation}
!et
where $g$ is the acceleration of gravity, and $\kk$ is a unit
vector in the opposite direction of gravity. The new term
takes the following form after non-dimensionalization:

!bt
\[ \frac{t_c}{\varrho  u_c}\varrho g \kk =  \frac{Lg}{U^2}\kk
= \hbox{Fr}^{-2}\kk,\]
!et
where Fr is the dimensionless Froude number,

!bt
\[ \hbox{Fr} = \frac{U}{\sqrt{Lg}}\tp\]
!et
This quantity reflects the ratio of inertia and gravity forces:

!bt
\[ \frac{|\u\cdot\nabla\u|}{|\varrho g|} \sim \frac{\varrho U^2/L}{\varrho g}
= \hbox{Fr}^2\tp\]
!et


===== Oscillating boundary conditions and the Strouhal number =====

idx{Strouhal number}

Many flows have an oscillating nature, often arising from some
oscillating boundary condition. Suppose such a condition at some
boundary $x=\hbox{const}$ takes the specific form

!bt
\[ \u = U\sin(\omega t)\ii\tp\]
!et
The dimensionless counterpart becomes

!bt
\[ U\bar\u = U\sin(\omega \frac{L}{U}\bar t)\ii,\]
!et
if $t_c=L/U$ is the appropriate time scale. This condition can be
written

!bt
\begin{equation}
\bar\u = \sin(\hbox{St}\,\bar t),
\end{equation}
!et
where St is the *Strouhal number*,

!bt
\begin{equation}
\hbox{St} = \frac{\omega L}{U}\tp
\end{equation}
!et
The two important dimensionless parameters in oscillating flows are
then the Reynolds and Strouhal numbers.

idx{vortex shedding}

Even if the boundary conditions
are of steady type, as for flow around a sphere or cylinder,
the flow may at certain Reynolds numbers get unsteady and oscillating.
For $10^2 < \hbox{Re} < 10^7$, steady inflow towards a cylinder will
cause vortex shedding: an array of vortices are periodically shedded
from the cylinder, producing an oscillating flow pattern and force
on the cylinder. The Strouhal number is used to characterize the
frequency of oscillations. The phenomenon, known as *von Karman
vortex street*, is particularly important if the frequency
of the force on the cylinder hits the free vibration frequency
of the cylinder such that resonance occurs. The result can be large
displacements of the cylinder and structural failure. A famous
case in engineering is the failure of the "Tacoma Narrows suspension
bridge": "https://en.wikipedia.org/wiki/Tacoma_Narrows_Bridge_(1940)"
in 1940, when wind-induced vortex shedding caused resonance
with the free torsional vibrations of the bridge.

idx{Euler number}

===== Cavitation and the Euler number =====

The dimensionless pressure in (ref{scale:fluid:NS:eq:momentum_d1})
made use of the pressure scale $p_c=\varrho U^2$. This is an
appropriate scale if the pressure level is not of importance, which
is very often the case since only the pressure *gradient* enters
the flow equation and drives the flow. However, there are circumstances
where the pressure level is of importance. For example, in some flows
the pressure may become so low that the vapor pressure of the liquid
is reached and that vapor cavities form (a phenomenon known as
*cavitation*). A more appropriate pressure scale is then
$p_c = p_{\infty} - p_v$, where $p_\infty$ is a characteristic
pressure level far from vapor cavities and $p_v$ is the vapor pressure.
The coefficient in front of the dimensionless pressure gradient is then

!bt
\[ \frac{p_{\infty} - p_v}{\varrho U^2}\tp \]
!et
Inspired by Bernoulli's equation
$p + \frac{1}{2}\varrho \u\cdot\u =
\hbox{const}$
in fluid mechanics, a factor $\frac{1}{2}$ is often inserted in the
denominator. The corresponding dimensionless number,

!bt
\begin{equation}
\hbox{Eu} = \frac{p_{\infty} - p_v}{\frac{1}{2}\varrho U^2},
\end{equation}
!et
is called the *Euler number*. The pressure gradient term now reads
$\frac{1}{2}\hbox{Eu}\,\bar\nabla\bar p$. The Euler number
expresses the ratio of pressure differences and the kinetic
energy of the flow.


===== Free surface conditions and the Weber number =====
label{freesurface:Weber}
At a free surface, $z=\eta(x,y,t)$, the boundary conditions are

!bt
\begin{align}
w &= \frac{\partial\eta}{\partial t} + \u\cdot\nabla\eta,\\
p - p_0 & \approx
-\sigma\left(\frac{\partial^2\eta}{\partial x^2} +
\frac{\partial^2\eta}{\partial y^2}\right),
label{scale:fluid:NS:surface_tension}
\end{align}
!et
where $w$ is the velocity component in the $z$ direction,
$p_0$ is the atmospheric air pressure at the surface,
and $\sigma$ represents the surface tension.
The approximation in (ref{scale:fluid:NS:surface_tension}) is valid
under small deformations of the surface.

idx{Weber number}

The dimensionless form of these conditions starts with inserting the
dimensionless quantities in the equations:

!bt
\begin{align*}
u_c\bar w &= \frac{L}{t_c}
\frac{\partial\bar\eta}{\partial\bar t} +
u_c\bar\u\cdot\bar\nabla\bar\eta,\\
p_c \bar p &\approx
-\frac{1}{L}\sigma\left(\frac{\partial^2\bar\eta}{\partial \bar x^2} +
\frac{\partial^2\bar\eta}{\partial \bar y^2}\right)\tp
\end{align*}
!et
The characteristic length $L$ is usually taken as the depth of the fluid
when the surface is flat. We have used
$\bar p = (p - p_0)/p_c$ for making the pressure dimensionless.
Using $u_c=U$, $t_c=L/U$, and $p_c = \varrho U^2$, results in

!bt
\begin{align}
\bar w &= \frac{\partial\bar\eta}{\partial\bar t} +
\bar\u\cdot\bar\nabla\bar\eta,\\
\bar p &\approx
- \hbox{We}^{-1}\left(\frac{\partial^2\bar\eta}{\partial \bar x^2} +
\frac{\partial^2\bar\eta}{\partial \bar y^2}\right),
label{scale:fluid:NS:surface_tension2}
\end{align}
!et
where We is the *Weber number*,

!bt
\begin{equation}
\hbox{We} = \frac{\varrho U^2L}{\sigma}\tp
\end{equation}
!et
The Weber number measures the importance of surface tension effects and
is the ratio of the pressure scale $\varrho U^2$ and the surface
tension force per area, typically $\sigma/R_x$ in a 2D problem, which
has size $\sigma/L$.

======= Thermal convection =======

Temperature differences in fluid flow cause density differences, and since
cold fluid is heavier than hot fluid, the gravity force will induce
flow due to density differences. This effect is called free thermal
convection. Forced convection refers to the case where there is no
feedback from the temperature field to the motion, i.e., temperature
differences do not create motion. This fact decouples the energy
equation from the mass and momentum equations.

===== Forced convection =====

idx{forced convection}
idx{Peclet number}
idx{Reynolds number}

The model governing forced convection consists of the Navier-Stokes
equations and the energy equation for the temperature:

!bt
\begin{align}
\varrho\left(\frac{\partial \u}{\partial t} + \u\cdot\nabla\u\right)
&= -\nabla p + \mu\nabla^2\u - \varrho g\kk,
label{scale:fluid:forced_convection:eq:momentum_T_forced}\\
\nabla\cdot\u & = 0,
label{scale:fluid:forced_convection:eq:cont_T_forced}\\
\varrho c\left(\frac{\partial T}{\partial t} + \u\cdot\nabla T\right)
&= \kappa\nabla^2 T \tp
label{scale:fluid:forced_convection:eq:energy_T_forced}\\
\end{align}
!et
The symbol $T$ is the temperature, $c$ is a heat capacity, and $\kappa$
is the heat conduction coefficient for the fluid. The PDE system
applies primarily for liquids. For gases one may need a term
$- p\nabla\cdot\u$ for the pressure work in
(ref{scale:fluid:forced_convection:eq:energy_T_forced})
as well as a modified equation of continuity
(ref{scale:fluid:forced_convection:eq:cont_T_forced}).

Despite the fact that $\varrho$ depends on $T$, we treat $\varrho$
as a constant $\varrho_0$. The major effect of the $\varrho(T)$
dependence is through the
buoyancy effect caused by the gravity term $-\varrho(T)g\kk$.
It is common to drop this
term in forced convection,
and assume the momentum and continuity equations to be
independent of the temperature. The flow is driven by boundary
conditions (rather than density variations as in free convection),
from which we can find a characteristic velocity $U$.

Dimensionless parameters are introduced as follows:

!bt
\[ \bar x = \frac{x}{L},
\ t_c = \frac{L}{U},\
\bar\u = \frac{\u}{U},\ \bar p = \frac{p}{\varrho_0 U^2},\
\bar T = \frac{T-T_0}{T_c}\tp\]
!et
Other coordinates are also scaled by $L$.
The characteristic temperature $T_c$ is chosen as some range $\Delta T$,
which depends on the problem and is often given by the
thermal initial and/or
boundary conditions. The reference temperature $T_0$ is also
implied by prescribed conditions.
Inserted in the equations, we get

!bt
\begin{align*}
\varrho_0\frac{U^2}{L}\frac{\partial \bar\u}{\partial \bar t} +
\varrho_0\frac{U^2}{L}\bar \u\cdot\bar \nabla\bar\u
&= -\frac{\varrho_0 U^2}{L}\bar\nabla \bar p + \frac{\mu U}{L^2}
\bar \nabla^2\bar \u,
\\
\frac{U}{L}\bar\nabla\cdot\bar\u & = 0,
\\
\varrho_0 c\left(\frac{T_c U}{L}
\frac{\partial \bar T}{\partial \bar t} +
\frac{UT_c}{L}\bar\u\cdot\bar\nabla \bar T\right)
&= \frac{\kappa T_c}{L^2}
\bar \nabla^2 \bar T \tp
\end{align*}
!et
Making each term in each equation dimensionless reduces the system to

!bt
\begin{align}
\frac{\partial \bar\u}{\partial \bar t} +
\bar \u\cdot\bar \nabla\bar\u
&= -\bar\nabla \bar p + \hbox{Re}^{-1}\bar \nabla^2\bar \u,
label{scale:fluid:forced_convection:eq:momentum_TB0}\\
\bar\nabla\cdot\bar\u & = 0,
label{scale:fluid:forced_convection:eq:cont_TB0}\\
\frac{\partial \bar T}{\partial \bar t} +
\bar\u\cdot\bar\nabla \bar T
&= \hbox{Pe}^{-1}
\bar \nabla^2 \bar T\tp
label{scale:fluid:forced_convection:eq:energy_TB0}
\end{align}
!et

The two dimensionless numbers in this system are given by
!bt
\[
\hbox{Pe} = \frac{\varrho_0 c UL}{\kappa },\quad
\hbox{Re} = \frac{UL}{\nu}\quad (\nu = \frac{\mu}{\varrho_0})\tp
\]
!et
The Peclet number is here defined as the ratio of the
convection term for heat $\varrho_0 c U\Delta T/L$ and the
heat conduction term $\kappa U/L^2$. The fraction
$\kappa/(\varrho_0 c)$ is known as the thermal diffusivity,
and if this quantity is given a symbol $\dfc$, we realize the
relation to the Peclet number defined in Section ref{scale:convdiff}.


===== Free convection =====
label{scale:fluid:forced_convection}

idx{free convection}

=== Governing equations ===

The mathematical model for free thermal convection
consists of the Navier-Stokes equations
coupled to an energy equation governing the temperature:

!bt
\begin{align}
\varrho\left(\frac{\partial \u}{\partial t} + \u\cdot\nabla\u\right)
&= -\nabla p + \mu\nabla^2\u - \varrho g\kk,
label{scale:fluid:free_convection:eq:momentum_T}\\
\frac{\partial\rho}{\partial t} + \nabla\cdot(\varrho\u) & = 0,
label{scale:fluid:free_convection:eq:cont_T}\\
\varrho c\left(\frac{\partial T}{\partial t} + \u\cdot\nabla T\right)
&= \kappa\nabla^2 T + 2\mu\varepsilon_{ij}\varepsilon_{ij}\tp
label{scale:fluid:free_convection:eq:energy_T}
\end{align}
!et
The symbol $T$ is the temperature, $c$ is a heat capacity, $\kappa$
is the heat conduction coefficient for the fluid. In free convection,
the gravity term $-\varrho(T) g\kk$ is essential since the flow is driven
by temperature differences and the fact that hot fluid rises while
cold fluid falls.

For slightly compressible gas flow a term $-p\nabla\cdot\u$ may be
needed in (ref{scale:fluid:free_convection:eq:energy_T}) and also
a modified (ref{scale:fluid:free_convection:eq:cont_T}).

=== Heating by viscous effects ===

We have also included heating of the fluid due to the work of viscous forces,
represented by the term $2\mu\varepsilon_{ij}\varepsilon_{ij}$, where
$\varepsilon_{ij}$ is the strain-rate tensor in the flow, defined by

!bt
\[ \varepsilon_{ij} = \frac{1}{2}\left(\frac{\partial u_i}{\partial x_j}
+ \frac{\partial u_j}{\partial x_i}\right) = \frac{1}{2}(\nabla\u + (\nabla\u)^T),\]
!et
where $u_i$ is the velocity in direction of $x_i$ ($i=1,2,3$ measures
the space directions). The term $2\mu\varepsilon_{ij}\varepsilon_{ij}$
is written with Einstein's summation convention in mind such that
there is an implicit sum over $i$ and $j$.  This term is actually much
more relevant for forced convection, but was left out in Section
ref{scale:fluid:forced_convection} for mathematical simplicity.
Heating by the work of viscous forces is often a very small effect and
can be neglected, although it plays a major role in forging and
extrusion of metals where the viscosity is very large, and those
processes require large external forces to drive the flow.  The reason
behind the inclusion of the work by viscous forces under the heading
of free convection is more that we want to scale a more complete,
general mathematical model for mixed force and free convection, and
arrive at dimensionless numbers that can tell if this extra term is
important or not.

=== Relation between density and temperature ===

The equations (ref{scale:fluid:free_convection:eq:momentum_T}) and
(ref{scale:fluid:free_convection:eq:cont_T}) has already been made dimensionless
in the previous section. The major difference is now that $\varrho$
is no longer a constant, but a function of $T$.
The relationship between $\varrho$ and $T$ is often taken as
linear,

!bt
\[ \varrho = \varrho_0 -\varrho_0 \beta (T-T_0),\]
!et
where

!bt
\[ \beta = -\frac{1}{\varrho}\left(\frac{\partial\varrho}{\partial t}
\right)_p,\]
!et
is known as the thermal expansion coefficient of the fluid,
and $\varrho_0$ is a reference density when the temperature is at $T_0$.


=== The Boussinesq approximation ===

A very common approximation, called the *Boussinesq approximation*, is
to neglect the density variations in all terms except the gravity term.
This is a good approximation unless the change in $\varrho$ is large.
With the linear $\varrho(T)$ formula and the Boussinesq approximation,
(ref{scale:fluid:free_convection:eq:momentum_T})-(ref{scale:fluid:free_convection:eq:energy_T})
take the form

!bt
\begin{align}
\varrho_0\left(\frac{\partial \u}{\partial t} + \u\cdot\nabla\u\right)
&= -\nabla p + \mu\nabla^2\u - (\varrho_0 - \varrho_0\beta(T-T_0))g\kk,
label{scale:fluid:free_convection:eq:momentum_TB}\\
\nabla\cdot\u & = 0,
label{scale:fluid:free_convection:eq:cont_TB}\\
\varrho_0 c\left(\frac{\partial T}{\partial t} + \u\cdot\nabla T\right)
&= \kappa\nabla^2 T + 2\mu\varepsilon_{ij}\varepsilon_{ij}\tp
label{scale:fluid:free_convection:eq:energy_TB}
\end{align}
!et
A good justification of the Boussinesq approximation is provided
by Tritton cite[Ch. 13]{Tritton}.

=== Scaling ===

Dimensionless variables are introduced as

!bt
\[ \bar x = \frac{x}{L},\ \ t_c = \frac{L}{U},\
\bar\u = \frac{\u}{U},\ \bar p = \frac{p}{\varrho U^2},\
\bar T = \frac{T-T_0}{\Delta T}\tp\]
!et
The dimensionless $y$ and $z$ coordinates also make use of $L$ as scale.
As in forced convection, we assume the characteristic temperature
level $T_0$ and the scale $\Delta T$ are given by thermal boundary and/or
initial conditions.
Contrary to Sections ref{sec:scale:ns} and ref{scale:fluid:forced_convection},
$U$ is now not given by the problem description, but implied by
$\Delta T$.

Replacing quantities with dimensions by their dimensionless counterparts
results in

!bt
\begin{align*}
\varrho_0\frac{U^2}{L}\frac{\partial \bar\u}{\partial \bar t} +
\varrho_0\frac{U^2}{L}\bar \u\cdot\bar \nabla\bar\u
&= -\frac{p_c}{L}\bar\nabla \bar p + \frac{\mu U}{L^2}
\bar \nabla^2\bar \u - \varrho_0g\kk + \varrho_0\beta T_c\bar T g\kk,
\\
\frac{U}{L}\bar\nabla\cdot\bar\u & = 0,
\\
\varrho_0 c\left(\frac{T_c U}{L}
\frac{\partial \bar T}{\partial \bar t} +
\frac{UT_c}{L}\bar\u\cdot\bar\nabla \bar T\right)
&= \frac{\kappa T_c}{L^2}
\bar \nabla^2 \bar T + 2\frac{\mu U}{L}
\bar\varepsilon_{ij}\bar\varepsilon_{ij}\tp
\end{align*}
!et
These equations reduce to

!bt
\begin{align}
\frac{\partial \bar\u}{\partial \bar t} +
\bar \u\cdot\bar \nabla\bar\u
&= -\bar\nabla \bar p + \hbox{Re}^{-1}\bar \nabla^2\bar \u
- \hbox{Fr}^{-2}\kk  + \gamma \bar T\kk,
label{scale:fluid:free_convection:eq:momentum_TB0}\\
\bar\nabla\cdot\bar\u & = 0,
label{scale:fluid:free_convection:eq:cont_TB0}\\
\frac{\partial \bar T}{\partial \bar t} +
\bar\u\cdot\bar\nabla \bar T
&= \hbox{Pe}^{-1}\bar \nabla^2 \bar T + 2\delta
\bar\varepsilon_{ij}\bar\varepsilon_{ij}\tp
label{scale:fluid:free_convection:eq:energy_TB0}
\end{align}
!et

The dimensionless numbers, in addition to Re and Fr, are
!bt
\[
\gamma = \frac{g\beta L\Delta T }{U^2},\quad
\hbox{Pe}^{-1} = \frac{\kappa }{\varrho_0 c UL},\quad
\delta = \frac{\mu U}{L\varrho_0 c \Delta T}\tp
\]
!et
The Peclet number is here defined as the ratio of the
convection term for heat $\varrho_0 c U\Delta T/L$ and the
heat conduction term $\kappa U/L^2$.
The $\gamma$ number measures the ratio of thermal buoyancy and
the convection term:

!bt
\[ \gamma = \frac{\varrho_0 g\beta \Delta T }{\varrho_0 U^2/L}
= \frac{g\beta L\Delta T }{U^2}\tp\]
!et
The Pe parameter is the fraction of the convection term
and the thermal diffusion term:

!bt
\[ \frac{|\varrho_0\u\cdot\nabla T|}{|\kappa\nabla^2 T|}\sim
\frac{\varrho_0 c U \Delta T L^{-1}}{\kappa L^{-2}\Delta T}
= \frac{\varrho c UL}{\kappa } = \hbox{Pe}\tp\]
!et
The $\delta$ parameter is the ratio of the viscous dissipation term
and the convection term:

!bt
\[ \frac{|\mu\nabla^2\u|}{|\varrho_0c\u\cdot\nabla T|}\sim
\frac{\mu U^2/L^2}{\varrho_0 c U \Delta T/L} =
\frac{\mu U}{L\varrho_0 c \Delta T} = \delta\tp
\]
!et

===== The Grashof, Prandtl, and Eckert numbers =====

idx{Grashof number}
idx{Reynolds number}

The problem with the above dimensionless numbers is that they involve
$U$, but $U$ is implied by $\Delta T$. Assuming that the convection
term is much bigger than the viscous diffusion term, the momentum
equation features a balance between the buoyancy term and the convection
term:

!bt
\[ |\varrho_0 \u\cdot\nabla\u| \sim \varrho_0 g \beta\Delta T\tp\]
!et
Translating this similarity to scales,

!bt
\[ \varrho_0 U^2/L \sim \varrho_0 g \beta\Delta T,\]
!et
gives an $U$ in terms of $\Delta T$ :

!bt
\[ U = \sqrt{\beta L \Delta T}\tp\]
!et
The Reynolds number with this $U$ now becomes

!bt
\[ \hbox{Re}_T = \frac{UL}{\nu} = \frac{\sqrt{g\beta L^3 \Delta T}}{\nu^2}
= \hbox{Gr}^{1/2},\]
!et
where Gr is the Grashof number in free thermal convection:

!bt
\[ \hbox{Gr} = \hbox{Re}_T^2 =  \frac{g\beta L^3 \Delta T}{\nu^2}\tp\]
!et
The Grashof number replaces the Reynolds number in the scaled equations
of free thermal convection. We shall soon look at its interpretations,
which are not as straightforward as for the Reynolds and Peclet numbers.

The above
choice of $U$ in terms of $\Delta T$ results in $\gamma$ equal to unity:

!bt
\[ \gamma = \frac{g\beta L\Delta T }{U^2} =
\frac{g\beta L\Delta T }{g\beta L \Delta T} = 1\tp\]
!et

idx{Peclet number}

The Peclet number can also be rewritten as

!bt
\[ \hbox{Pe}= \frac{\varrho c UL}{\kappa } = \frac{\mu c}{\kappa}
\frac{\varrho UL}{\mu}
= \hbox{Pr}\hbox{Re}^{-1} = \hbox{Pr}\hbox{Re}_T^{-1},\]
!et
where Pr is the Prandtl number, defined as

!bt
\[ \hbox{Pr} = \frac{\mu c}{\kappa}\tp\]
!et

The Prandtl number is the ratio of the momentum diffusivity (kinematic
viscosity) and the thermal diffusivity. Actually, more detailed
analysis shows that Pr reflects the ratio of the thickness of the
thermal and velocity boundary layers: when $\hbox{Pr}=1$, these layers
coincide, while $\hbox{Pr}\ll 1$ implies that the thermal layer is
much thicker than the velocity boundary layer, and vice versa for
$\hbox{Pr}\gg 1$.

idx{Eckert number}

The $\delta$ parameter is in free convection replaced by a combination
of the Eckert number (Ec) and the Reynolds number. We have that

!bt
\[ \hbox{Ec} = \frac{U^2}{c\Delta T} = \delta\hbox{Re}_T,\]
!et
and consequently

!bt
\[ \delta = \hbox{Ec}\hbox{Re}_T^{-1} = \hbox{Ec}\hbox{Gr}^{-1/2}\tp\]
!et
Writing

!bt
\[ \hbox{Ec} = \frac{\varrho_0U^2}{\varrho_0c\Delta T},\]
!et
shows that the Eckert number can be interpreted as the ratio of
the kinetic energy of the flow and the thermal energy.

We use Gr instead of $\hbox{Re}_T$ in the momentum equations and also
instead of Pe in the energy equation (recall that $\hbox{Pe} =
\hbox{Pr}\hbox{Re} =
\hbox{Pr}\hbox{Re}_T=\hbox{Pr}\hbox{Gr}^{-1/2}$). The resulting scaled
system becomes

!bt
\begin{align}
\frac{\partial \bar\u}{\partial \bar t} +
\bar \u\cdot\bar \nabla\bar\u
&= -\bar\nabla \bar p + \hbox{Gr}^{-1/2}\bar \nabla^2\bar \u
- \hbox{Fr}^{-2}\kk  + \bar T \kk,
label{scale:fluid:free_convection:eq:momentum_TB1}\\
\bar\nabla\cdot\bar\u & = 0,
label{scale:fluid:free_convection:eq:cont_TB1}\\
\hbox{Gr}^{1/2}\left(\frac{\partial \bar T}{\partial \bar t} +
\bar\u\cdot\bar\nabla \bar T\right)
&= \hbox{Pr}^{-1}
\bar \nabla^2 \bar T + 2\hbox{Ec}\hbox{Gr}^{-1/2}
\bar\varepsilon_{ij}\bar\varepsilon_{ij}\tp
label{scale:fluid:free_convection:eq:energy_TB1}
\end{align}
!et

The Grashof number plays the same
role as the Reynolds number in the momentum equation in free
convection. In particular,
it turns out that Gr governs the transition between laminar and
turbulent flow.  For example, the transition to turbulence occurs in
the range $10^8 < \hbox{Gr} < 10^9$ for free convection from vertical
flat plates.  Gr is normally interpreted as a dimensionless number
expressing the ratio of buoyancy forces and viscous forces.

=== Interpretations of the Grashof number ===

Recall that the scaling leading to the Grashof number is based on an
estimate of $U$ from a balance of the convective and the buoyancy
terms. When the viscous term dominates over convection, we need a
different estimate of $U$, since in this case, the viscous force
balances the buoyancy force:

!bt
\[ \mu\nabla^2\u \sim \varrho_0g\beta\Delta T\quad
\Rightarrow\quad \mu U/L^2 \sim \varrho_0g\beta\Delta T,\]
!et
This similarity suggests the scale

!bt
\[ U = \frac{g\beta L^2 \Delta T}{\nu}\tp\]
!et
Now,

!bt
\[ \frac{|\varrho_0\u\cdot\nabla\u|}{|\mu\nabla^2\u|} \sim \frac{UL}{\nu}
= \frac{g\beta L^3 \Delta T}{\nu} = \hbox{Gr}\tp\]
!et
The result means that $\hbox{Gr}^{1/2}$ measures the ratio of convection and
viscous forces when convection dominates, but Gr measures this ratio when
viscous forces dominate.

The product of Gr and Pr is the Rayleigh number,

!bt
\[
\hbox{Ra} = \frac{g\beta L^3\Delta T\varrho_0 c}{\nu\kappa},
\]
!et
since

!bt
\[
\hbox{Gr} \hbox{Pr} = \hbox{Re}_T^2\hbox{Pr} =
\frac{g\beta L^3 \Delta T}{\nu^2}\frac{\mu c}{\kappa} =
\frac{g\beta L^3 \Delta T\varrho_0 c}{\nu\kappa} =
\hbox{Ra}\tp
\]
!et
The Rayleigh number is the preferred dimensionless number when studying
free convection in horizontal layers cite{Drazin_Reid,Tritton}. Otherwise,
Gr and Pr are dominate.

# #ifdef WIKIPEDIA
Wikipedia about Ra: When the Rayleigh number is below the critical value for that fluid, heat transfer is primarily in the form of conduction; when it exceeds the critical value, heat transfer is primarily in the form of convection.

URL: "http://www.coolingzone.com/library.php?read=481"

When the Reynolds number is large, the inertia forces are in command. Viscous forces dominate the boundary layer when the Reynolds number is small. Now, how does this relate to transition from laminar to turbulent flow?
Any real flow of fluid contains small disturbances that will grow given enough opportunities. as long as the viscous forces dominate these disturbances are under control. As the inertia forces get bigger, the viscosity can no longer maintain order and these tiny disturbances grow into trouble makers and we transition to turbulent flow.
Another important quantity of the boundary layer that is influenced by the Reynolds number is its thickness. As the Reynolds number increases, the viscous layer gets squeezed into a smaller distance from the surface.
The value of Reynolds number beyond which the flow is no longer considered laminar is called the critical Reynolds number. For flow over a flat plate, the critical Reynolds number is observed to vary between 1e+5 to 3e+6 depending on the turbulence level in the free stream and the roughness of the surface. We normally use 5e+5 as the critical Reynolds number for flow over flat plates.

Nusselt number is the dimensionless heat transfer coefficient and appears when you are dealing with convection. It, therefore, provides a measure of the convection heat transfer at the surface. It is defined as $hL/k$ where, $h$ is the heat transfer coefficient, L is a characteristic length and k is the thermal conductivity. But, what does this grouping mean from a physical standpoint? Let's find out.
I am afraid that we have to look at the boundary layer in order to explain the concept of Nusselt number. We will, of course, cover the basics of the boundary layer in a separate tutorial but for now it suffices to say that when a fluid flows over a solid surface, the first layer of the fluid stick to the boundary (we even have a name for this thing called, no slip condition). This causes the flow to retard in the vicinity of the wall. As we move away from the wall the effect of this no slip thing gets smaller and smaller up to a point where it is no longer felt by the fluid. To get to this point, though, we have had to go through a layer of fluid who still knows about the wall. This layer is called the boundary layer. This was the effect of the wall on the velocity (or momentum). A similar argument applies when, for example, a cold fluid flows over a hot surface. The first layer of the fluid (which is now stuck to the surface) gets its heat from the surface through pure conduction. It then gives its newly acquired energy to all of the other fluid molecules that it comes in contact with as they pass by it (this is convection). As we move further and further away from the wall, the effect of the hot wall is felt less and less (it, of course, depends on the thermal conductivity of the fluid). Eventually, there comes a point where the fluid does not have a clue about the hot wall. The layer of fluid between the wall and this point is called the thermal boundary layer. It is where all of the action is taking place (as far as heat transfer between the solid and fluid is concerned). Before continuing with the Nusselt number, let us define another dimensionless property:

Pr is the ratio of momentum diffusivity (kinematic viscosity) to thermal diffusivity. It can be related to the thickness of the thermal and velocity boundary layers. It is actually the ratio of velocity boundary layer to thermal boundary layer. When Pr=1, the boundary layers coincide.
When Pr is small, it means that heat diffuses very quickly compared to the velocity (momentum). This means the thickness of the thermal boundary layer is much bigger than the velocity boundary layer for liquid metals.
See more at: URL: "http://www.coolingzone.com/library.php?read=481#sthash.bxVmIl7I.dpuf"

The Grashof number is the ratio of buoyancy forces to the viscous forces.
Not easy to show.

IMPORTANT: The Rayleigh number is the product of Grashof and Prandtl numbers. It turns out that in natural convection the Nusselt number scales with Rayleigh rather than just Grashof.

Wikipedia: Following the treatment of the previous subsection, the typical fluid velocity is of the order of $g \Delta \rho L^2 / \mu$, up to a numerical factor depending on the geometry of the system. Therefore Grashof number can be thought of as Reynolds number with the velocity of natural convection replacing the velocity in Reynolds number's formula. However In practice, when referring to the Reynolds number, it is understood that one is considering forced convection, and the velocity is taken as the velocity dictated by external constraints (see below).
Using these three numbers in the equations, we end up with

!bt
\begin{align}
\frac{\partial \bar\u}{\partial \bar t} +
\bar \u\cdot\bar \nabla\bar\u
&= -\bar\nabla \bar p + \hbox{Re}^{-1}\bar \nabla^2\bar \u
- \hbox{Fr}^{-2}\kk  + \hbox{Gr}\hbox{Re}^{-2} \bar T\kk,
label{scale:fluid:free_convection:eq:momentum_TB2}\\
\bar\nabla\cdot\bar\u & = 0,
label{scale:fluid:free_convection:eq:cont_TB2}\\
\frac{\partial \bar T}{\partial \bar t} +
\bar\u\cdot\bar\nabla \bar T
&= \hbox{Pr}^{-1}\hbox{Re}^{-1}
\bar \nabla^2 \bar T + 2\hbox{Ec}\hbox{Re}^{-1}
\bar\varepsilon_{ij}\bar\varepsilon_{ij}\tp
label{scale:fluid:free_convection:eq:energy_TB2}
\end{align}
!et

For the case $\hbox{Gr}\hbox{Re}^{-2}\ll 1$, one can neglect the $\bar
T$ term in the momentum equation
(ref{scale:fluid:free_convection:eq:momentum_TB1}), and density differences will
then not drive the flow. This flow regime is called *forced
convection*: $\bar u$ and $\bar p$ are governed by
(ref{scale:fluid:free_convection:eq:momentum_TB})-(ref{scale:fluid:free_convection:eq:cont_TB}),
and the flow forces transport of heat through the term $\bar
u\cdot\bar\nabla\bar T$ in (ref(ref{scale:fluid:free_convection:eq:energy_TB}).
When $\hbox{Gr}\hbox{Re}^{-2}\sim 1$ we have mixed convection, and
$\hbox{Gr}\hbox{Re}^{-2}\gg 1$ is called pure free convection.  The
buoyancy effect with rising hot fluid and falling cold fluid is then
dominating the flow.

What is $U$ in Re?

When $\hbox{Pr}^{-1}\hbox{Re}^{-1}\ll 1$, one can neglect heat transport
by conduction, while $\hbox{Ec}\hbox{Re}^{-1}\ll 1$ suggest neglecting
heat generation by viscous dissipation.
# #endif

===== Heat transfer at boundaries and the Nusselt number =====

idx{Nusselt number}

A common boundary condition, modeling heat transfer to/from the
surroundings, is

!bt
\begin{equation}
-\kappa\frac{\partial T}{\partial n} = h(T - T_s),
label{scale:fluid:free_convection:fluxcond}
\end{equation}
!et
where $\partial/\partial n$ means the derivative in the normal direction
($\normalvec\cdot\nabla$), $h$ is an experimentally determined
heat transfer coefficient, and $T_s$ is the temperature of
the surroundings. Scaling (ref{scale:fluid:free_convection:fluxcond})
leads to

!bt
\[ -\frac{\kappa\Delta t}{L}\frac{\partial \bar T}{\partial \bar n} = h(\Delta T \bar T + T_0 - T_s),\]
!et
and further to

!bt
\[ \frac{\partial \bar T}{\partial \bar n} =
\frac{hL}{\kappa}(\bar T + \frac{T_s - T_0}{\Delta T})
= \hbox{Nu}(\bar T - \bar T_s),
\]
!et
where the Nusselt number is defined by

!bt
\[ \hbox{Nu} = \frac{hL}{\kappa},\]
!et
and $\bar T_s$ is simply the dimensionless surrounding temperature,

!bt
\[ \bar T_s = \frac{T_s - T_0}{\Delta T}\tp\]
!et

The left-hand side of (ref{scale:fluid:free_convection:fluxcond}) represents
heat conduction, while the right-hand side models convective heat
transfer at a boundary. The Nusselt number can then be interpreted as
the ratio of convective and conductive heat transfer at a boundary:

!bt
\[ \frac{|h(T-T_s)|}{\kappa T/L} \sim \frac{h}{\kappa /L} = \hbox{Nu}\tp\]
!et

Heat transfer is a huge engineering
field with lots of experimental investigations
that are summarized by curves relating various dimensionless numbers
such as Gr, Pr, and Nu.

# #include "bidomain.do.txt"

======= Two-phase porous media flow =======

We consider the flow of two incompressible, immiscible fluids in
a porous medium with porosity $\phi (\x)$. The two fluids are referred to
as the "wetting": "https://en.wikipedia.org/wiki/Wetting" and
non-wetting fluid. In an oil-water mixture, water is usually the
wetting fluid. The fraction of the pore volume occupied by the
wetting fluid is denoted by $S(\x,t)$. The non-wetting fluid then occupies
$1-S$ of the pore volume (or $(1-S)\phi$ of the total volume).
The variable $P(\x,t)$ represents the pressure in the non-wetting fluid.
It is related to the pressure $P_n$ in the non-wetting fluid through
the capillary pressure $p_c=P_n-P$, which is an empirically determined
function of $S$.

From mass conservation of the two fluids and from Darcy's law for
each fluid, one can derive the following system of PDEs and
algebraic relations that govern the two primary unknowns $S$ and $P$:

!bt
\begin{align}
\nabla\cdot\v &= -(Q_n + Q_w),
label{scale:twoph:Peq}\\
\v &= -\lambda_t\nabla P + \lambda_wp_c'(S)\nabla S + (\lambda_w\varrho_w
+ \lambda_n\varrho_n)g\kk,
label{scale:twoph:v_teq}\\
\phi\frac{\partial S}{\partial t} + f_w'(S)\v\cdot\nabla S &=
\nabla\cdot(h_w(S)p_c'(S)\nabla S) + \nonumber\\
&\qquad\qquad g\frac{\partial G_w}{\partial z} + f_w(Q_n+Q_w) - Q_w,
label{scale:twoph:Seq}\\
Q_w &= \frac{q_w}{\varrho_w},
label{scale:twoph:Q_w}\\
Q_n &= \frac{q_n}{\varrho_n},
label{scale:twoph:Q_n}\\
\lambda_w(S) &= \frac{K}{\mu_w}k_{rw}(S),
label{scale:twoph:lambda_w}\\
\lambda_n(S) &= \frac{K}{\mu_n}k_{rn}(S),
label{scale:twoph:lambda_n}\\
\lambda_t(S) &= \lambda_w(S) + \lambda_n(S),
label{scale:twoph:lambda_t}\\
k_{rw}(S) &= K_{wm}\left\lbrack\frac{S-S_{wr}}{1-S_{nr}-S_{wr}}\right\rbrack^a,
label{scale:twoph:k_rw}\\
k_{rn}(S) &= K_{nm}\left\lbrack\frac{1-S-S_{nr}}{1-S_{nr}-S_{wr}}\right\rbrack^b,
label{scale:twoph:k_rn}\\
f_w(S) &= \frac{\lambda_w}{\lambda_t},
label{scale:twoph:f_w}\\
G_w(S) &= h_w(S)(\varrho_n - \varrho_w),
label{scale:twoph:G_w}\\
h_w(S) &= -\lambda_n(S)f_w(S)\tp
label{scale:twoph:h_w}
\end{align}
!et

The permeability of the porous medium is $K$
(usually a tensor, but here taken as a
scalar for simplicity); $\mu_w$ and $\mu_n$ are the dynamic viscosities
of the wetting and non-wetting fluid, respectively;
$\varrho_w$ and $\varrho_n$ are the densities
of the wetting and non-wetting fluid, respectively;
$q_w$ and $q_n$ are the injection rates of the wetting and non-wetting
fluid through wells, respectively;
$S_{wr}$ is the irreducible saturation of
the wetting fluid (i.e., $S\geq S_{wr}$); $S_{nr}$ is the corresponding
irreducible saturation of the non-wetting fluid (i.e., $(1-S)\geq S_{nr}$),
$K_{wn}$ and $K_{nr}$ are the maximum values of the
relative permeabilities $k_{rw}$ and $k_{rn}$, respectively, and
$a$ and $b$ are given (Corey) exponents in the expressions for the
relative permeabilities.

The two PDEs are of elliptic and hyperbolic/parabolic nature:
(ref{scale:twoph:Peq}) is elliptic since it is the divergence of a
vector field, while (ref{scale:twoph:Seq}) is parabolic ($h_w\geq 0$
because $p_c'(S)\geq 0$ and $\lambda_n$ as well as $f_w$ are positive
since $k_{rn}>0$ and $k_{rw}>0$). Very often, $p_c'$ is small so
(ref{scale:twoph:Seq}) is of hyperbolic nature, and $S$ features very
steep gradients that become shocks in the limit $p_c'\rightarrow 0$
and (ref{scale:twoph:Seq}) is purely hyperbolic.
A popular solution technique is based on operator splitting:
(ref{scale:twoph:Peq}) is solved with respect to $P$, given $S$, and
(ref{scale:twoph:Seq}) is solved with respect to $S$, given $P$.

The saturation $S$ is a non-dimensional quantity, and so are $\phi$,
$k_{rw}$, $k_{rn}$, $K_{wm}$, $K_{nm}$, $f_w$, and $f_w'$.
The quantity $\v$ is the total filtration velocity, i.e., the
sum of the velocities of the wetting and non-wetting fluid.
An associated velocity scale $v_c$ is convenient to define.
It is also convenient to introduce dimensionless fractions of
wetting and non-wetting fluid properties:

!bt
\begin{align*}
\varrho &\equiv \varrho_w,\\
\varrho_n &= \varrho\alpha,\quad \alpha = \frac{\varrho_n}{\varrho_w},\\
\mu &\equiv\mu_w,\\
\mu_n &= \mu\beta,\quad \beta = \frac{\mu_n}{\mu_w},\\
Q &\equiv Q_w = \frac{q_w}{\varrho},\\
Q_n &= Q\frac{\gamma}{\alpha},\quad \gamma = \frac{q_n}{q_w}\tp
\end{align*}
!et
We will benefit from making $\lambda_w$, $\lambda_n$, and $\lambda_t$
dimensionless:

!bt
\begin{align*}
\lambda_w(S) &= \frac{K}{\mu}k_{rw}(S) = \lambda_c\bar\lambda_w,\quad
\lambda_c=\frac{K}{\mu},\quad \bar\lambda_w = k_{rw},\\
\lambda_n(S) &= \frac{K}{\mu}\beta^{-1}k_{rn}(S) = \lambda_c\beta^{-1}\bar\lambda_n,
\quad\bar\lambda_n = k_{rn},\\
\lambda_t(S) &= \lambda_w(S) + \lambda_n(S) = \lambda_c\bar\lambda_t,\quad
\bar\lambda_t = \bar \lambda_w +
\beta^{-1}\bar\lambda_n\tp
\end{align*}
!et
As we see, $\lambda_c$ is the characteristic size of any ``lambda''
quantity, and a bar indicates as always a dimensionless variable.
The above formulas imply

!bt
\[ h_w(S) = -\lambda_c\beta^{-1}\bar\lambda_n(S)f_w(S),\quad
G_w(S) = h_w(S)\varrho(\alpha - 1)\tp\]
!et
Furthermore, we introduce dimensionless quantities by

!bt
\[ \bar\x = \frac{\x}{L},\quad \bar\v = \frac{\v}{v_c},\quad
\bar P = \frac{P}{P_c},\quad\bar p_c = \frac{p_c}{P_c}\tp\]
!et
Inserting the above scaled quantities in the governing PDEs results in

!bt
\begin{align}
\bar\nabla\cdot\bar\v &= -\frac{LQ}{v_c}(1 + \alpha^{-1}\gamma),
label{scale:twoph:Peq:s0}\\
\bar\v &= -\frac{P_c\lambda_c}{v_c L}\bar\lambda_t\bar\nabla\bar P +
\frac{\lambda_c P_c}{v_c L}\bar\lambda_w \bar p_c'(S)\bar\nabla S +\nonumber\\
&\quad\quad\frac{g\lambda_c\varrho}{v_c}
(\bar\lambda_w + \alpha\beta^{-1}\bar\lambda_n)\kk,
label{scale:twoph:v_teq:s0}\\
\phi\frac{\partial S}{\partial\bar t} + \frac{t_cv_c}{L}f_w'(S)\bar\v\cdot
\bar\nabla S &=
\frac{t_c P_c\lambda_c}{L^2}
\bar\nabla\cdot(-\beta^{-1}\bar\lambda_n(S)f_w(S)\bar p_c'(S)\bar\nabla S) + \nonumber\\
&\quad\quad \frac{t_c g}{L}\frac{\partial G_w}{\partial\bar z} + t_c f_w Q(1+\alpha^{-1}\gamma) - t_cQ\tp
label{scale:twoph:Seq:s0}
\end{align}
!et
As usual, $L$ is taken as the characteristic length of the spatial domain.
Since $v_c$ is a velocity scale, a natural time scale is the time it
takes to transport a signal with velocity $v_c$ through the domain:
$t_c = L/v_c$. The diffusion term in the equation
(ref{scale:twoph:Seq:s}) then gets
a dimensionless fraction

!bt
\[ \frac{L P_c\lambda_c}{v_c L^2}\tp\]
!et
Forcing this fraction to be unity gives

!bt
\[ v_c = \lambda_c\frac{P_c}{L}\tp\]
!et
We realize that this is indeed a natural velocity scale if the
velocity is given by the pressure term in Darcy's law. This term
is $K/\mu$ times the pressure gradient:

!bt
\[ \frac{K}{\mu}|\nabla P| \sim \frac{K}{\mu}\frac{P_c}{L} =
\lambda_c\frac{P_c}{L} = v_c\tp\]
!et
We have here dropped the impact of the
relative permeabilities $\bar\lambda_w$ or
$\bar\lambda_n$ since these are quantities that are less than or equal
to unity.

The other term in Darcy's law is the gravity term that goes like
$\lambda_c \varrho g$ (again dropping relative permeabilities).
The ratio of the gravity term and the pressure gradient term in Darcy's
law is an interesting dimensionless number:

!bt
\[ \delta = \frac{\lambda_c \varrho g}{\lambda_c P_c/L} =
\frac{L\varrho g}{P_c}\tp\]
!et
This number naturally arises when we discuss
the term

!bt
\[ \frac{t_c g}{L}\frac{\partial G_w}{\partial\bar z} =
-(\alpha -1)\beta^{-1}\delta
(\bar\lambda_n'(S)f_w(S) + \bar\lambda_n(S)f_w'(S))
\frac{\partial S}{\partial\bar z}
\]
!et
Introducing another dimensionless variable,

!bt
\[ \epsilon = t_cQ = \frac{L^2Q}{\lambda_cP_c},\]
!et
we can write (ref{scale:twoph:Peq:s0})-(ref{scale:twoph:Seq:s0}) in the
final dimensionless form as

!bt
\begin{align}
\bar\nabla\cdot\bar\v &= -\epsilon(1 + \alpha^{-1}\gamma),
label{scale:twoph:Peq:s}\\
\bar\v &= -\bar\lambda_t\bar\nabla\bar P +
\bar\lambda_w \bar p_c'(S)\bar\nabla S +
\delta(\bar\lambda_w + \alpha\beta^{-1}\bar\lambda_n)\kk,
label{scale:twoph:v_teq:s}\\
\phi\frac{\partial S}{\partial\bar t} + f_w'(S)\bar\v\cdot
\bar\nabla S &= -
\bar\nabla\cdot(-\beta^{-1}\bar\lambda_n(S)f_w(S)\bar p_c'(S)\bar\nabla S) -
\nonumber\\
&\quad\quad (\alpha -1)\beta^{-1}\delta
(\bar\lambda_n'(S)f_w(S) + \bar\lambda_n(S)f_w'(S))
\frac{\partial S}{\partial\bar z} +\nonumber\\
&\quad\quad\epsilon f_w (1+\alpha^{-1}\gamma) -
\epsilon\tp
label{scale:twoph:Seq:s}
\end{align}
!et

The eight input parameters $L$, $q_w$, $q_n$, $\mu_w$, $\mu_n$,
$\varrho_w$, $\varrho_n$, and $K$ are reduced to five dimensionless
parameters $\alpha$, $\beta$, $\gamma$, $\delta$, and $\epsilon$.
There are six remaining dimensionless numbers to be set: $K_{wm}$,
$K_{nm}$, $S_{wr}$, $S_{nr}$, $a$, and $b$.

[hpl: Boundary conditions?]

[hpl: Simplifications: skip gravity, sources, capillary pressure, simplify relative permeabilities.]

[hpl: Exercises: single-phase flow, with and without thermal effects.]

======= Compressible gas dynamics =======
label{scale:gasdyn}

===== The Euler equations of gas dynamics =====
label{scale:Euler_eqs}

## Taken from
## http://www.theoretical-physics.net/dev/fluid-dynamics/euler.html

## http://farside.ph.utexas.edu/teaching/336L/Fluidhtml/node22.html

The fundamental equations for a compressible fluid are based on balance
of mass, momentum, and energy. When molecular diffusion effects are
negligible, the PDE system, known as the Euler
equations of gas dynamics, can be written as

!bt
\begin{align}
\frac{\partial\varrho}{\partial t} + \nabla\cdot(\varrho\u) &= 0,
label{scale:Euler_eqs:mass}\\
\frac{\partial(\varrho\u)}{\partial t} + \nabla\cdot(\varrho\u\u^T) &= -\nabla p + \varrho \f,
label{scale:Euler_eqs:mom}\\
\frac{\partial E}{\partial t} + \nabla\cdot(\u(E+p)) &= 0,
label{scale:Euler_eqs:energy}
\end{align}
!et
where the total energy is given by

!bt
\begin{equation}
E = \varrho e + \frac{1}{2}\varrho\u\cdot\u\tp
label{scale:Euler_eqs:E}
\end{equation}
!et
In these equations, $\u$ is the fluid velocity, $\varrho$ is the density,
$p$ is the pressure, $E$ is the total energy per unit volume, composed
of the kinetic energy per unit volume, $\half\varrho \u\cdot\u$, and the
internal energy per unit volume, $\varrho e$.

Assuming the fluid to be an ideal gas implies the following additional
relations:

!bt
\begin{align}
e &= c_v T,
label{scale:Euler_eqs:e}\\
p &= \varrho RT = \frac{R}{c_v}(E-\half\varrho \u\cdot\u),
label{scale:Euler_eqs:p}
\end{align}
!et
where $c_v$ is the specific heat capacity at constant volume (for dry air
$c_v = 717.5\, \hbox{J}\,\hbox{kg}^{-1}\hbox{K}^{-1}$),
$R$ is the specific ideal gas constant
($R=287.14 \hbox{J}\hbox{kg}^{-1}\hbox{K}^{-1}$), and $T$ is the temperature.
# #ifdef EXTRA
The speed of sound is then

!bt
\begin{equation}
c = \sqrt{\left(1 + \frac{R}{c_v}\right)\frac{p}{\varrho}}\tp
\end{equation}
!et
# #endif

The common way to solve these equations is to propagate $\varrho$,
$\varrho\u$, and $E$ by an explicit numerical method in time for
(ref{scale:Euler_eqs:mass})-(ref{scale:Euler_eqs:energy}),
using (ref{scale:Euler_eqs:p}) for $p$.


We introduce dimensionless independent variables,

!bt
\[ \bar x = \frac{x}{L},\quad \bar y = \frac{y}{L},\quad \bar z = \frac{z}{L},
\quad \bar t = \frac{t}{t_c},\]
!et
and dimensionless dependent variables,

!bt
\[ \bar\u = \frac{\u}{U},\quad\bar\varrho = \frac{\varrho}{\varrho_c},
\quad\bar p = \frac{p}{p_c},\quad \bar E= \frac{E}{E_c}\tp\]
!et
Inserting these expressions in the governing equations gives

!bt
\begin{align*}
\frac{\partial\bar\varrho}{\partial\bar t} + \frac{t_c U}{L}\bar\nabla\cdot(\bar\varrho\bar\u) &= 0,\\
\frac{\partial(\bar\varrho\bar\u)}{\partial\bar t} + \frac{t_cU}{L}\bar\nabla\cdot(\bar\varrho\bar\u\bar\u^T) &= -\frac{t_cp_c}{UL\varrho_c}\nabla\bar p + \frac{t_c f_c}{U}\bar\varrho \bar\f,\\
\frac{\partial\bar E}{\partial\bar t} + \frac{t_c U}{LE_c }\bar\nabla\cdot(\bar\u(E_c\bar E+p_c\bar p)) &= 0,\\
\bar p & = \frac{R}{c_v p_c}(E_c\bar E - \half\varrho_cu_c\bar\varrho\bar\u\cdot\bar\u)\tp
\end{align*}
!et
A natural choice of time scale is $t_c=L/U$. A common choice of
pressure scale is $p_c=\varrho_c U^2$. The energy equation simplifies if
we choose $E_c=p_c=\varrho_c U^2$. With these scales we get

!bt
\begin{align*}
\frac{\partial\bar\varrho}{\partial\bar t} +
\bar\nabla\cdot(\bar\varrho\bar\u) &= 0,\\
\frac{\partial(\bar\varrho\bar\u)}{\partial\bar t} +
\bar\nabla\cdot(\bar\varrho\bar\u\bar\u^T) &=
-\nabla\bar p + \alpha\bar\varrho \bar\f,\\
\frac{\partial\bar E}{\partial\bar t} +
\bar\nabla\cdot(\bar\u(\bar E+ \bar p)) &= 0,\\
\bar p & = \frac{R}{c_v}(\bar E - \half\bar\varrho\bar u\cdot\bar u),
\end{align*}
!et
where $\alpha$ is a dimensionless number:

!bt
\[ \alpha = \frac{Lf_c}{U^2}\tp\]
!et
We realize that the scaled Euler equations look like
the ones with dimension, apart from the $\alpha$ coefficient.

[hpl: Comment on software also for advanced models.]

===== General isentropic flow =====

Heat transfer can be neglected in
"isentropic flow": "https://en.wikipedia.org/wiki/Isentropic_process",
and there is hence an equation of state involving only $\varrho$ and
$p$:

!bt
\[ p = F(\varrho)\tp\]
!et
The energy equation is now not needed and the Euler equations simplify
to

!bt
\begin{align}
\frac{\partial\varrho}{\partial t} + \nabla\cdot(\u\varrho) &=0,
label{scale:gas:acoustic:rho}\\
\varrho\frac{\partial\u}{\partial t} + \varrho\u\cdot\nabla\u + \nabla p &=0\tp
label{scale:gas:acoustic:u}
\end{align}
!et

=== Elimination of the pressure ===

A common equation of state is

!bt
\[ F(\varrho) = p_0\left(\frac{\varrho}{\varrho_0}\right)^\gamma,\]
!et
where $\gamma = 5/3$ for air. The first step is to eliminate $p$ in
favor of $\varrho$ so we get a system for $\varrho$ and $\u$.
To this end, we must calculate $\nabla p$:

!bt
\[ \nabla p = F'(\varrho)\nabla\varrho,\quad
F'(\varrho)= c_0^2\left(\frac{\varrho}{\varrho_0}\right)^{\gamma-1},\]
!et
where

!bt
\[ c_0 = \sqrt{\frac{\gamma p_0}{\varrho_0}}\]
!et
is the speed of sound in the fluid in the equilibrium state (see the subsequent section).
Equation (ref{scale:gas:acoustic:u}) with eliminated pressure $p$ reads

!bt
\begin{equation}
\varrho\frac{\partial\u}{\partial t} + \varrho\u\cdot\nabla\u +
c_0^2\left(\frac{\varrho}{\varrho_0}\right)^{\gamma-1}\nabla\varrho =0\tp
label{scale:gas:acoustic:u2}
\end{equation}
!et

The governing equations are now (ref{scale:gas:acoustic:rho})
and (ref{scale:gas:acoustic:u2}).
Space and time are scaled as usual as

!bt
\[ \bar x = \frac{x}{L},\quad\bar y = \frac{y}{L},\quad\bar z = \frac{z}{L},
\quad\bar t = \frac{t}{t_c}\tp\]
!et
The scaled dependent variables are

!bt
\[ \bar\varrho = \frac{\varrho}{\varrho_c},\quad \bar\u = \frac{\u}{U}\tp\]
!et
Then $F'(\varrho)=c_0^2\bar\varrho^{\gamma-1}$.

Inserting the dimensionless variables in the two governing PDEs leads to

!bt
\begin{align*}
\frac{\varrho_c}{t_c}\frac{\partial\bar\varrho}{\partial\bar t}
+ \frac{\varrho_c U}{L}\bar\nabla\cdot(\bar\varrho\bar\u) &=0,\\
\frac{\varrho_c U}{t_c}\bar\varrho
\frac{\partial\bar\u}{\partial\bar t} +
\frac{\varrho_c U^2}{L}\bar\varrho\bar u\cdot\bar\nabla\bar\u
+ \frac{\varrho_c}{L}\left(\frac{\varrho_c}{\varrho_0}\right)^{\gamma-1}c_0^2\bar\varrho^{\gamma-1}
\bar\nabla\bar\varrho
&=0\tp
\end{align*}
!et
[Geir: The rather ungracious scaling factor will disappear if $\rho_c=\rho_0$.]
The characteristic flow velocity is $U$ so a natural time scale is
$t_c = L/U$. This choice leads to the scaled PDEs

!bt
\begin{align}
\frac{\partial\bar\varrho}{\partial\bar t}
+ \bar\nabla\cdot(\bar\varrho\bar\u) &=0,\\
\bar\varrho
\frac{\partial\bar\u}{\partial\bar t} +
\bar\varrho\bar\u\cdot\bar\nabla\bar\u
+ \hbox{M}^{-2}\left(\frac{\varrho_c}{\varrho_0}\right)^{\gamma-1}\bar\varrho^{\gamma-1}
\bar\nabla\bar\varrho
&=0,
\end{align}
!et
where the dimensionless number

!bt
\[ \hbox{M} = \frac{U}{c_0},\]
!et
is known as the *Mach number*.
The boundary conditions specify the characteristic velocity $U$ and
thereby the Mach number.

idx{Mach number}


===== The acoustic approximation for sound waves =====
label{scale:gas:acoustic}

=== Wave nature of isentropic flow with small perturbations ===

A model for sound waves can be based on (ref{scale:gas:acoustic:rho})
and (ref{scale:gas:acoustic:u2}), but in this case
there are small pressure, velocity, and
density *perturbations* from a ground state at rest
where $\u=0$, $\varrho=\varrho_0$, and $p=p_0 = F(\varrho_0)$.
Introducing the perturbations $\hat\varrho = \varrho - \varrho_0$ and $\hat\u$,
(ref{scale:gas:acoustic:rho})
and (ref{scale:gas:acoustic:u2}) take the form

!bt
\begin{align*}
\frac{\partial\hat\varrho}{\partial t} + \nabla\cdot(\hat\u(\varrho_0 + \hat\varrho) &=0,\\
(\varrho_0 + \hat\varrho)
\frac{\partial\hat\u}{\partial t} + (\varrho_0+\hat\varrho)\hat\u\cdot\nabla\hat\u +
c_0^2\left(1 + \frac{\hat\varrho}{\varrho_0}\right)^{\gamma-1}\nabla\hat\varrho &=0\tp
\end{align*}
!et
For small perturbations we can linearize this PDE system by
neglecting all products of $\hat\varrho$ and
$\hat\u$. Also, $1 + \hat\varrho/\varrho_0\approx 1$.
This leaves us with the simplified system

!bt
\begin{align*}
\frac{\partial\hat\varrho}{\partial t} + \varrho_0\nabla\cdot\hat\u &=0,\\
\varrho_0\frac{\partial\hat\u}{\partial t} +
c_0^2\nabla\hat\varrho &=0\tp
\end{align*}
!et
Eliminating $\hat\u$ by differentiating the first PDE with respect to $t$
and taking the divergence of the second PDE gives a standard wave equation
for the density perturbations:

!bt
\[ \frac{\partial^2\hat\varrho}{\partial t^2} = c_0^2\nabla^2\hat\varrho\tp\]
!et
Similarly, $\hat\varrho$ can be eliminated and one gets a wave equation for
$\hat\u$, also with wave velocity $c_0$.
This means that the sound perturbations travel with velocity $c_0$.


=== Basic scaling for small wave perturbations ===

Let $\varrho_c$ and
$u_c$ be characteristic sizes of the perturbations in density and velocity.
The density will then vary in $[\varrho_0-\varrho_c,\varrho_0+\varrho_c]$.
An appropriate scaling is

!bt
\[ \bar\varrho =\frac{\varrho - \varrho_0}{\varrho_c} \]
!et
such that $\bar\varrho\in [-1,1]$. Consequently,

!bt
\[ \varrho = \varrho_0 + \varrho_c\bar\varrho = \varrho_0(1 + \alpha\bar\varrho),\quad \alpha = \frac{\varrho_c}{\varrho_0}\tp\]
!et
Note that the dimensionless $\alpha$ is expected to be a very small number
since $\varrho_c\ll \varrho_0$.
The velocity, space, and time are scaled as in the previous
section.
Also note that $\varrho_0$ and $p_0$ are known values, but the scales
$\varrho_c$ and $U$ are not known. Usually these
can be estimated from perturbations (i.e., sound generation)
applied at the boundary.

Inserting the scaled variables in (ref{scale:gas:acoustic:rho})
and (ref{scale:gas:acoustic:u2}) results in

!bt
\begin{align*}
\alpha\frac{\varrho_0}{t_c}\frac{\partial\bar\varrho}{\partial\bar t}
+ \frac{\varrho_0 U}{L}\bar\nabla\cdot((1+\alpha\bar\varrho)\bar\u) &=0,\\
\frac{\varrho_0 U}{t_c}(1 + \alpha\bar\varrho)
\frac{\partial\bar\u}{\partial\bar t} +
\frac{\varrho_0 U^2}{L}(1 + \alpha\bar\varrho)\bar u\cdot\bar\nabla\bar\u
+ \alpha\frac{\varrho_0}{L}c_0^2\left(1 + \alpha\bar\varrho\right)^{\gamma-1}
\bar\nabla\bar\varrho
&=0\tp
\end{align*}
!et

Since we now model sound waves, the relevant time scale is not $L/U$
but the time it takes a wave to travel through the domain: $t_c=L/c_0$.
This is a much smaller time scale than in the previous section because
$c_0\gg U$
(think of humans speaking: the sound travels very fast but one cannot feel
the corresponding very small flow perturbation in the air!).
Using $t_c=L/u_0$ we get

!bt
\begin{align*}
\alpha \frac{\partial\bar\varrho}{\partial\bar t}
+ \hbox{M}\bar\nabla\cdot((1+\alpha\bar\varrho)\bar\u) &=0,\\
(1 + \alpha\bar\varrho)
\frac{\partial\bar\u}{\partial\bar t} +
\hbox{M}(1 + \alpha\bar\varrho)\bar\u\cdot\bar\nabla\bar\u +
\alpha\hbox{M}^{-1}\left(1 + \alpha \bar\varrho\right)^{\gamma-1}\bar\nabla\bar\varrho
&=0\tp
\end{align*}
!et

For small perturbations the linear terms in these equations must balance.
This points to $M$ and $\alpha$ being of the same order and we may
choose $\alpha=M$ to obtain

!bt
\begin{align*}
\frac{\partial\bar\varrho}{\partial\bar t}
+\bar\nabla\cdot((1+\hbox{M}\bar\varrho)\bar\u) &=0,\\
\frac{\partial\bar\u}{\partial\bar t} +
\hbox{M}\bar\u\cdot\bar\nabla\bar\u +
\left(1 + \hbox{M} \bar\varrho\right)^{\gamma-2}\bar\nabla\bar\varrho
&=0\tp
\end{align*}
!et

Now the Mach number,  $\hbox{M}$, appears in the nonlinear terms only.
Letting $\hbox{M}\rightarrow 0$ we arrive at the following linearized system of PDEs

!bt
\begin{align}
\frac{\partial\bar\varrho}{\partial\bar t}
+ \bar\nabla\cdot\bar\u &=0,
label{scale:gas:acoustic:rho:s}\\
\frac{\partial\bar\u}{\partial\bar t} + \bar\nabla\bar\varrho &=0,
label{scale:gas:acoustic:u2:s}
\end{align}
!et

The velocity $\u$ can be eliminated taking the time derivative of
(ref{scale:gas:acoustic:rho:s}) and the divergence of
(ref{scale:gas:acoustic:u2:s}):

!bt
\begin{equation}
\frac{\partial^2\bar\varrho}{\partial\bar t^2} =
\bar\nabla^2\bar\varrho,
\end{equation}
!et
which is nothing but a standard dimensionless wave equation with
unit wave velocity. Similarly,
we can eliminate $\varrho$ by taking the divergence of
(ref{scale:gas:acoustic:rho:s}) and the time derivative of
(ref{scale:gas:acoustic:u2:s}):

!bt
\begin{equation}
\frac{\partial^2\bar\u}{\partial\bar t^2} =
\bar\nabla^2\bar\u\tp
\end{equation}
!et
We also observe that there are no physical parameters in the scaled
wave equations. The M parameter can be eliminated from
(ref{scale:gas:acoustic:rho:s})-(ref{scale:gas:acoustic:u2:s}) as well
by introducing a new unknown $\bar\v = M\bar\u$.


======= Surface gravity waves =======
label{scale:surfacewaves}

===== Equations for surface waves =====
label{scale:surfacewaves:Eulereq}

Provided the Weber number, see section ref{freesurface:Weber}, is
sufficiently small, capillary effects may be omitted and surface waves are
governed by gravity.  For large Reynolds numbers viscous effects
may also be ignored (save in boundary layers close to the bottom or
the surface of the fluid). The flow of an incompressible homogeneous
fluid under these assumptions
is governed by the Euler equations of motion on the form

!bt
\begin{align}
\nabla\cdot\u &=0,
label{scale:surfacewaves:cont}\\
\frac{\partial\u}{\partial t} + \u\cdot\nabla\u + \frac{1}{\rho}\nabla p +g\mathbf{k}&=0\tp
label{scale:surfacewave:u}
\end{align}
!et
When the free surface position is described as
$z=\eta(x,y,t)$, with $z$ as the vertical coordinate, the boundary conditions
at the surface read

!bt
\begin{align}
p &=p_s,
label{scale:surfacewaves:dynsurf}\\
\frac{\partial\eta}{\partial t} + \u\cdot\nabla\eta &=w,
label{scale:surfacewave:kinsurf}
\end{align}
!et
where $p_s$ is the external pressure applied to the surface. At the
bottom, $z=-h(x,y)$, there is the no-flux condition

!bt
\[
label{scale:surfacewave:kinbott}
\frac{\partial h}{\partial x}u+\frac{\partial h}{\partial y}v =-w\tp
\]
!et
In addition to $\rho$ and  $g$ we assume that a typical depth $h_c$,
a typical wavelength $\lambda_c$, and a typical surface elevation $A$, which
then per definition is a scale for $\eta$, are
the given parameters. From these we must derive scales for the coordinates, the velocity components, and the pressure.

First, it is instructive to define a typical wave celerity, $c_c$, which
must be linked to the length and time scale according to $c_c=\lambda_c/t_c$.
Since there is no other given parameter that matches the mass dimension of
$\rho$ we express $c_c$ in terms of $A$, $\lambda_c$, $h_c$, and $g$.
Most of the work on waves in any discipline of physics is devoted to linear
or weakly nonlinear waves and the wave celerity must be presumed to remain
finite as $A$ goes to zero (see, for instance, Section ref{scale:gas:acoustic}).
Hence, we may assume  that $c_c$ must depend on $g$ and either $h_c$ or $\lambda_c$. Next, the two horizontal directions are equivalent with regard to
scaling, implying that
we have a common velocity scale, $U$, for $u$ and $v$, a common length scale $L$
for $x$ and $y$. The obvious choice for $L$ is $\lambda_c$, while
the ``vertical quantities'' $w$ and $z$ have scales $W$ and $Z$, respectively, which may differ from the horizontal counterparts.
However, we assume that also the length scale $Z$ remains finite
as $A\rightarrow 0$ and hence is independent of $A$. This is less
obvious for $Z$ than for $c_c$ and $t_c$, but may eventually
be confirmed by the existence
of linear solutions when solving the equation set.
From the linear part of (ref{scale:surfacewave:kinsurf}) and (ref{scale:surfacewaves:cont}) we obtain two relations between velocity and coordinate scales by demanding the non-dimensionalized terms to be of order unity

!bt
\begin{equation}
label{scale:surfacewaves:scalrelations}
\frac{A}{t_c} = W,\quad \frac{U}{L}=\frac{W}{Z}\tp
\end{equation}
!et
These relations are indeed useful, but they do not suffice to establish the scaling.

The pressure may be regarded as the sum of a large equilibrium part, balancing
gravity, and a much smaller dynamic part associated with the presence of
waves. To make the latter appear in the equations we define the
dynamic pressure, $p_d$, according to
!bt
\[ p=p_s-\rho g z +p_d,\]
!et
and the pressure scale $p_c=\rho g A$ for $p_d$ then follows directly from
the surface condition (ref{scale:surfacewaves:dynsurf}).

The equation set will be scaled according to

!bt
\[
\bar t=\frac{t}{t_c},\ \bar x=\frac{x}{L},\ \bar y =\frac{y}{L},\ \bar z =\frac{z}{Z},\ \bar \eta=\frac{\eta}{A},\ \bar u=\frac{u}{U},\ \bar v=\frac{v}{U},\ \bar w=\frac{w}{W},\ \bar p_d=\frac{p_d}{p_c}\tp
\]
!et
In the further development of the scaling
we focus on two limiting cases, namely deep and shallow water.

=== Waves in deep  water ===

Deep water means that $h_c\gg\lambda_c$. Presumably the waves will not
feel the bottom, and $h$ as well as $h_c$ are removed from our
equations. The bottom boundary condition is replaced by a requirement
of vanishing velocity as $z\rightarrow -\infty$. Consequently, $c_c$
must depend upon $\lambda_c$ and $g$, leaving us with
$c_c=\sqrt{g\lambda_c}$ and $Z=\lambda_c=L$ as the only options.
Then, $t_c=\sqrt{\lambda_c/g}$ and
(ref{scale:surfacewaves:scalrelations}) implies
$U=W=c_0\frac{A}{\lambda_c}=\epsilon c_0$, where we have introduced
the non-dimensional number

!bt
\[\epsilon=\frac{A}{\lambda_c},\]
!et
which is the wave steepness. The equality of the horizontal and the vertical
scale is consistent with the common knowledge that the particle orbits in
deep water surface waves are circular.

The scaled equation are now expressed with $\epsilon$ as sole dimensionless
number

!bt
\begin{align}
\bar \nabla\cdot\bar\u &=0,
label{scale:surfacewaves:cont:}\\
\frac{\partial\bar\u}{\partial \bar t} + \epsilon\bar \u\cdot\bar\nabla\bar\u + \bar\nabla \bar p_d&=0\tp
label{scale:surfacewave:u:s}
\end{align}
!et
The surface conditions, at $z=\epsilon \eta$, become

!bt
\begin{align}
\bar p_d &=\bar \eta,
label{scale:surfacewaves:dynsurf:s}\\
\frac{\partial\bar\eta}{\partial \bar t} + \epsilon \bar \u\cdot\bar\nabla\bar\eta &=\bar w,
label{scale:surfacewave:kinsurf:s}
\end{align}
!et
while the bottom condition is replaced by

!bt
\begin{equation}
label{scale:surfacewave:kinbott2}
\bar\u \rightarrow 0,
\end{equation}
!et
as $\bar z \rightarrow -\infty$.

=== Long waves in shallow water ===

In this case the basic assumption is that the wavelength is large
compared to the depth: $\lambda_c\gg h_c$. In analogy with the reasoning
above, we the presume that the speed of the waves remains finite as
$\lambda_c\rightarrow \infty$.  Then, $c_c$ must be based on $g$ and
$h_c$, which leads to $c_c=\sqrt{gh_c}$ and
$t_c=\lambda_c/\sqrt{gh_c}$. The natural choice for the vertical
length scale is now the depth; $Z=h_c$.  Application of
(ref{scale:surfacewaves:scalrelations}) then leads to $W=c_c A/\lambda_c$
and $U=c_c A/h_c$.

Introducing the dimensionless numbers
!bt
\[ \alpha=\frac{A}{h_c},\quad \mu=\frac{h_c}{\lambda_c},\]
!et
we rewrite the velocity scales as

!bt
\[ W=\mu\alpha c_c,\quad U=\alpha c_c\tp\]
!et
We observe that $W\ll U$ for shallow water and that particle orbits must be elongated in the horizontal direction.

The equation set is now most transparently written by introducing the
horizontal velocity $\bar\u_h=\bar u\mathbf{i}+\bar v\mathbf{j}$
and the corresponding vertical component of the gradient operator, $\bar\nabla_h$:

!bt
\begin{align}
\bar \nabla\cdot\bar\u_h +\frac{\partial \bar w}{\partial \bar z}&=0,
label{scale:surfacewaves:contskalert}\\
\frac{\partial\bar\u}{\partial \bar t} + \alpha\bar \u\cdot\bar\nabla_h\bar\u_h+\alpha \bar w \frac{\partial \bar \u_h}{\partial \bar z} + \bar\nabla_h \bar p_d&=0,\\
\mu^2\left(\frac{\partial\bar\w}{\partial \bar t} + \alpha\bar \u\cdot\bar\nabla_h\bar\w+\alpha \bar w \frac{\partial \bar w}{\partial \bar z}\right) + \frac{\partial \bar p_d}{\partial \bar z}&=0.\tp
label{scale:surfacewave:uh}
\end{align}
!et
Surface conditions, at $z=\alpha \eta$, now become

!bt
\begin{align}
\bar p_d &=\bar \eta,
label{scale:surfacewaves:dynsurf:s2}\\
\frac{\partial\bar\eta}{\partial \bar t} + \alpha \bar \u_h\cdot\bar\nabla_h\bar\eta &=\bar w,
label{scale:surfacewave:kinsurf:s2}
\end{align}
!et
while the bottom condition is invariant with respect to the present scaling

!bt
\begin{equation}
label{scale:surfacewave:kinbott3}
\bar\nabla_h\cdot\u_h =-\bar w\tp
\end{equation}
!et
An immediate consequence is that $\bar p_d$ remains equal to $\bar \eta$ throughout the water column when $\mu^2\rightarrow 0$, which imply that the pressure
is hydrostatic. The above set of equations is a common  starting point for
perturbation expansions in $\epsilon$ and $\mu^2$ that lead to shallow water,
KdV, and Boussinesq type equations.



======= Exercises =======


===== Exercise: Comparison of vibration models for elastic structures =====
label{scale::exer:elasticity:vibmodels}

The time scale for displacement in elastic structures is, according to
Section ref{scale:elasticity:timedep}, $t_c=L\sqrt{\varrho/\mu}$ if we
assume constant density $\varrho$ and constant shear modulus $\mu$ for
the structure. The purpose of this exercise is to compare this time
scale with the time scales of related models.

!bsubex
Longitudinal waves in a bar can be modeled approximately by the PDE

!bt
\[ \varrho\frac{\partial^2 u}{\partial t^2} + E\frac{\partial^2 u}{\partial x^2} = 0,\]
!et
where $u(x,t)$ is the displacement along the bar, and $E$ is Young's modulus,
related to the shear modulus $\mu$ through

!bt
\[ E = 2\mu (1+\nu),\]
!et
where $\nu\in (0,0.5]$ is Poisson's ratio.
Find the time scale for the longitudinal waves and compare with the $t_c$
for displacements in a three-dimensional body.

!bsol
Introducing dimensionless dependent and independent variables the
usual way gives us

!bt
\[ \frac{\partial^2 \bar u}{\partial \bar t^2} +
\frac{t_c^2 E}{\varrho L^2}\frac{\partial^2 \bar u}{\partial \bar x^2} = 0,\]
!et
where $L$ is the length scale, typically the length of the bar.
The natural choice of $t_c$ is to make the coefficient unity,

!bt
\[ t_c = L\sqrt{\frac{\varrho}{E}} = L\sqrt{\frac{\varrho}{\mu}}
\frac{1}{\sqrt{2(1+\nu)}}\approx 0.6 L\sqrt{\frac{\varrho}{\mu}},\]
!et
if we take $\nu = 0.3$ as a typical value.
!esol
!esubex

!bsubex
Vertical vibrations of a beam are governed by the PDE

!bt
\[ \rho\frac{\partial^2 u}{\partial t^2} + EI\frac{\partial^4 u}{\partial x^4} = 0,\]
!et
where $u(x,t)$ is the vertical displacement along the beam,
$\rho$ is the mass per length of the beam,
$E$ is Young's modulus, and $I$ is the moment of inertia. For a
rectangular cross section of width $b$ and height $h$, $I=\frac{1}{12}bh^3$.
Compare the time scale for these vibrations with the time scale $t_c$
for three-dimensional elasticity.

!bsol
The dimensionless equation becomes

!bt
\[ \frac{\partial^2 \bar u}{\partial \bar t^2} + \frac{t_c^2EI}{\rho L^4}
\frac{\partial^4 \bar u}{\partial \bar x^4} = 0\tp\]
!et
The natural choice of $t_c$ is

!bt
\[ t_c = L^2\sqrt{\frac{\rho}{EI}} = L\sqrt{\frac{\varrho}{\mu}} L \sqrt{
\frac{12}{2h^2(1+\nu)}} \approx 2\frac{L}{h} L\sqrt{\frac{\varrho}{\mu}},\]
!et
where we have set $\nu = 0.3$ and used that $\rho = \varrho bh$ for
a rectangular cross section. For a beam, $L\gg h$, so the time scale
for vertical vibrations of a beam is much larger than the time scale
for elastic waves in a three-dimensional body.
!esol
!esubex

===== Exercise: A model for quasi-static poro-elasticity =====
label{scale:exer:poroelasticity}
file=poroelasticity

Flow through a porous elastic medium may induce stress and deformation.
This process is known as poro-elasticity and is governed by the
following equations for a homogeneous medium:

!bt
\begin{align}
(\lambda + \mu)\nabla (\nabla\cdot\u) + \mu\nabla^2\u &= -\alpha\nabla p -
\varrho\f,\\
S\frac{\partial p}{\partial t} &= \frac{K}{\mu_f}\nabla^2 p +
\alpha \frac{\partial}{\partial t}\nabla\cdot\u,
\end{align}
!et
where $\u(\x,t)$ is the displacement field, $\lambda$ and $\mu$ are
Lame's elasticity parameters, $\alpha\in [0,1]$, $\f$ is the body
force, here assumed constant (usually gravity, $\f = -g\kk$,
$S$ is a so-called storage coefficient, $p(\x,t)$ is the fluid pressure,
$K$ is the medium's permeability, $\mu_f$ is the dynamic viscosity of
the fluid, and $\varrho$ is the density of the fluid-solid mixture:

!bt
\[ \varrho = (1-\phi) \varrho_s + \phi\varrho_f, \]
!et
with $\varrho_f$ being the density of the fluid, $\varrho_s$ the density
of the solid, and $\phi$ the porosity of the elastic medium.
The equations are known as Biot's equations of poro-elasticity and written
here in a quasi-static form where elastic waves are neglected.

Scale this partial differential equation model, assuming that
$\lambda$, $\mu$, $\alpha$, $\f$, $\varrho$, $\phi$, $\varrho_s$,
$\varrho_f$, $S$, $\mu_f$, and $K$ are all constants.

!bhint
The model is very similar to the equations of thermo-elasticity in
Section ref{scale:elasticity:thermo}.
!ehint

===== Problem: Starting Couette flow =====
label{scale:vib:exer:starting_Couette}
file=starting_Couette

A fluid is confined in a channel with two planar walls $z=0$ and $z=H$.
The fluid is at rest. At time $t=0$ the upper wall is suddenly set in
motion with a velocity $U\ii$. We assume that the velocity is
directed along the $x$ axis: $\u = u(x,z,t)\ii$. From the equation of continuity, $\nabla\cdot\u =0$, we get that $\partial u/\partial x = 0$ such
that $\u = u(z,t)\ii$. The boundary conditions are $\u=0$ at the lower
wall $z=0$ and $\u = U\ii$ at the upper wall $z=H$. Assume that the
pressure is constant everywhere and that there are no body forces.

!bsubex
Start with the incompressible Navier-Stokes equations and the
assumption $\u = u(z,t)\ii$. Derive an initial-boundary value problem
for $u(z,t)$. Scale the problem.

!bsol
Inserting the simplified velocity in the original Navier-Stokes equations
makes the convection term $\u\cdot\nabla\u$ vanish and $\nabla p$ vanishes
since $p$ is assumed constant (only the upper wall drives the flow).
The result becomes

!bt
\[ \varrho \frac{\partial u}{\partial t} = \mu
\frac{\partial^2 u}{\partial z},\]
!et
or using $\mu/\varrho =\nu$,

!bt
\[ \frac{\partial u}{\partial t} = \nu
\frac{\partial^2 u}{\partial z},\]
!et
with $u(z,0)=0$, $u(0,t)=0$ and $u(H,t)=U$. This is a standard
diffusion problem. The natural length scale is $H$, so
$\bar z = z/H$. Using the well-established time scale $t_c= H^2/\nu$
and the velocity scale $u_c=U$, we get the dimensionless problem

!bt
\[ \frac{\partial \bar u}{\partial \bar t} =
\frac{\partial^2\bar u}{\partial \bar z},\]
!et
with $\bar u(\bar z,0)=0$, $u(0,\bar t)=0$, $u(1,t)=1$.
There are no physical parameters. Having computed $\bar u(\bar z, \bar t)$,
the physical solution can be retrieved as

!bt
\[ u(z,t) = U\bar u(\bar zH, \bar t H^2/\nu)\tp\]
!et
!esol
!esubex

!bsubex
Start with the dimensionless Navier-Stokes equations and use
the assumption $\bar\u = \bar u(\bar z,\bar t)\ii$ to reduce
the problem. The resulting equation now contains a Reynolds
number, i.e., one more physical parameter than in a).
Why is this an inferior approach to scaling the problem?

!bsol
Inserting the simplified velocity in the scaled Navier-Stokes
equations leads to

!bt
\[ \frac{\partial \bar u}{\partial \bar t} = \frac{1}{\hbox{Re}}
\frac{\partial^2\bar u}{\partial \bar z}\tp\]
!et
Here we have the Reynolds number as parameter.

The major difference is the scaling used in time: $t_c=H/U$
(length scale is $H$ here) versus $t_c = H^2/\nu$. The latter
is much more suitable as it is based on a diffusion problem and
the present problem is indeed a diffusion problem.
Normally, $\nu$ is very small, so $t_c$ based on diffusion is usually much
larger than $H/U$. With an inappropriate time scale,
$\partial \bar u/\partial\bar t$ is not of unit size, and we need a
dimensionless number on the right-hand side to adjust the
spatial derivative term to a non-unity size. The wrong scaling
thereby introduces an extra (unnecessary) parameter.
!esol
!esubex

!bsubex
Can you construct a heat conduction problem that has the same solution
$\bar u(\bar z,\bar t)$ as in a)?

!bsol
Consider a long rod with length $H$ aligned with the $z$ axis.
The rod is isolated on the curved circular surface and kept
at fixed temperatures $U_0$ and $U_H$ at the ends $z=0$ and $z=H$,
respectively. The initial temperature is $U_0$.
Because of the insulated curved surface, heat can only propagate in
the $z$ direction, and a one-dimensional
heat conduction equation is appropriate:

!bt
\[ \frac{\partial u}{\partial t} = \dfc
\frac{\partial^2 u}{\partial z},\]
!et
with $u(z,0)=U_0$, $u(0,t)=U_0$, and $u(H,t)=U_H$.
We introduce a dimensionless temperature

!bt
\[ \bar u = \frac{u - U_0}{U_H - U_0},\]
!et
such that $\bar u\in [0,1]$. The standard time scale $t_c=H^2/\dfc$
is used, notifying that the length scale is $H$. Inserting the
dimensionless variables in the governing equation results in
the same problem as in a). It means that we from one solution
$\bar u(\bar z,\bar t)$ can get solutions for heat conduction
in rods of all lengths and materials, and with all boundary temperatures,
as well as flow of any fluid
between two walls with any gap and any velocity of the upper wall.
!esol
!esubex

!bsubex
Describe how the scaled problem in this exercise can be solved
by a program that solves the following diffusion problem with dimensions:

!bt
\begin{align*}
\frac{\partial u}{\partial t} &=
\dfc \frac{\partial^2 u}{\partial z} + f(x,t),\\
u(x,0) &= I(x),\\
u(0,t) & =U_0(t),\\
u(L,t) & =U_L(t)\tp
\end{align*}
!et

!bsol
Let $z$ be named $x$. Set $\dfc = 1$, $f=0$, $L=1$, $I(x)=0$,
$U_0(t)=0$, $U_L(t)=1$. The resulting problem is our scaled problem from a).
!esol
!esubex
